
WheelChair_KSML.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fed0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00022fcc  080100a0  080100a0  000200a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0803306c  0803306c  00050078  2**0
                  CONTENTS
  4 .ARM          00000008  0803306c  0803306c  0004306c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08033074  08033074  00050078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08033074  08033074  00043074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08033078  08033078  00043078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0803307c  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007f30  20000078  080330f4  00050078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20007fa8  080330f4  00057fa8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00050078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00046629  00000000  00000000  000500a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006b9a  00000000  00000000  000966d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001340  00000000  00000000  0009d270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010c8  00000000  00000000  0009e5b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a8e6  00000000  00000000  0009f678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002305b  00000000  00000000  000c9f5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee375  00000000  00000000  000ecfb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001db32e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005824  00000000  00000000  001db384  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08010088 	.word	0x08010088

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	08010088 	.word	0x08010088

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b96e 	b.w	8000f6c <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9d08      	ldr	r5, [sp, #32]
 8000cae:	4604      	mov	r4, r0
 8000cb0:	468c      	mov	ip, r1
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	f040 8083 	bne.w	8000dbe <__udivmoddi4+0x116>
 8000cb8:	428a      	cmp	r2, r1
 8000cba:	4617      	mov	r7, r2
 8000cbc:	d947      	bls.n	8000d4e <__udivmoddi4+0xa6>
 8000cbe:	fab2 f282 	clz	r2, r2
 8000cc2:	b142      	cbz	r2, 8000cd6 <__udivmoddi4+0x2e>
 8000cc4:	f1c2 0020 	rsb	r0, r2, #32
 8000cc8:	fa24 f000 	lsr.w	r0, r4, r0
 8000ccc:	4091      	lsls	r1, r2
 8000cce:	4097      	lsls	r7, r2
 8000cd0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cd4:	4094      	lsls	r4, r2
 8000cd6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cda:	0c23      	lsrs	r3, r4, #16
 8000cdc:	fbbc f6f8 	udiv	r6, ip, r8
 8000ce0:	fa1f fe87 	uxth.w	lr, r7
 8000ce4:	fb08 c116 	mls	r1, r8, r6, ip
 8000ce8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cec:	fb06 f10e 	mul.w	r1, r6, lr
 8000cf0:	4299      	cmp	r1, r3
 8000cf2:	d909      	bls.n	8000d08 <__udivmoddi4+0x60>
 8000cf4:	18fb      	adds	r3, r7, r3
 8000cf6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cfa:	f080 8119 	bcs.w	8000f30 <__udivmoddi4+0x288>
 8000cfe:	4299      	cmp	r1, r3
 8000d00:	f240 8116 	bls.w	8000f30 <__udivmoddi4+0x288>
 8000d04:	3e02      	subs	r6, #2
 8000d06:	443b      	add	r3, r7
 8000d08:	1a5b      	subs	r3, r3, r1
 8000d0a:	b2a4      	uxth	r4, r4
 8000d0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d10:	fb08 3310 	mls	r3, r8, r0, r3
 8000d14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d18:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d1c:	45a6      	cmp	lr, r4
 8000d1e:	d909      	bls.n	8000d34 <__udivmoddi4+0x8c>
 8000d20:	193c      	adds	r4, r7, r4
 8000d22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d26:	f080 8105 	bcs.w	8000f34 <__udivmoddi4+0x28c>
 8000d2a:	45a6      	cmp	lr, r4
 8000d2c:	f240 8102 	bls.w	8000f34 <__udivmoddi4+0x28c>
 8000d30:	3802      	subs	r0, #2
 8000d32:	443c      	add	r4, r7
 8000d34:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d38:	eba4 040e 	sub.w	r4, r4, lr
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	b11d      	cbz	r5, 8000d48 <__udivmoddi4+0xa0>
 8000d40:	40d4      	lsrs	r4, r2
 8000d42:	2300      	movs	r3, #0
 8000d44:	e9c5 4300 	strd	r4, r3, [r5]
 8000d48:	4631      	mov	r1, r6
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	b902      	cbnz	r2, 8000d52 <__udivmoddi4+0xaa>
 8000d50:	deff      	udf	#255	; 0xff
 8000d52:	fab2 f282 	clz	r2, r2
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	d150      	bne.n	8000dfc <__udivmoddi4+0x154>
 8000d5a:	1bcb      	subs	r3, r1, r7
 8000d5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d60:	fa1f f887 	uxth.w	r8, r7
 8000d64:	2601      	movs	r6, #1
 8000d66:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d6a:	0c21      	lsrs	r1, r4, #16
 8000d6c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d70:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d74:	fb08 f30c 	mul.w	r3, r8, ip
 8000d78:	428b      	cmp	r3, r1
 8000d7a:	d907      	bls.n	8000d8c <__udivmoddi4+0xe4>
 8000d7c:	1879      	adds	r1, r7, r1
 8000d7e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d82:	d202      	bcs.n	8000d8a <__udivmoddi4+0xe2>
 8000d84:	428b      	cmp	r3, r1
 8000d86:	f200 80e9 	bhi.w	8000f5c <__udivmoddi4+0x2b4>
 8000d8a:	4684      	mov	ip, r0
 8000d8c:	1ac9      	subs	r1, r1, r3
 8000d8e:	b2a3      	uxth	r3, r4
 8000d90:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d94:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d98:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d9c:	fb08 f800 	mul.w	r8, r8, r0
 8000da0:	45a0      	cmp	r8, r4
 8000da2:	d907      	bls.n	8000db4 <__udivmoddi4+0x10c>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x10a>
 8000dac:	45a0      	cmp	r8, r4
 8000dae:	f200 80d9 	bhi.w	8000f64 <__udivmoddi4+0x2bc>
 8000db2:	4618      	mov	r0, r3
 8000db4:	eba4 0408 	sub.w	r4, r4, r8
 8000db8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dbc:	e7bf      	b.n	8000d3e <__udivmoddi4+0x96>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d909      	bls.n	8000dd6 <__udivmoddi4+0x12e>
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	f000 80b1 	beq.w	8000f2a <__udivmoddi4+0x282>
 8000dc8:	2600      	movs	r6, #0
 8000dca:	e9c5 0100 	strd	r0, r1, [r5]
 8000dce:	4630      	mov	r0, r6
 8000dd0:	4631      	mov	r1, r6
 8000dd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd6:	fab3 f683 	clz	r6, r3
 8000dda:	2e00      	cmp	r6, #0
 8000ddc:	d14a      	bne.n	8000e74 <__udivmoddi4+0x1cc>
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d302      	bcc.n	8000de8 <__udivmoddi4+0x140>
 8000de2:	4282      	cmp	r2, r0
 8000de4:	f200 80b8 	bhi.w	8000f58 <__udivmoddi4+0x2b0>
 8000de8:	1a84      	subs	r4, r0, r2
 8000dea:	eb61 0103 	sbc.w	r1, r1, r3
 8000dee:	2001      	movs	r0, #1
 8000df0:	468c      	mov	ip, r1
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	d0a8      	beq.n	8000d48 <__udivmoddi4+0xa0>
 8000df6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dfa:	e7a5      	b.n	8000d48 <__udivmoddi4+0xa0>
 8000dfc:	f1c2 0320 	rsb	r3, r2, #32
 8000e00:	fa20 f603 	lsr.w	r6, r0, r3
 8000e04:	4097      	lsls	r7, r2
 8000e06:	fa01 f002 	lsl.w	r0, r1, r2
 8000e0a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e0e:	40d9      	lsrs	r1, r3
 8000e10:	4330      	orrs	r0, r6
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e18:	fa1f f887 	uxth.w	r8, r7
 8000e1c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e20:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e24:	fb06 f108 	mul.w	r1, r6, r8
 8000e28:	4299      	cmp	r1, r3
 8000e2a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e2e:	d909      	bls.n	8000e44 <__udivmoddi4+0x19c>
 8000e30:	18fb      	adds	r3, r7, r3
 8000e32:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e36:	f080 808d 	bcs.w	8000f54 <__udivmoddi4+0x2ac>
 8000e3a:	4299      	cmp	r1, r3
 8000e3c:	f240 808a 	bls.w	8000f54 <__udivmoddi4+0x2ac>
 8000e40:	3e02      	subs	r6, #2
 8000e42:	443b      	add	r3, r7
 8000e44:	1a5b      	subs	r3, r3, r1
 8000e46:	b281      	uxth	r1, r0
 8000e48:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e4c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e54:	fb00 f308 	mul.w	r3, r0, r8
 8000e58:	428b      	cmp	r3, r1
 8000e5a:	d907      	bls.n	8000e6c <__udivmoddi4+0x1c4>
 8000e5c:	1879      	adds	r1, r7, r1
 8000e5e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e62:	d273      	bcs.n	8000f4c <__udivmoddi4+0x2a4>
 8000e64:	428b      	cmp	r3, r1
 8000e66:	d971      	bls.n	8000f4c <__udivmoddi4+0x2a4>
 8000e68:	3802      	subs	r0, #2
 8000e6a:	4439      	add	r1, r7
 8000e6c:	1acb      	subs	r3, r1, r3
 8000e6e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e72:	e778      	b.n	8000d66 <__udivmoddi4+0xbe>
 8000e74:	f1c6 0c20 	rsb	ip, r6, #32
 8000e78:	fa03 f406 	lsl.w	r4, r3, r6
 8000e7c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e80:	431c      	orrs	r4, r3
 8000e82:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e86:	fa01 f306 	lsl.w	r3, r1, r6
 8000e8a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e8e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e92:	431f      	orrs	r7, r3
 8000e94:	0c3b      	lsrs	r3, r7, #16
 8000e96:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e9a:	fa1f f884 	uxth.w	r8, r4
 8000e9e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ea2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ea6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eaa:	458a      	cmp	sl, r1
 8000eac:	fa02 f206 	lsl.w	r2, r2, r6
 8000eb0:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb4:	d908      	bls.n	8000ec8 <__udivmoddi4+0x220>
 8000eb6:	1861      	adds	r1, r4, r1
 8000eb8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ebc:	d248      	bcs.n	8000f50 <__udivmoddi4+0x2a8>
 8000ebe:	458a      	cmp	sl, r1
 8000ec0:	d946      	bls.n	8000f50 <__udivmoddi4+0x2a8>
 8000ec2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ec6:	4421      	add	r1, r4
 8000ec8:	eba1 010a 	sub.w	r1, r1, sl
 8000ecc:	b2bf      	uxth	r7, r7
 8000ece:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ed2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ed6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eda:	fb00 f808 	mul.w	r8, r0, r8
 8000ede:	45b8      	cmp	r8, r7
 8000ee0:	d907      	bls.n	8000ef2 <__udivmoddi4+0x24a>
 8000ee2:	19e7      	adds	r7, r4, r7
 8000ee4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ee8:	d22e      	bcs.n	8000f48 <__udivmoddi4+0x2a0>
 8000eea:	45b8      	cmp	r8, r7
 8000eec:	d92c      	bls.n	8000f48 <__udivmoddi4+0x2a0>
 8000eee:	3802      	subs	r0, #2
 8000ef0:	4427      	add	r7, r4
 8000ef2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ef6:	eba7 0708 	sub.w	r7, r7, r8
 8000efa:	fba0 8902 	umull	r8, r9, r0, r2
 8000efe:	454f      	cmp	r7, r9
 8000f00:	46c6      	mov	lr, r8
 8000f02:	4649      	mov	r1, r9
 8000f04:	d31a      	bcc.n	8000f3c <__udivmoddi4+0x294>
 8000f06:	d017      	beq.n	8000f38 <__udivmoddi4+0x290>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x27a>
 8000f0a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f0e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f12:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f16:	40f2      	lsrs	r2, r6
 8000f18:	ea4c 0202 	orr.w	r2, ip, r2
 8000f1c:	40f7      	lsrs	r7, r6
 8000f1e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f22:	2600      	movs	r6, #0
 8000f24:	4631      	mov	r1, r6
 8000f26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f2a:	462e      	mov	r6, r5
 8000f2c:	4628      	mov	r0, r5
 8000f2e:	e70b      	b.n	8000d48 <__udivmoddi4+0xa0>
 8000f30:	4606      	mov	r6, r0
 8000f32:	e6e9      	b.n	8000d08 <__udivmoddi4+0x60>
 8000f34:	4618      	mov	r0, r3
 8000f36:	e6fd      	b.n	8000d34 <__udivmoddi4+0x8c>
 8000f38:	4543      	cmp	r3, r8
 8000f3a:	d2e5      	bcs.n	8000f08 <__udivmoddi4+0x260>
 8000f3c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f40:	eb69 0104 	sbc.w	r1, r9, r4
 8000f44:	3801      	subs	r0, #1
 8000f46:	e7df      	b.n	8000f08 <__udivmoddi4+0x260>
 8000f48:	4608      	mov	r0, r1
 8000f4a:	e7d2      	b.n	8000ef2 <__udivmoddi4+0x24a>
 8000f4c:	4660      	mov	r0, ip
 8000f4e:	e78d      	b.n	8000e6c <__udivmoddi4+0x1c4>
 8000f50:	4681      	mov	r9, r0
 8000f52:	e7b9      	b.n	8000ec8 <__udivmoddi4+0x220>
 8000f54:	4666      	mov	r6, ip
 8000f56:	e775      	b.n	8000e44 <__udivmoddi4+0x19c>
 8000f58:	4630      	mov	r0, r6
 8000f5a:	e74a      	b.n	8000df2 <__udivmoddi4+0x14a>
 8000f5c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f60:	4439      	add	r1, r7
 8000f62:	e713      	b.n	8000d8c <__udivmoddi4+0xe4>
 8000f64:	3802      	subs	r0, #2
 8000f66:	443c      	add	r4, r7
 8000f68:	e724      	b.n	8000db4 <__udivmoddi4+0x10c>
 8000f6a:	bf00      	nop

08000f6c <__aeabi_idiv0>:
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop

08000f70 <_ZN2NNC1Ev>:
#ifndef __NN_H__
#define __NN_H__

#include "arm_nnfunctions.h"

class NN {
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	4a04      	ldr	r2, [pc, #16]	; (8000f8c <_ZN2NNC1Ev+0x1c>)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	601a      	str	r2, [r3, #0]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4618      	mov	r0, r3
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	0801598c 	.word	0x0801598c

08000f90 <_ZN6DS_CNNC1Ev>:
const q7_t DS_CNN::conv5_pw_wt[CONV5_OUT_CH*CONV4_OUT_CH]=CONV5_PW_WT;
const q7_t DS_CNN::conv5_pw_bias[CONV5_OUT_CH]=CONV5_PW_BIAS;
const q7_t DS_CNN::final_fc_wt[CONV5_OUT_CH*OUT_DIM]=FINAL_FC_WT;
const q7_t DS_CNN::final_fc_bias[OUT_DIM]=FINAL_FC_BIAS;

DS_CNN::DS_CNN()
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f7ff ffe8 	bl	8000f70 <_ZN2NNC1Ev>
 8000fa0:	4a19      	ldr	r2, [pc, #100]	; (8001008 <_ZN6DS_CNNC1Ev+0x78>)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	601a      	str	r2, [r3, #0]
{
  scratch_pad = new q7_t[SCRATCH_BUFFER_SIZE];
 8000fa6:	f44f 408f 	mov.w	r0, #18304	; 0x4780
 8000faa:	f00c f82e 	bl	800d00a <_Znaj>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	61da      	str	r2, [r3, #28]
  buffer1 = scratch_pad;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	69da      	ldr	r2, [r3, #28]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	625a      	str	r2, [r3, #36]	; 0x24
  buffer2 = buffer1 + (CONV1_OUT_CH*CONV1_OUT_X*CONV1_OUT_Y);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fc2:	f503 52fa 	add.w	r2, r3, #8000	; 0x1f40
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	629a      	str	r2, [r3, #40]	; 0x28
  col_buffer = buffer2 + (CONV2_OUT_CH*CONV2_OUT_X*CONV2_OUT_Y);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fce:	f503 52fa 	add.w	r2, r3, #8000	; 0x1f40
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	621a      	str	r2, [r3, #32]
  frame_len = FRAME_LEN;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	f44f 7220 	mov.w	r2, #640	; 0x280
 8000fdc:	605a      	str	r2, [r3, #4]
  frame_shift = FRAME_SHIFT;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000fe4:	609a      	str	r2, [r3, #8]
  num_mfcc_features = NUM_MFCC_COEFFS;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	220a      	movs	r2, #10
 8000fea:	60da      	str	r2, [r3, #12]
  num_frames = NUM_FRAMES;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2231      	movs	r2, #49	; 0x31
 8000ff0:	611a      	str	r2, [r3, #16]
  num_out_classes = OUT_DIM;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	220c      	movs	r2, #12
 8000ff6:	615a      	str	r2, [r3, #20]
  in_dec_bits = MFCC_DEC_BITS;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	619a      	str	r2, [r3, #24]
}
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4618      	mov	r0, r3
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	08015978 	.word	0x08015978

0800100c <_ZN6DS_CNND1Ev>:

DS_CNN::~DS_CNN()
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	4a09      	ldr	r2, [pc, #36]	; (800103c <_ZN6DS_CNND1Ev+0x30>)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	601a      	str	r2, [r3, #0]
{
  delete scratch_pad;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	69db      	ldr	r3, [r3, #28]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d003      	beq.n	800102a <_ZN6DS_CNND1Ev+0x1e>
 8001022:	2101      	movs	r1, #1
 8001024:	4618      	mov	r0, r3
 8001026:	f00b ffdb 	bl	800cfe0 <_ZdlPvj>
DS_CNN::~DS_CNN()
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4618      	mov	r0, r3
 800102e:	f001 fdfd 	bl	8002c2c <_ZN2NND1Ev>
}
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4618      	mov	r0, r3
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	08015978 	.word	0x08015978

08001040 <_ZN6DS_CNND0Ev>:
DS_CNN::~DS_CNN()
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
}
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	f7ff ffdf 	bl	800100c <_ZN6DS_CNND1Ev>
 800104e:	212c      	movs	r1, #44	; 0x2c
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f00b ffc5 	bl	800cfe0 <_ZdlPvj>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4618      	mov	r0, r3
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}

08001060 <_ZN6DS_CNN6run_nnEPaS0_>:

void DS_CNN::run_nn(q7_t* in_data, q7_t* out_data)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b094      	sub	sp, #80	; 0x50
 8001064:	af10      	add	r7, sp, #64	; 0x40
 8001066:	60f8      	str	r0, [r7, #12]
 8001068:	60b9      	str	r1, [r7, #8]
 800106a:	607a      	str	r2, [r7, #4]
  //CONV1 : regular convolution
  arm_convolve_HWC_q7_basic_nonsquare(in_data, CONV1_IN_X, CONV1_IN_Y, 1, conv1_wt, CONV1_OUT_CH, CONV1_KX, CONV1_KY, CONV1_PX, CONV1_PY, CONV1_SX, CONV1_SY, conv1_bias, CONV1_BIAS_LSHIFT, CONV1_OUT_RSHIFT, buffer1, CONV1_OUT_X, CONV1_OUT_Y, (q15_t*)col_buffer, NULL);
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001070:	68fa      	ldr	r2, [r7, #12]
 8001072:	6a12      	ldr	r2, [r2, #32]
 8001074:	2100      	movs	r1, #0
 8001076:	910f      	str	r1, [sp, #60]	; 0x3c
 8001078:	920e      	str	r2, [sp, #56]	; 0x38
 800107a:	2219      	movs	r2, #25
 800107c:	920d      	str	r2, [sp, #52]	; 0x34
 800107e:	2205      	movs	r2, #5
 8001080:	920c      	str	r2, [sp, #48]	; 0x30
 8001082:	930b      	str	r3, [sp, #44]	; 0x2c
 8001084:	2306      	movs	r3, #6
 8001086:	930a      	str	r3, [sp, #40]	; 0x28
 8001088:	2302      	movs	r3, #2
 800108a:	9309      	str	r3, [sp, #36]	; 0x24
 800108c:	4ba4      	ldr	r3, [pc, #656]	; (8001320 <_ZN6DS_CNN6run_nnEPaS0_+0x2c0>)
 800108e:	9308      	str	r3, [sp, #32]
 8001090:	2302      	movs	r3, #2
 8001092:	9307      	str	r3, [sp, #28]
 8001094:	2302      	movs	r3, #2
 8001096:	9306      	str	r3, [sp, #24]
 8001098:	2304      	movs	r3, #4
 800109a:	9305      	str	r3, [sp, #20]
 800109c:	2301      	movs	r3, #1
 800109e:	9304      	str	r3, [sp, #16]
 80010a0:	230a      	movs	r3, #10
 80010a2:	9303      	str	r3, [sp, #12]
 80010a4:	2304      	movs	r3, #4
 80010a6:	9302      	str	r3, [sp, #8]
 80010a8:	2340      	movs	r3, #64	; 0x40
 80010aa:	9301      	str	r3, [sp, #4]
 80010ac:	4b9d      	ldr	r3, [pc, #628]	; (8001324 <_ZN6DS_CNN6run_nnEPaS0_+0x2c4>)
 80010ae:	9300      	str	r3, [sp, #0]
 80010b0:	2301      	movs	r3, #1
 80010b2:	2231      	movs	r2, #49	; 0x31
 80010b4:	210a      	movs	r1, #10
 80010b6:	68b8      	ldr	r0, [r7, #8]
 80010b8:	f002 fb15 	bl	80036e6 <arm_convolve_HWC_q7_basic_nonsquare>
  arm_relu_q7(buffer1,CONV1_OUT_X*CONV1_OUT_Y*CONV1_OUT_CH);
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c0:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 80010c4:	4618      	mov	r0, r3
 80010c6:	f002 f8d0 	bl	800326a <arm_relu_q7>

  //CONV2 : DS + PW conv
  //Depthwise separable conv (batch norm params folded into conv wts/bias)
  arm_depthwise_separable_conv_HWC_q7_nonsquare(buffer1,CONV2_IN_X,CONV2_IN_Y,CONV1_OUT_CH,conv2_ds_wt,CONV1_OUT_CH,CONV2_DS_KX,CONV2_DS_KY,CONV2_DS_PX,CONV2_DS_PY,CONV2_DS_SX,CONV2_DS_SY,conv2_ds_bias,CONV2_DS_BIAS_LSHIFT,CONV2_DS_OUT_RSHIFT,buffer2,CONV2_OUT_X,CONV2_OUT_Y,(q15_t*)col_buffer, NULL);
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010d2:	68fa      	ldr	r2, [r7, #12]
 80010d4:	6a12      	ldr	r2, [r2, #32]
 80010d6:	2100      	movs	r1, #0
 80010d8:	910f      	str	r1, [sp, #60]	; 0x3c
 80010da:	920e      	str	r2, [sp, #56]	; 0x38
 80010dc:	2219      	movs	r2, #25
 80010de:	920d      	str	r2, [sp, #52]	; 0x34
 80010e0:	2205      	movs	r2, #5
 80010e2:	920c      	str	r2, [sp, #48]	; 0x30
 80010e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80010e6:	2305      	movs	r3, #5
 80010e8:	930a      	str	r3, [sp, #40]	; 0x28
 80010ea:	2302      	movs	r3, #2
 80010ec:	9309      	str	r3, [sp, #36]	; 0x24
 80010ee:	4b8e      	ldr	r3, [pc, #568]	; (8001328 <_ZN6DS_CNN6run_nnEPaS0_+0x2c8>)
 80010f0:	9308      	str	r3, [sp, #32]
 80010f2:	2301      	movs	r3, #1
 80010f4:	9307      	str	r3, [sp, #28]
 80010f6:	2301      	movs	r3, #1
 80010f8:	9306      	str	r3, [sp, #24]
 80010fa:	2301      	movs	r3, #1
 80010fc:	9305      	str	r3, [sp, #20]
 80010fe:	2301      	movs	r3, #1
 8001100:	9304      	str	r3, [sp, #16]
 8001102:	2303      	movs	r3, #3
 8001104:	9303      	str	r3, [sp, #12]
 8001106:	2303      	movs	r3, #3
 8001108:	9302      	str	r3, [sp, #8]
 800110a:	2340      	movs	r3, #64	; 0x40
 800110c:	9301      	str	r3, [sp, #4]
 800110e:	4b87      	ldr	r3, [pc, #540]	; (800132c <_ZN6DS_CNN6run_nnEPaS0_+0x2cc>)
 8001110:	9300      	str	r3, [sp, #0]
 8001112:	2340      	movs	r3, #64	; 0x40
 8001114:	2219      	movs	r2, #25
 8001116:	2105      	movs	r1, #5
 8001118:	f002 fd14 	bl	8003b44 <arm_depthwise_separable_conv_HWC_q7_nonsquare>
  arm_relu_q7(buffer2,CONV2_OUT_X*CONV2_OUT_Y*CONV2_OUT_CH);
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001120:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8001124:	4618      	mov	r0, r3
 8001126:	f002 f8a0 	bl	800326a <arm_relu_q7>

  //Pointwise conv
  arm_convolve_1x1_HWC_q7_fast_nonsquare(buffer2, CONV2_OUT_X, CONV2_OUT_Y, CONV1_OUT_CH, conv2_pw_wt, CONV2_OUT_CH, 1, 1, 0, 0, 1, 1, conv2_pw_bias, CONV2_PW_BIAS_LSHIFT, CONV2_PW_OUT_RSHIFT, buffer1, CONV2_OUT_X, CONV2_OUT_Y, (q15_t*)col_buffer, NULL);
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001132:	68fa      	ldr	r2, [r7, #12]
 8001134:	6a12      	ldr	r2, [r2, #32]
 8001136:	2100      	movs	r1, #0
 8001138:	910f      	str	r1, [sp, #60]	; 0x3c
 800113a:	920e      	str	r2, [sp, #56]	; 0x38
 800113c:	2219      	movs	r2, #25
 800113e:	920d      	str	r2, [sp, #52]	; 0x34
 8001140:	2205      	movs	r2, #5
 8001142:	920c      	str	r2, [sp, #48]	; 0x30
 8001144:	930b      	str	r3, [sp, #44]	; 0x2c
 8001146:	2308      	movs	r3, #8
 8001148:	930a      	str	r3, [sp, #40]	; 0x28
 800114a:	2304      	movs	r3, #4
 800114c:	9309      	str	r3, [sp, #36]	; 0x24
 800114e:	4b78      	ldr	r3, [pc, #480]	; (8001330 <_ZN6DS_CNN6run_nnEPaS0_+0x2d0>)
 8001150:	9308      	str	r3, [sp, #32]
 8001152:	2301      	movs	r3, #1
 8001154:	9307      	str	r3, [sp, #28]
 8001156:	2301      	movs	r3, #1
 8001158:	9306      	str	r3, [sp, #24]
 800115a:	2300      	movs	r3, #0
 800115c:	9305      	str	r3, [sp, #20]
 800115e:	2300      	movs	r3, #0
 8001160:	9304      	str	r3, [sp, #16]
 8001162:	2301      	movs	r3, #1
 8001164:	9303      	str	r3, [sp, #12]
 8001166:	2301      	movs	r3, #1
 8001168:	9302      	str	r3, [sp, #8]
 800116a:	2340      	movs	r3, #64	; 0x40
 800116c:	9301      	str	r3, [sp, #4]
 800116e:	4b71      	ldr	r3, [pc, #452]	; (8001334 <_ZN6DS_CNN6run_nnEPaS0_+0x2d4>)
 8001170:	9300      	str	r3, [sp, #0]
 8001172:	2340      	movs	r3, #64	; 0x40
 8001174:	2219      	movs	r2, #25
 8001176:	2105      	movs	r1, #5
 8001178:	f002 f8f1 	bl	800335e <arm_convolve_1x1_HWC_q7_fast_nonsquare>
  arm_relu_q7(buffer1,CONV2_OUT_X*CONV2_OUT_Y*CONV2_OUT_CH);
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001180:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8001184:	4618      	mov	r0, r3
 8001186:	f002 f870 	bl	800326a <arm_relu_q7>

  //CONV3 : DS + PW conv
  //Depthwise separable conv (batch norm params folded into conv wts/bias)
  arm_depthwise_separable_conv_HWC_q7_nonsquare(buffer1,CONV3_IN_X,CONV3_IN_Y,CONV2_OUT_CH,conv3_ds_wt,CONV2_OUT_CH,CONV3_DS_KX,CONV3_DS_KY,CONV3_DS_PX,CONV3_DS_PY,CONV3_DS_SX,CONV3_DS_SY,conv3_ds_bias,CONV3_DS_BIAS_LSHIFT,CONV3_DS_OUT_RSHIFT,buffer2,CONV3_OUT_X,CONV3_OUT_Y,(q15_t*)col_buffer, NULL);
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001192:	68fa      	ldr	r2, [r7, #12]
 8001194:	6a12      	ldr	r2, [r2, #32]
 8001196:	2100      	movs	r1, #0
 8001198:	910f      	str	r1, [sp, #60]	; 0x3c
 800119a:	920e      	str	r2, [sp, #56]	; 0x38
 800119c:	2219      	movs	r2, #25
 800119e:	920d      	str	r2, [sp, #52]	; 0x34
 80011a0:	2205      	movs	r2, #5
 80011a2:	920c      	str	r2, [sp, #48]	; 0x30
 80011a4:	930b      	str	r3, [sp, #44]	; 0x2c
 80011a6:	2304      	movs	r3, #4
 80011a8:	930a      	str	r3, [sp, #40]	; 0x28
 80011aa:	2302      	movs	r3, #2
 80011ac:	9309      	str	r3, [sp, #36]	; 0x24
 80011ae:	4b62      	ldr	r3, [pc, #392]	; (8001338 <_ZN6DS_CNN6run_nnEPaS0_+0x2d8>)
 80011b0:	9308      	str	r3, [sp, #32]
 80011b2:	2301      	movs	r3, #1
 80011b4:	9307      	str	r3, [sp, #28]
 80011b6:	2301      	movs	r3, #1
 80011b8:	9306      	str	r3, [sp, #24]
 80011ba:	2301      	movs	r3, #1
 80011bc:	9305      	str	r3, [sp, #20]
 80011be:	2301      	movs	r3, #1
 80011c0:	9304      	str	r3, [sp, #16]
 80011c2:	2303      	movs	r3, #3
 80011c4:	9303      	str	r3, [sp, #12]
 80011c6:	2303      	movs	r3, #3
 80011c8:	9302      	str	r3, [sp, #8]
 80011ca:	2340      	movs	r3, #64	; 0x40
 80011cc:	9301      	str	r3, [sp, #4]
 80011ce:	4b5b      	ldr	r3, [pc, #364]	; (800133c <_ZN6DS_CNN6run_nnEPaS0_+0x2dc>)
 80011d0:	9300      	str	r3, [sp, #0]
 80011d2:	2340      	movs	r3, #64	; 0x40
 80011d4:	2219      	movs	r2, #25
 80011d6:	2105      	movs	r1, #5
 80011d8:	f002 fcb4 	bl	8003b44 <arm_depthwise_separable_conv_HWC_q7_nonsquare>
  arm_relu_q7(buffer2,CONV3_OUT_X*CONV3_OUT_Y*CONV3_OUT_CH);
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011e0:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 80011e4:	4618      	mov	r0, r3
 80011e6:	f002 f840 	bl	800326a <arm_relu_q7>
  //Pointwise conv
  arm_convolve_1x1_HWC_q7_fast_nonsquare(buffer2, CONV3_OUT_X, CONV3_OUT_Y, CONV2_OUT_CH, conv3_pw_wt, CONV3_OUT_CH, 1, 1, 0, 0, 1, 1, conv3_pw_bias, CONV3_PW_BIAS_LSHIFT, CONV3_PW_OUT_RSHIFT, buffer1, CONV3_OUT_X, CONV3_OUT_Y, (q15_t*)col_buffer, NULL);
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011f2:	68fa      	ldr	r2, [r7, #12]
 80011f4:	6a12      	ldr	r2, [r2, #32]
 80011f6:	2100      	movs	r1, #0
 80011f8:	910f      	str	r1, [sp, #60]	; 0x3c
 80011fa:	920e      	str	r2, [sp, #56]	; 0x38
 80011fc:	2219      	movs	r2, #25
 80011fe:	920d      	str	r2, [sp, #52]	; 0x34
 8001200:	2205      	movs	r2, #5
 8001202:	920c      	str	r2, [sp, #48]	; 0x30
 8001204:	930b      	str	r3, [sp, #44]	; 0x2c
 8001206:	2308      	movs	r3, #8
 8001208:	930a      	str	r3, [sp, #40]	; 0x28
 800120a:	2305      	movs	r3, #5
 800120c:	9309      	str	r3, [sp, #36]	; 0x24
 800120e:	4b4c      	ldr	r3, [pc, #304]	; (8001340 <_ZN6DS_CNN6run_nnEPaS0_+0x2e0>)
 8001210:	9308      	str	r3, [sp, #32]
 8001212:	2301      	movs	r3, #1
 8001214:	9307      	str	r3, [sp, #28]
 8001216:	2301      	movs	r3, #1
 8001218:	9306      	str	r3, [sp, #24]
 800121a:	2300      	movs	r3, #0
 800121c:	9305      	str	r3, [sp, #20]
 800121e:	2300      	movs	r3, #0
 8001220:	9304      	str	r3, [sp, #16]
 8001222:	2301      	movs	r3, #1
 8001224:	9303      	str	r3, [sp, #12]
 8001226:	2301      	movs	r3, #1
 8001228:	9302      	str	r3, [sp, #8]
 800122a:	2340      	movs	r3, #64	; 0x40
 800122c:	9301      	str	r3, [sp, #4]
 800122e:	4b45      	ldr	r3, [pc, #276]	; (8001344 <_ZN6DS_CNN6run_nnEPaS0_+0x2e4>)
 8001230:	9300      	str	r3, [sp, #0]
 8001232:	2340      	movs	r3, #64	; 0x40
 8001234:	2219      	movs	r2, #25
 8001236:	2105      	movs	r1, #5
 8001238:	f002 f891 	bl	800335e <arm_convolve_1x1_HWC_q7_fast_nonsquare>
  arm_relu_q7(buffer1,CONV3_OUT_X*CONV3_OUT_Y*CONV3_OUT_CH);
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001240:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8001244:	4618      	mov	r0, r3
 8001246:	f002 f810 	bl	800326a <arm_relu_q7>

  //CONV4 : DS + PW conv
  //Depthwise separable conv (batch norm params folded into conv wts/bias)
  arm_depthwise_separable_conv_HWC_q7_nonsquare(buffer1,CONV4_IN_X,CONV4_IN_Y,CONV3_OUT_CH,conv4_ds_wt,CONV3_OUT_CH,CONV4_DS_KX,CONV4_DS_KY,CONV4_DS_PX,CONV4_DS_PY,CONV4_DS_SX,CONV4_DS_SY,conv4_ds_bias,CONV4_DS_BIAS_LSHIFT,CONV4_DS_OUT_RSHIFT,buffer2,CONV4_OUT_X,CONV4_OUT_Y,(q15_t*)col_buffer, NULL);
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001252:	68fa      	ldr	r2, [r7, #12]
 8001254:	6a12      	ldr	r2, [r2, #32]
 8001256:	2100      	movs	r1, #0
 8001258:	910f      	str	r1, [sp, #60]	; 0x3c
 800125a:	920e      	str	r2, [sp, #56]	; 0x38
 800125c:	2219      	movs	r2, #25
 800125e:	920d      	str	r2, [sp, #52]	; 0x34
 8001260:	2205      	movs	r2, #5
 8001262:	920c      	str	r2, [sp, #48]	; 0x30
 8001264:	930b      	str	r3, [sp, #44]	; 0x2c
 8001266:	2305      	movs	r3, #5
 8001268:	930a      	str	r3, [sp, #40]	; 0x28
 800126a:	2303      	movs	r3, #3
 800126c:	9309      	str	r3, [sp, #36]	; 0x24
 800126e:	4b36      	ldr	r3, [pc, #216]	; (8001348 <_ZN6DS_CNN6run_nnEPaS0_+0x2e8>)
 8001270:	9308      	str	r3, [sp, #32]
 8001272:	2301      	movs	r3, #1
 8001274:	9307      	str	r3, [sp, #28]
 8001276:	2301      	movs	r3, #1
 8001278:	9306      	str	r3, [sp, #24]
 800127a:	2301      	movs	r3, #1
 800127c:	9305      	str	r3, [sp, #20]
 800127e:	2301      	movs	r3, #1
 8001280:	9304      	str	r3, [sp, #16]
 8001282:	2303      	movs	r3, #3
 8001284:	9303      	str	r3, [sp, #12]
 8001286:	2303      	movs	r3, #3
 8001288:	9302      	str	r3, [sp, #8]
 800128a:	2340      	movs	r3, #64	; 0x40
 800128c:	9301      	str	r3, [sp, #4]
 800128e:	4b2f      	ldr	r3, [pc, #188]	; (800134c <_ZN6DS_CNN6run_nnEPaS0_+0x2ec>)
 8001290:	9300      	str	r3, [sp, #0]
 8001292:	2340      	movs	r3, #64	; 0x40
 8001294:	2219      	movs	r2, #25
 8001296:	2105      	movs	r1, #5
 8001298:	f002 fc54 	bl	8003b44 <arm_depthwise_separable_conv_HWC_q7_nonsquare>
  arm_relu_q7(buffer2,CONV4_OUT_X*CONV4_OUT_Y*CONV4_OUT_CH);
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012a0:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 80012a4:	4618      	mov	r0, r3
 80012a6:	f001 ffe0 	bl	800326a <arm_relu_q7>
  //Pointwise conv
  arm_convolve_1x1_HWC_q7_fast_nonsquare(buffer2, CONV4_OUT_X, CONV4_OUT_Y, CONV3_OUT_CH, conv4_pw_wt, CONV4_OUT_CH, 1, 1, 0, 0, 1, 1, conv4_pw_bias, CONV4_PW_BIAS_LSHIFT, CONV4_PW_OUT_RSHIFT, buffer1, CONV4_OUT_X, CONV4_OUT_Y, (q15_t*)col_buffer, NULL);
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b2:	68fa      	ldr	r2, [r7, #12]
 80012b4:	6a12      	ldr	r2, [r2, #32]
 80012b6:	2100      	movs	r1, #0
 80012b8:	910f      	str	r1, [sp, #60]	; 0x3c
 80012ba:	920e      	str	r2, [sp, #56]	; 0x38
 80012bc:	2219      	movs	r2, #25
 80012be:	920d      	str	r2, [sp, #52]	; 0x34
 80012c0:	2205      	movs	r2, #5
 80012c2:	920c      	str	r2, [sp, #48]	; 0x30
 80012c4:	930b      	str	r3, [sp, #44]	; 0x2c
 80012c6:	2307      	movs	r3, #7
 80012c8:	930a      	str	r3, [sp, #40]	; 0x28
 80012ca:	2305      	movs	r3, #5
 80012cc:	9309      	str	r3, [sp, #36]	; 0x24
 80012ce:	4b20      	ldr	r3, [pc, #128]	; (8001350 <_ZN6DS_CNN6run_nnEPaS0_+0x2f0>)
 80012d0:	9308      	str	r3, [sp, #32]
 80012d2:	2301      	movs	r3, #1
 80012d4:	9307      	str	r3, [sp, #28]
 80012d6:	2301      	movs	r3, #1
 80012d8:	9306      	str	r3, [sp, #24]
 80012da:	2300      	movs	r3, #0
 80012dc:	9305      	str	r3, [sp, #20]
 80012de:	2300      	movs	r3, #0
 80012e0:	9304      	str	r3, [sp, #16]
 80012e2:	2301      	movs	r3, #1
 80012e4:	9303      	str	r3, [sp, #12]
 80012e6:	2301      	movs	r3, #1
 80012e8:	9302      	str	r3, [sp, #8]
 80012ea:	2340      	movs	r3, #64	; 0x40
 80012ec:	9301      	str	r3, [sp, #4]
 80012ee:	4b19      	ldr	r3, [pc, #100]	; (8001354 <_ZN6DS_CNN6run_nnEPaS0_+0x2f4>)
 80012f0:	9300      	str	r3, [sp, #0]
 80012f2:	2340      	movs	r3, #64	; 0x40
 80012f4:	2219      	movs	r2, #25
 80012f6:	2105      	movs	r1, #5
 80012f8:	f002 f831 	bl	800335e <arm_convolve_1x1_HWC_q7_fast_nonsquare>
  arm_relu_q7(buffer1,CONV4_OUT_X*CONV4_OUT_Y*CONV4_OUT_CH);
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001300:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8001304:	4618      	mov	r0, r3
 8001306:	f001 ffb0 	bl	800326a <arm_relu_q7>

  //CONV5 : DS + PW conv
  //Depthwise separable conv (batch norm params folded into conv wts/bias)
  arm_depthwise_separable_conv_HWC_q7_nonsquare(buffer1,CONV5_IN_X,CONV5_IN_Y,CONV4_OUT_CH,conv5_ds_wt,CONV4_OUT_CH,CONV5_DS_KX,CONV5_DS_KY,CONV5_DS_PX,CONV5_DS_PY,CONV5_DS_SX,CONV5_DS_SY,conv5_ds_bias,CONV5_DS_BIAS_LSHIFT,CONV5_DS_OUT_RSHIFT,buffer2,CONV5_OUT_X,CONV5_OUT_Y,(q15_t*)col_buffer, NULL);
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001312:	68fa      	ldr	r2, [r7, #12]
 8001314:	6a12      	ldr	r2, [r2, #32]
 8001316:	2100      	movs	r1, #0
 8001318:	910f      	str	r1, [sp, #60]	; 0x3c
 800131a:	920e      	str	r2, [sp, #56]	; 0x38
 800131c:	2219      	movs	r2, #25
 800131e:	e01b      	b.n	8001358 <_ZN6DS_CNN6run_nnEPaS0_+0x2f8>
 8001320:	08010b24 	.word	0x08010b24
 8001324:	08010124 	.word	0x08010124
 8001328:	08010da4 	.word	0x08010da4
 800132c:	08010b64 	.word	0x08010b64
 8001330:	08011de4 	.word	0x08011de4
 8001334:	08010de4 	.word	0x08010de4
 8001338:	08012064 	.word	0x08012064
 800133c:	08011e24 	.word	0x08011e24
 8001340:	080130a4 	.word	0x080130a4
 8001344:	080120a4 	.word	0x080120a4
 8001348:	08013324 	.word	0x08013324
 800134c:	080130e4 	.word	0x080130e4
 8001350:	08014364 	.word	0x08014364
 8001354:	08013364 	.word	0x08013364
 8001358:	920d      	str	r2, [sp, #52]	; 0x34
 800135a:	2205      	movs	r2, #5
 800135c:	920c      	str	r2, [sp, #48]	; 0x30
 800135e:	930b      	str	r3, [sp, #44]	; 0x2c
 8001360:	2305      	movs	r3, #5
 8001362:	930a      	str	r3, [sp, #40]	; 0x28
 8001364:	2303      	movs	r3, #3
 8001366:	9309      	str	r3, [sp, #36]	; 0x24
 8001368:	4b40      	ldr	r3, [pc, #256]	; (800146c <_ZN6DS_CNN6run_nnEPaS0_+0x40c>)
 800136a:	9308      	str	r3, [sp, #32]
 800136c:	2301      	movs	r3, #1
 800136e:	9307      	str	r3, [sp, #28]
 8001370:	2301      	movs	r3, #1
 8001372:	9306      	str	r3, [sp, #24]
 8001374:	2301      	movs	r3, #1
 8001376:	9305      	str	r3, [sp, #20]
 8001378:	2301      	movs	r3, #1
 800137a:	9304      	str	r3, [sp, #16]
 800137c:	2303      	movs	r3, #3
 800137e:	9303      	str	r3, [sp, #12]
 8001380:	2303      	movs	r3, #3
 8001382:	9302      	str	r3, [sp, #8]
 8001384:	2340      	movs	r3, #64	; 0x40
 8001386:	9301      	str	r3, [sp, #4]
 8001388:	4b39      	ldr	r3, [pc, #228]	; (8001470 <_ZN6DS_CNN6run_nnEPaS0_+0x410>)
 800138a:	9300      	str	r3, [sp, #0]
 800138c:	2340      	movs	r3, #64	; 0x40
 800138e:	2219      	movs	r2, #25
 8001390:	2105      	movs	r1, #5
 8001392:	f002 fbd7 	bl	8003b44 <arm_depthwise_separable_conv_HWC_q7_nonsquare>
  arm_relu_q7(buffer2,CONV5_OUT_X*CONV5_OUT_Y*CONV5_OUT_CH);
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800139a:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 800139e:	4618      	mov	r0, r3
 80013a0:	f001 ff63 	bl	800326a <arm_relu_q7>
  //Pointwise conv
  arm_convolve_1x1_HWC_q7_fast_nonsquare(buffer2, CONV5_OUT_X, CONV5_OUT_Y, CONV4_OUT_CH, conv5_pw_wt, CONV5_OUT_CH, 1, 1, 0, 0, 1, 1, conv5_pw_bias, CONV5_PW_BIAS_LSHIFT, CONV5_PW_OUT_RSHIFT, buffer1, CONV5_OUT_X, CONV5_OUT_Y, (q15_t*)col_buffer, NULL);
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ac:	68fa      	ldr	r2, [r7, #12]
 80013ae:	6a12      	ldr	r2, [r2, #32]
 80013b0:	2100      	movs	r1, #0
 80013b2:	910f      	str	r1, [sp, #60]	; 0x3c
 80013b4:	920e      	str	r2, [sp, #56]	; 0x38
 80013b6:	2219      	movs	r2, #25
 80013b8:	920d      	str	r2, [sp, #52]	; 0x34
 80013ba:	2205      	movs	r2, #5
 80013bc:	920c      	str	r2, [sp, #48]	; 0x30
 80013be:	930b      	str	r3, [sp, #44]	; 0x2c
 80013c0:	2308      	movs	r3, #8
 80013c2:	930a      	str	r3, [sp, #40]	; 0x28
 80013c4:	2305      	movs	r3, #5
 80013c6:	9309      	str	r3, [sp, #36]	; 0x24
 80013c8:	4b2a      	ldr	r3, [pc, #168]	; (8001474 <_ZN6DS_CNN6run_nnEPaS0_+0x414>)
 80013ca:	9308      	str	r3, [sp, #32]
 80013cc:	2301      	movs	r3, #1
 80013ce:	9307      	str	r3, [sp, #28]
 80013d0:	2301      	movs	r3, #1
 80013d2:	9306      	str	r3, [sp, #24]
 80013d4:	2300      	movs	r3, #0
 80013d6:	9305      	str	r3, [sp, #20]
 80013d8:	2300      	movs	r3, #0
 80013da:	9304      	str	r3, [sp, #16]
 80013dc:	2301      	movs	r3, #1
 80013de:	9303      	str	r3, [sp, #12]
 80013e0:	2301      	movs	r3, #1
 80013e2:	9302      	str	r3, [sp, #8]
 80013e4:	2340      	movs	r3, #64	; 0x40
 80013e6:	9301      	str	r3, [sp, #4]
 80013e8:	4b23      	ldr	r3, [pc, #140]	; (8001478 <_ZN6DS_CNN6run_nnEPaS0_+0x418>)
 80013ea:	9300      	str	r3, [sp, #0]
 80013ec:	2340      	movs	r3, #64	; 0x40
 80013ee:	2219      	movs	r2, #25
 80013f0:	2105      	movs	r1, #5
 80013f2:	f001 ffb4 	bl	800335e <arm_convolve_1x1_HWC_q7_fast_nonsquare>
  arm_relu_q7(buffer1,CONV5_OUT_X*CONV5_OUT_Y*CONV5_OUT_CH);
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013fa:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 80013fe:	4618      	mov	r0, r3
 8001400:	f001 ff33 	bl	800326a <arm_relu_q7>

  //Average pool
  arm_avepool_q7_HWC_nonsquare (buffer1,CONV5_OUT_X,CONV5_OUT_Y,CONV5_OUT_CH,CONV5_OUT_X,CONV5_OUT_Y,0,0,1,1,1,1,NULL,buffer2, 2);
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800140c:	2202      	movs	r2, #2
 800140e:	920a      	str	r2, [sp, #40]	; 0x28
 8001410:	9309      	str	r3, [sp, #36]	; 0x24
 8001412:	2300      	movs	r3, #0
 8001414:	9308      	str	r3, [sp, #32]
 8001416:	2301      	movs	r3, #1
 8001418:	9307      	str	r3, [sp, #28]
 800141a:	2301      	movs	r3, #1
 800141c:	9306      	str	r3, [sp, #24]
 800141e:	2301      	movs	r3, #1
 8001420:	9305      	str	r3, [sp, #20]
 8001422:	2301      	movs	r3, #1
 8001424:	9304      	str	r3, [sp, #16]
 8001426:	2300      	movs	r3, #0
 8001428:	9303      	str	r3, [sp, #12]
 800142a:	2300      	movs	r3, #0
 800142c:	9302      	str	r3, [sp, #8]
 800142e:	2319      	movs	r3, #25
 8001430:	9301      	str	r3, [sp, #4]
 8001432:	2305      	movs	r3, #5
 8001434:	9300      	str	r3, [sp, #0]
 8001436:	2340      	movs	r3, #64	; 0x40
 8001438:	2219      	movs	r2, #25
 800143a:	2105      	movs	r1, #5
 800143c:	f007 fdd6 	bl	8008fec <arm_avepool_q7_HWC_nonsquare>

  arm_fully_connected_q7(buffer2, final_fc_wt, CONV5_OUT_CH, OUT_DIM, FINAL_FC_BIAS_LSHIFT, FINAL_FC_OUT_RSHIFT, final_fc_bias, out_data, (q15_t*)col_buffer);
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	6a1b      	ldr	r3, [r3, #32]
 8001448:	9304      	str	r3, [sp, #16]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	9303      	str	r3, [sp, #12]
 800144e:	4b0b      	ldr	r3, [pc, #44]	; (800147c <_ZN6DS_CNN6run_nnEPaS0_+0x41c>)
 8001450:	9302      	str	r3, [sp, #8]
 8001452:	2307      	movs	r3, #7
 8001454:	9301      	str	r3, [sp, #4]
 8001456:	2302      	movs	r3, #2
 8001458:	9300      	str	r3, [sp, #0]
 800145a:	230c      	movs	r3, #12
 800145c:	2240      	movs	r2, #64	; 0x40
 800145e:	4908      	ldr	r1, [pc, #32]	; (8001480 <_ZN6DS_CNN6run_nnEPaS0_+0x420>)
 8001460:	f004 fad7 	bl	8005a12 <arm_fully_connected_q7>

}
 8001464:	bf00      	nop
 8001466:	3710      	adds	r7, #16
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	080145e4 	.word	0x080145e4
 8001470:	080143a4 	.word	0x080143a4
 8001474:	08015624 	.word	0x08015624
 8001478:	08014624 	.word	0x08014624
 800147c:	08015964 	.word	0x08015964
 8001480:	08015664 	.word	0x08015664

08001484 <_ZN3KWSC1Ev>:
 * and neural network. 
 */

#include "kws.h"

KWS::KWS()
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
{
}
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	4618      	mov	r0, r3
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr

0800149a <_ZN3KWSD1Ev>:

KWS::~KWS()
 800149a:	b590      	push	{r4, r7, lr}
 800149c:	b083      	sub	sp, #12
 800149e:	af00      	add	r7, sp, #0
 80014a0:	6078      	str	r0, [r7, #4]
{
  delete mfcc;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 80014a6:	2c00      	cmp	r4, #0
 80014a8:	d006      	beq.n	80014b8 <_ZN3KWSD1Ev+0x1e>
 80014aa:	4620      	mov	r0, r4
 80014ac:	f000 ffa2 	bl	80023f4 <_ZN4MFCCD1Ev>
 80014b0:	2134      	movs	r1, #52	; 0x34
 80014b2:	4620      	mov	r0, r4
 80014b4:	f00b fd94 	bl	800cfe0 <_ZdlPvj>
  delete mfcc_buffer;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d003      	beq.n	80014c8 <_ZN3KWSD1Ev+0x2e>
 80014c0:	2101      	movs	r1, #1
 80014c2:	4618      	mov	r0, r3
 80014c4:	f00b fd8c 	bl	800cfe0 <_ZdlPvj>
  delete output;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d003      	beq.n	80014d8 <_ZN3KWSD1Ev+0x3e>
 80014d0:	2101      	movs	r1, #1
 80014d2:	4618      	mov	r0, r3
 80014d4:	f00b fd84 	bl	800cfe0 <_ZdlPvj>
  delete predictions;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d003      	beq.n	80014e8 <_ZN3KWSD1Ev+0x4e>
 80014e0:	2101      	movs	r1, #1
 80014e2:	4618      	mov	r0, r3
 80014e4:	f00b fd7c 	bl	800cfe0 <_ZdlPvj>
  delete averaged_output;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	691b      	ldr	r3, [r3, #16]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d003      	beq.n	80014f8 <_ZN3KWSD1Ev+0x5e>
 80014f0:	2101      	movs	r1, #1
 80014f2:	4618      	mov	r0, r3
 80014f4:	f00b fd74 	bl	800cfe0 <_ZdlPvj>
}
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	4618      	mov	r0, r3
 80014fc:	370c      	adds	r7, #12
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd90      	pop	{r4, r7, pc}

08001502 <_ZN3KWS8init_kwsEv>:

void KWS::init_kws()
{
 8001502:	b590      	push	{r4, r7, lr}
 8001504:	b085      	sub	sp, #20
 8001506:	af00      	add	r7, sp, #0
 8001508:	6078      	str	r0, [r7, #4]
  num_mfcc_features = nn->get_num_mfcc_features();
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800150e:	4618      	mov	r0, r3
 8001510:	f001 fbb4 	bl	8002c7c <_ZN2NN21get_num_mfcc_featuresEv>
 8001514:	4602      	mov	r2, r0
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	619a      	str	r2, [r3, #24]
  num_frames = nn->get_num_frames();
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800151e:	4618      	mov	r0, r3
 8001520:	f001 fbb8 	bl	8002c94 <_ZN2NN14get_num_framesEv>
 8001524:	4602      	mov	r2, r0
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	615a      	str	r2, [r3, #20]
  frame_len = nn->get_frame_len();
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800152e:	4618      	mov	r0, r3
 8001530:	f001 fb8c 	bl	8002c4c <_ZN2NN13get_frame_lenEv>
 8001534:	4602      	mov	r2, r0
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	61da      	str	r2, [r3, #28]
  frame_shift = nn->get_frame_shift();
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800153e:	4618      	mov	r0, r3
 8001540:	f001 fb90 	bl	8002c64 <_ZN2NN15get_frame_shiftEv>
 8001544:	4602      	mov	r2, r0
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	621a      	str	r2, [r3, #32]
  int mfcc_dec_bits = nn->get_in_dec_bits();
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800154e:	4618      	mov	r0, r3
 8001550:	f001 fbb8 	bl	8002cc4 <_ZN2NN15get_in_dec_bitsEv>
 8001554:	60f8      	str	r0, [r7, #12]
  num_out_classes = nn->get_num_out_classes();
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800155a:	4618      	mov	r0, r3
 800155c:	f001 fba6 	bl	8002cac <_ZN2NN19get_num_out_classesEv>
 8001560:	4602      	mov	r2, r0
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	625a      	str	r2, [r3, #36]	; 0x24
  mfcc = new MFCC(num_mfcc_features, frame_len, mfcc_dec_bits);
 8001566:	2034      	movs	r0, #52	; 0x34
 8001568:	f00b fd3e 	bl	800cfe8 <_Znwj>
 800156c:	4603      	mov	r3, r0
 800156e:	461c      	mov	r4, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6999      	ldr	r1, [r3, #24]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	69da      	ldr	r2, [r3, #28]
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	4620      	mov	r0, r4
 800157c:	f000 fe44 	bl	8002208 <_ZN4MFCCC1Eiii>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	631c      	str	r4, [r3, #48]	; 0x30
  mfcc_buffer = new q7_t[num_frames*num_mfcc_features];
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	695b      	ldr	r3, [r3, #20]
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	6992      	ldr	r2, [r2, #24]
 800158c:	fb02 f303 	mul.w	r3, r2, r3
 8001590:	4618      	mov	r0, r3
 8001592:	f00b fd3a 	bl	800d00a <_Znaj>
 8001596:	4603      	mov	r3, r0
 8001598:	461a      	mov	r2, r3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	605a      	str	r2, [r3, #4]
  output = new q7_t[num_out_classes];
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a2:	4618      	mov	r0, r3
 80015a4:	f00b fd31 	bl	800d00a <_Znaj>
 80015a8:	4603      	mov	r3, r0
 80015aa:	461a      	mov	r2, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	609a      	str	r2, [r3, #8]
  averaged_output = new q7_t[num_out_classes];
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b4:	4618      	mov	r0, r3
 80015b6:	f00b fd28 	bl	800d00a <_Znaj>
 80015ba:	4603      	mov	r3, r0
 80015bc:	461a      	mov	r2, r3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	611a      	str	r2, [r3, #16]
  predictions = new q7_t[sliding_window_len*num_out_classes];
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80015ca:	fb02 f303 	mul.w	r3, r2, r3
 80015ce:	4618      	mov	r0, r3
 80015d0:	f00b fd1b 	bl	800d00a <_Znaj>
 80015d4:	4603      	mov	r3, r0
 80015d6:	461a      	mov	r2, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	60da      	str	r2, [r3, #12]
  audio_block_size = recording_win*frame_shift;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015e0:	687a      	ldr	r2, [r7, #4]
 80015e2:	6a12      	ldr	r2, [r2, #32]
 80015e4:	fb02 f203 	mul.w	r2, r2, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	629a      	str	r2, [r3, #40]	; 0x28
  audio_buffer_size = audio_block_size + frame_len - frame_shift;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	69db      	ldr	r3, [r3, #28]
 80015f4:	441a      	add	r2, r3
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6a1b      	ldr	r3, [r3, #32]
 80015fa:	1ad2      	subs	r2, r2, r3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001600:	bf00      	nop
 8001602:	3714      	adds	r7, #20
 8001604:	46bd      	mov	sp, r7
 8001606:	bd90      	pop	{r4, r7, pc}

08001608 <_ZN3KWS16extract_featuresEv>:

void KWS::extract_features() 
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  if(num_frames>recording_win) {
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	695a      	ldr	r2, [r3, #20]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001618:	429a      	cmp	r2, r3
 800161a:	dd16      	ble.n	800164a <_ZN3KWS16extract_featuresEv+0x42>
    //move old features left 
    memmove(mfcc_buffer,mfcc_buffer+(recording_win*num_mfcc_features),(num_frames-recording_win)*num_mfcc_features);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6858      	ldr	r0, [r3, #4]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	687a      	ldr	r2, [r7, #4]
 8001626:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001628:	6879      	ldr	r1, [r7, #4]
 800162a:	6989      	ldr	r1, [r1, #24]
 800162c:	fb01 f202 	mul.w	r2, r1, r2
 8001630:	1899      	adds	r1, r3, r2
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	695a      	ldr	r2, [r3, #20]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	687a      	ldr	r2, [r7, #4]
 800163e:	6992      	ldr	r2, [r2, #24]
 8001640:	fb02 f303 	mul.w	r3, r2, r3
 8001644:	461a      	mov	r2, r3
 8001646:	f00e f8b3 	bl	800f7b0 <memmove>
  }
  //compute features only for the newly recorded audio
  int32_t mfcc_buffer_head = (num_frames-recording_win)*num_mfcc_features; 
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	695a      	ldr	r2, [r3, #20]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	687a      	ldr	r2, [r7, #4]
 8001656:	6992      	ldr	r2, [r2, #24]
 8001658:	fb02 f303 	mul.w	r3, r2, r3
 800165c:	60fb      	str	r3, [r7, #12]
  for (uint16_t f = 0; f < recording_win; f++) {
 800165e:	2300      	movs	r3, #0
 8001660:	817b      	strh	r3, [r7, #10]
 8001662:	897a      	ldrh	r2, [r7, #10]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001668:	429a      	cmp	r2, r3
 800166a:	da1a      	bge.n	80016a2 <_ZN3KWS16extract_featuresEv+0x9a>
    mfcc->mfcc_compute(audio_buffer+(f*frame_shift),&mfcc_buffer[mfcc_buffer_head]);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	897b      	ldrh	r3, [r7, #10]
 8001676:	6879      	ldr	r1, [r7, #4]
 8001678:	6a09      	ldr	r1, [r1, #32]
 800167a:	fb01 f303 	mul.w	r3, r1, r3
 800167e:	005b      	lsls	r3, r3, #1
 8001680:	18d1      	adds	r1, r2, r3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	685a      	ldr	r2, [r3, #4]
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	4413      	add	r3, r2
 800168a:	461a      	mov	r2, r3
 800168c:	f001 f90a 	bl	80028a4 <_ZN4MFCC12mfcc_computeEPKsPa>
    mfcc_buffer_head += num_mfcc_features;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	699b      	ldr	r3, [r3, #24]
 8001694:	68fa      	ldr	r2, [r7, #12]
 8001696:	4413      	add	r3, r2
 8001698:	60fb      	str	r3, [r7, #12]
  for (uint16_t f = 0; f < recording_win; f++) {
 800169a:	897b      	ldrh	r3, [r7, #10]
 800169c:	3301      	adds	r3, #1
 800169e:	817b      	strh	r3, [r7, #10]
 80016a0:	e7df      	b.n	8001662 <_ZN3KWS16extract_featuresEv+0x5a>
  }
}
 80016a2:	bf00      	nop
 80016a4:	3710      	adds	r7, #16
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}

080016aa <_ZN3KWS8classifyEv>:

void KWS::classify()
{
 80016aa:	b580      	push	{r7, lr}
 80016ac:	b082      	sub	sp, #8
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	6078      	str	r0, [r7, #4]
  nn->run_nn(mfcc_buffer, output);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	3308      	adds	r3, #8
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	687a      	ldr	r2, [r7, #4]
 80016c2:	6851      	ldr	r1, [r2, #4]
 80016c4:	687a      	ldr	r2, [r7, #4]
 80016c6:	6892      	ldr	r2, [r2, #8]
 80016c8:	4798      	blx	r3
  // Softmax
  arm_softmax_q7(output,num_out_classes,output);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6898      	ldr	r0, [r3, #8]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d2:	b299      	uxth	r1, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	461a      	mov	r2, r3
 80016da:	f004 fe6e 	bl	80063ba <arm_softmax_q7>
}
 80016de:	bf00      	nop
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <_ZN3KWS13get_top_classEPa>:

int KWS::get_top_class(q7_t* prediction)
{
 80016e6:	b480      	push	{r7}
 80016e8:	b087      	sub	sp, #28
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]
 80016ee:	6039      	str	r1, [r7, #0]
  int max_ind=0;
 80016f0:	2300      	movs	r3, #0
 80016f2:	617b      	str	r3, [r7, #20]
  int max_val=-128;
 80016f4:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 80016f8:	613b      	str	r3, [r7, #16]
  for(int i=0;i<num_out_classes;i++) {
 80016fa:	2300      	movs	r3, #0
 80016fc:	60fb      	str	r3, [r7, #12]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001702:	68fa      	ldr	r2, [r7, #12]
 8001704:	429a      	cmp	r2, r3
 8001706:	da14      	bge.n	8001732 <_ZN3KWS13get_top_classEPa+0x4c>
    if(max_val<prediction[i]) {
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	683a      	ldr	r2, [r7, #0]
 800170c:	4413      	add	r3, r2
 800170e:	f993 3000 	ldrsb.w	r3, [r3]
 8001712:	461a      	mov	r2, r3
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	4293      	cmp	r3, r2
 8001718:	da07      	bge.n	800172a <_ZN3KWS13get_top_classEPa+0x44>
      max_val = prediction[i];
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	683a      	ldr	r2, [r7, #0]
 800171e:	4413      	add	r3, r2
 8001720:	f993 3000 	ldrsb.w	r3, [r3]
 8001724:	613b      	str	r3, [r7, #16]
      max_ind = i;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	617b      	str	r3, [r7, #20]
  for(int i=0;i<num_out_classes;i++) {
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	3301      	adds	r3, #1
 800172e:	60fb      	str	r3, [r7, #12]
 8001730:	e7e5      	b.n	80016fe <_ZN3KWS13get_top_classEPa+0x18>
    }    
  }
  return max_ind;
 8001732:	697b      	ldr	r3, [r7, #20]
}
 8001734:	4618      	mov	r0, r3
 8001736:	371c      	adds	r7, #28
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <_ZN10KWS_DS_CNNC1EPs>:
  recording_win = record_win;
  sliding_window_len = sliding_win_len;
  init_kws();
}

KWS_DS_CNN::KWS_DS_CNN(int16_t* audio_data_buffer)
 8001740:	b590      	push	{r4, r7, lr}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	6039      	str	r1, [r7, #0]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4618      	mov	r0, r3
 800174e:	f7ff fe99 	bl	8001484 <_ZN3KWSC1Ev>
{
  nn = new DS_CNN();
 8001752:	202c      	movs	r0, #44	; 0x2c
 8001754:	f00b fc48 	bl	800cfe8 <_Znwj>
 8001758:	4603      	mov	r3, r0
 800175a:	461c      	mov	r4, r3
 800175c:	4620      	mov	r0, r4
 800175e:	f7ff fc17 	bl	8000f90 <_ZN6DS_CNNC1Ev>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	635c      	str	r4, [r3, #52]	; 0x34
  audio_buffer = audio_data_buffer;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	683a      	ldr	r2, [r7, #0]
 800176a:	601a      	str	r2, [r3, #0]
  recording_win = nn->get_num_frames();
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001770:	4618      	mov	r0, r3
 8001772:	f001 fa8f 	bl	8002c94 <_ZN2NN14get_num_framesEv>
 8001776:	4602      	mov	r2, r0
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	63da      	str	r2, [r3, #60]	; 0x3c
  sliding_window_len = 1;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2201      	movs	r2, #1
 8001780:	641a      	str	r2, [r3, #64]	; 0x40
  init_kws();
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff febc 	bl	8001502 <_ZN3KWS8init_kwsEv>
}
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4618      	mov	r0, r3
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	bd90      	pop	{r4, r7, pc}

08001794 <_ZN10KWS_DS_CNND1Ev>:

KWS_DS_CNN::~KWS_DS_CNN()
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
{
  delete nn;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d004      	beq.n	80017ae <_ZN10KWS_DS_CNND1Ev+0x1a>
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	3204      	adds	r2, #4
 80017a8:	6812      	ldr	r2, [r2, #0]
 80017aa:	4618      	mov	r0, r3
 80017ac:	4790      	blx	r2
KWS_DS_CNN::~KWS_DS_CNN()
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7ff fe72 	bl	800149a <_ZN3KWSD1Ev>
}
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4618      	mov	r0, r3
 80017ba:	3708      	adds	r7, #8
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}

080017c0 <_Z10GO_commandv>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int GO_command(){
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
	//	 htim2.Instance->CCR1 = i;  // duty cycle is .5 ms
	//}
	//for (j =125; j>0; j--){
	//	 htim5.Instance->CCR2 = j;  // duty cycle is .5 ms
	//}
	 htim2.Instance->CCR1 = 125;  // duty cycle is .5 ms
 80017c4:	4b10      	ldr	r3, [pc, #64]	; (8001808 <_Z10GO_commandv+0x48>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	227d      	movs	r2, #125	; 0x7d
 80017ca:	635a      	str	r2, [r3, #52]	; 0x34
	 htim5.Instance->CCR2 = 25;  // duty cycle is .5 ms
 80017cc:	4b0f      	ldr	r3, [pc, #60]	; (800180c <_Z10GO_commandv+0x4c>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2219      	movs	r2, #25
 80017d2:	639a      	str	r2, [r3, #56]	; 0x38
	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,GPIO_PIN_SET);		//Pin PA10 = Go
 80017d4:	2201      	movs	r2, #1
 80017d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017da:	480d      	ldr	r0, [pc, #52]	; (8001810 <_Z10GO_commandv+0x50>)
 80017dc:	f008 fafc 	bl	8009dd8 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10,GPIO_PIN_RESET);		//Pin PA10 = Go
 80017e0:	2200      	movs	r2, #0
 80017e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017e6:	480a      	ldr	r0, [pc, #40]	; (8001810 <_Z10GO_commandv+0x50>)
 80017e8:	f008 faf6 	bl	8009dd8 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3,GPIO_PIN_SET);		//Pin PA10 = Go
 80017ec:	2201      	movs	r2, #1
 80017ee:	2108      	movs	r1, #8
 80017f0:	4808      	ldr	r0, [pc, #32]	; (8001814 <_Z10GO_commandv+0x54>)
 80017f2:	f008 faf1 	bl	8009dd8 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,GPIO_PIN_SET);		//Pin PA10 = Go
 80017f6:	2201      	movs	r2, #1
 80017f8:	2120      	movs	r1, #32
 80017fa:	4806      	ldr	r0, [pc, #24]	; (8001814 <_Z10GO_commandv+0x54>)
 80017fc:	f008 faec 	bl	8009dd8 <HAL_GPIO_WritePin>

	 //HAL_Delay(2000);
}
 8001800:	bf00      	nop
 8001802:	4618      	mov	r0, r3
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	20007e50 	.word	0x20007e50
 800180c:	20007e98 	.word	0x20007e98
 8001810:	40020000 	.word	0x40020000
 8001814:	40020400 	.word	0x40020400

08001818 <_Z12STOP_commandv>:

int STOP_command(){
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
	 htim2.Instance->CCR1 = 0;  // duty cycle is .5 ms
 800181c:	4b10      	ldr	r3, [pc, #64]	; (8001860 <_Z12STOP_commandv+0x48>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2200      	movs	r2, #0
 8001822:	635a      	str	r2, [r3, #52]	; 0x34
	 htim5.Instance->CCR2 = 0;  // duty cycle is .5 ms
 8001824:	4b0f      	ldr	r3, [pc, #60]	; (8001864 <_Z12STOP_commandv+0x4c>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2200      	movs	r2, #0
 800182a:	639a      	str	r2, [r3, #56]	; 0x38
	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,GPIO_PIN_RESET);			//Pin PA8 = Stop
 800182c:	2200      	movs	r2, #0
 800182e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001832:	480d      	ldr	r0, [pc, #52]	; (8001868 <_Z12STOP_commandv+0x50>)
 8001834:	f008 fad0 	bl	8009dd8 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10,GPIO_PIN_SET);		//Pin PA10 = Go
 8001838:	2201      	movs	r2, #1
 800183a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800183e:	480a      	ldr	r0, [pc, #40]	; (8001868 <_Z12STOP_commandv+0x50>)
 8001840:	f008 faca 	bl	8009dd8 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3,GPIO_PIN_SET);		//Pin PB3 = Left
 8001844:	2201      	movs	r2, #1
 8001846:	2108      	movs	r1, #8
 8001848:	4808      	ldr	r0, [pc, #32]	; (800186c <_Z12STOP_commandv+0x54>)
 800184a:	f008 fac5 	bl	8009dd8 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,GPIO_PIN_SET);		//Pin PB5 = right
 800184e:	2201      	movs	r2, #1
 8001850:	2120      	movs	r1, #32
 8001852:	4806      	ldr	r0, [pc, #24]	; (800186c <_Z12STOP_commandv+0x54>)
 8001854:	f008 fac0 	bl	8009dd8 <HAL_GPIO_WritePin>
	 //HAL_Delay(2000);
}
 8001858:	bf00      	nop
 800185a:	4618      	mov	r0, r3
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	20007e50 	.word	0x20007e50
 8001864:	20007e98 	.word	0x20007e98
 8001868:	40020000 	.word	0x40020000
 800186c:	40020400 	.word	0x40020400

08001870 <_Z12LEFT_commandv>:

int LEFT_command(){
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
	 htim2.Instance->CCR1 = 0;  // duty cycle is .5 ms
 8001874:	4b18      	ldr	r3, [pc, #96]	; (80018d8 <_Z12LEFT_commandv+0x68>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2200      	movs	r2, #0
 800187a:	635a      	str	r2, [r3, #52]	; 0x34
	 htim5.Instance->CCR2 = 25;  // duty cycle is .5 ms
 800187c:	4b17      	ldr	r3, [pc, #92]	; (80018dc <_Z12LEFT_commandv+0x6c>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2219      	movs	r2, #25
 8001882:	639a      	str	r2, [r3, #56]	; 0x38
	 HAL_Delay(1500);
 8001884:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001888:	f007 fcf2 	bl	8009270 <HAL_Delay>
	 htim2.Instance->CCR1 = 0;  // duty cycle is .5 ms
 800188c:	4b12      	ldr	r3, [pc, #72]	; (80018d8 <_Z12LEFT_commandv+0x68>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2200      	movs	r2, #0
 8001892:	635a      	str	r2, [r3, #52]	; 0x34
	 htim5.Instance->CCR2 = 0;  // duty cycle is .5 ms
 8001894:	4b11      	ldr	r3, [pc, #68]	; (80018dc <_Z12LEFT_commandv+0x6c>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2200      	movs	r2, #0
 800189a:	639a      	str	r2, [r3, #56]	; 0x38
	 HAL_Delay(500);
 800189c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018a0:	f007 fce6 	bl	8009270 <HAL_Delay>
	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,GPIO_PIN_SET);		//Pin PA8 = Stop
 80018a4:	2201      	movs	r2, #1
 80018a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018aa:	480d      	ldr	r0, [pc, #52]	; (80018e0 <_Z12LEFT_commandv+0x70>)
 80018ac:	f008 fa94 	bl	8009dd8 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10,GPIO_PIN_SET);		//Pin PA10 = Go
 80018b0:	2201      	movs	r2, #1
 80018b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018b6:	480a      	ldr	r0, [pc, #40]	; (80018e0 <_Z12LEFT_commandv+0x70>)
 80018b8:	f008 fa8e 	bl	8009dd8 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3,GPIO_PIN_RESET);			//Pin PB3 = Left
 80018bc:	2200      	movs	r2, #0
 80018be:	2108      	movs	r1, #8
 80018c0:	4808      	ldr	r0, [pc, #32]	; (80018e4 <_Z12LEFT_commandv+0x74>)
 80018c2:	f008 fa89 	bl	8009dd8 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,GPIO_PIN_SET);		//Pin PB5 = right
 80018c6:	2201      	movs	r2, #1
 80018c8:	2120      	movs	r1, #32
 80018ca:	4806      	ldr	r0, [pc, #24]	; (80018e4 <_Z12LEFT_commandv+0x74>)
 80018cc:	f008 fa84 	bl	8009dd8 <HAL_GPIO_WritePin>
	 //HAL_Delay(2000);
}
 80018d0:	bf00      	nop
 80018d2:	4618      	mov	r0, r3
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	20007e50 	.word	0x20007e50
 80018dc:	20007e98 	.word	0x20007e98
 80018e0:	40020000 	.word	0x40020000
 80018e4:	40020400 	.word	0x40020400

080018e8 <_Z13RIGHT_commandv>:

int RIGHT_command(){
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
	//for (i =120; i<121; i++){
	//	 htim2.Instance->CCR1 = i;  // duty cycle is .5 ms
	//}
	 htim2.Instance->CCR1 = 125;  // duty cycle is .5 ms
 80018ec:	4b18      	ldr	r3, [pc, #96]	; (8001950 <_Z13RIGHT_commandv+0x68>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	227d      	movs	r2, #125	; 0x7d
 80018f2:	635a      	str	r2, [r3, #52]	; 0x34
	 htim5.Instance->CCR2 = 0;  // duty cycle is .5 ms
 80018f4:	4b17      	ldr	r3, [pc, #92]	; (8001954 <_Z13RIGHT_commandv+0x6c>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2200      	movs	r2, #0
 80018fa:	639a      	str	r2, [r3, #56]	; 0x38
	 HAL_Delay(1500);
 80018fc:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001900:	f007 fcb6 	bl	8009270 <HAL_Delay>
	 htim2.Instance->CCR1 = 0;  // duty cycle is .5 ms
 8001904:	4b12      	ldr	r3, [pc, #72]	; (8001950 <_Z13RIGHT_commandv+0x68>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2200      	movs	r2, #0
 800190a:	635a      	str	r2, [r3, #52]	; 0x34
	 htim5.Instance->CCR2 = 0;  // duty cycle is .5 ms
 800190c:	4b11      	ldr	r3, [pc, #68]	; (8001954 <_Z13RIGHT_commandv+0x6c>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2200      	movs	r2, #0
 8001912:	639a      	str	r2, [r3, #56]	; 0x38
	 HAL_Delay(500);
 8001914:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001918:	f007 fcaa 	bl	8009270 <HAL_Delay>
	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,GPIO_PIN_SET);		//Pin PA8 = Stop
 800191c:	2201      	movs	r2, #1
 800191e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001922:	480d      	ldr	r0, [pc, #52]	; (8001958 <_Z13RIGHT_commandv+0x70>)
 8001924:	f008 fa58 	bl	8009dd8 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10,GPIO_PIN_SET);		//Pin PA10 = Go
 8001928:	2201      	movs	r2, #1
 800192a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800192e:	480a      	ldr	r0, [pc, #40]	; (8001958 <_Z13RIGHT_commandv+0x70>)
 8001930:	f008 fa52 	bl	8009dd8 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3,GPIO_PIN_SET);		//Pin PB3 = Left
 8001934:	2201      	movs	r2, #1
 8001936:	2108      	movs	r1, #8
 8001938:	4808      	ldr	r0, [pc, #32]	; (800195c <_Z13RIGHT_commandv+0x74>)
 800193a:	f008 fa4d 	bl	8009dd8 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,GPIO_PIN_RESET);			//Pin PB5 = right
 800193e:	2200      	movs	r2, #0
 8001940:	2120      	movs	r1, #32
 8001942:	4806      	ldr	r0, [pc, #24]	; (800195c <_Z13RIGHT_commandv+0x74>)
 8001944:	f008 fa48 	bl	8009dd8 <HAL_GPIO_WritePin>
}
 8001948:	bf00      	nop
 800194a:	4618      	mov	r0, r3
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	20007e50 	.word	0x20007e50
 8001954:	20007e98 	.word	0x20007e98
 8001958:	40020000 	.word	0x40020000
 800195c:	40020400 	.word	0x40020400

08001960 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b0c0      	sub	sp, #256	; 0x100
 8001964:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001966:	f007 fc11 	bl	800918c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800196a:	f000 f905 	bl	8001b78 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800196e:	f000 fb5b 	bl	8002028 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8001972:	f000 fb31 	bl	8001fd8 <_ZL11MX_DMA_Initv>
  MX_I2S2_Init();
 8001976:	f000 f9af 	bl	8001cd8 <_ZL12MX_I2S2_Initv>
  MX_USART2_UART_Init();
 800197a:	f000 faff 	bl	8001f7c <_ZL19MX_USART2_UART_Initv>
  MX_TIM2_Init();
 800197e:	f000 f9dd 	bl	8001d3c <_ZL12MX_TIM2_Initv>
  MX_TIM5_Init();
 8001982:	f000 fa6b 	bl	8001e5c <_ZL12MX_TIM5_Initv>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001986:	2100      	movs	r1, #0
 8001988:	486e      	ldr	r0, [pc, #440]	; (8001b44 <main+0x1e4>)
 800198a:	f00a f913 	bl	800bbb4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 800198e:	2104      	movs	r1, #4
 8001990:	486d      	ldr	r0, [pc, #436]	; (8001b48 <main+0x1e8>)
 8001992:	f00a f90f 	bl	800bbb4 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(100);
 8001996:	2064      	movs	r0, #100	; 0x64
 8001998:	f007 fc6a 	bl	8009270 <HAL_Delay>
    /* USER CODE END WHILE */
	  for (int k=0; k<16000; k+=2){
 800199c:	2300      	movs	r3, #0
 800199e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80019a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80019a6:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80019aa:	da32      	bge.n	8001a12 <main+0xb2>
		  volatile HAL_StatusTypeDef result = HAL_I2S_Receive(&hi2s2, data_in, 2, 100);
 80019ac:	2364      	movs	r3, #100	; 0x64
 80019ae:	2202      	movs	r2, #2
 80019b0:	4966      	ldr	r1, [pc, #408]	; (8001b4c <main+0x1ec>)
 80019b2:	4867      	ldr	r0, [pc, #412]	; (8001b50 <main+0x1f0>)
 80019b4:	f008 fb22 	bl	8009ffc <HAL_I2S_Receive>
 80019b8:	4603      	mov	r3, r0
 80019ba:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
		  if (result != HAL_OK){
 80019be:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	bf14      	ite	ne
 80019c8:	2301      	movne	r3, #1
 80019ca:	2300      	moveq	r3, #0
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d008      	beq.n	80019e4 <main+0x84>
			  strcpy((char*)buf, "Error Rx\r\n");
 80019d2:	4b60      	ldr	r3, [pc, #384]	; (8001b54 <main+0x1f4>)
 80019d4:	4a60      	ldr	r2, [pc, #384]	; (8001b58 <main+0x1f8>)
 80019d6:	ca07      	ldmia	r2, {r0, r1, r2}
 80019d8:	c303      	stmia	r3!, {r0, r1}
 80019da:	801a      	strh	r2, [r3, #0]
 80019dc:	3302      	adds	r3, #2
 80019de:	0c12      	lsrs	r2, r2, #16
 80019e0:	701a      	strb	r2, [r3, #0]
 80019e2:	e010      	b.n	8001a06 <main+0xa6>
		  } else {
			  audio_buffer[k] = (int16_t)data_in[0];
 80019e4:	4b59      	ldr	r3, [pc, #356]	; (8001b4c <main+0x1ec>)
 80019e6:	881b      	ldrh	r3, [r3, #0]
 80019e8:	b219      	sxth	r1, r3
 80019ea:	4a5c      	ldr	r2, [pc, #368]	; (8001b5c <main+0x1fc>)
 80019ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80019f0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			  audio_buffer[k+1] = (int16_t)data_in[1];
 80019f4:	4b55      	ldr	r3, [pc, #340]	; (8001b4c <main+0x1ec>)
 80019f6:	885a      	ldrh	r2, [r3, #2]
 80019f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80019fc:	3301      	adds	r3, #1
 80019fe:	b211      	sxth	r1, r2
 8001a00:	4a56      	ldr	r2, [pc, #344]	; (8001b5c <main+0x1fc>)
 8001a02:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  for (int k=0; k<16000; k+=2){
 8001a06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001a0a:	3302      	adds	r3, #2
 8001a0c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001a10:	e7c7      	b.n	80019a2 <main+0x42>
		  }
	  }

	  char output_class[12][8] = {"Silence", "Unknown", "yes", "no", "up", "down", "left", "right", "on", "off", "stop", "go"};
 8001a12:	4a53      	ldr	r2, [pc, #332]	; (8001b60 <main+0x200>)
 8001a14:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001a18:	4611      	mov	r1, r2
 8001a1a:	2260      	movs	r2, #96	; 0x60
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f00d feb9 	bl	800f794 <memcpy>
	  KWS_DS_CNN kws(audio_buffer);
 8001a22:	463b      	mov	r3, r7
 8001a24:	494d      	ldr	r1, [pc, #308]	; (8001b5c <main+0x1fc>)
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7ff fe8a 	bl	8001740 <_ZN10KWS_DS_CNNC1EPs>

	  kws.extract_features();
 8001a2c:	463b      	mov	r3, r7
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7ff fdea 	bl	8001608 <_ZN3KWS16extract_featuresEv>
	  kws.classify();
 8001a34:	463b      	mov	r3, r7
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7ff fe37 	bl	80016aa <_ZN3KWS8classifyEv>

	  int max_ind = kws.get_top_class(kws.output);
 8001a3c:	463b      	mov	r3, r7
 8001a3e:	689a      	ldr	r2, [r3, #8]
 8001a40:	463b      	mov	r3, r7
 8001a42:	4611      	mov	r1, r2
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7ff fe4e 	bl	80016e6 <_ZN3KWS13get_top_classEPa>
 8001a4a:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8

	  char buffer [70];
	  int buffer_output = 0;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

	  // Use default size
	  //char *command_array[SIZE_OF_CMD_ARRAY] = {};

	  //detected  string
	  char *detected_output = output_class[max_ind];
 8001a54:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001a58:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001a5c:	00db      	lsls	r3, r3, #3
 8001a5e:	4413      	add	r3, r2
 8001a60:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0

	  // COMMAND Strings

	  buffer_output = sprintf(buffer, "Detected %s (%d%%)\r\n", output_class[max_ind], ((int)kws.output[max_ind]*100/128));
 8001a64:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001a68:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001a6c:	00db      	lsls	r3, r3, #3
 8001a6e:	18d1      	adds	r1, r2, r3
 8001a70:	463b      	mov	r3, r7
 8001a72:	689a      	ldr	r2, [r3, #8]
 8001a74:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001a78:	4413      	add	r3, r2
 8001a7a:	f993 3000 	ldrsb.w	r3, [r3]
 8001a7e:	461a      	mov	r2, r3
 8001a80:	2364      	movs	r3, #100	; 0x64
 8001a82:	fb03 f302 	mul.w	r3, r3, r2
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	da00      	bge.n	8001a8c <main+0x12c>
 8001a8a:	337f      	adds	r3, #127	; 0x7f
 8001a8c:	11db      	asrs	r3, r3, #7
 8001a8e:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8001a92:	460a      	mov	r2, r1
 8001a94:	4933      	ldr	r1, [pc, #204]	; (8001b64 <main+0x204>)
 8001a96:	f00d ffab 	bl	800f9f0 <siprintf>
 8001a9a:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
	  HAL_UART_Transmit(&huart2, (uint8_t *)buffer, buffer_output, 100);
 8001a9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001aa2:	b29a      	uxth	r2, r3
 8001aa4:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8001aa8:	2364      	movs	r3, #100	; 0x64
 8001aaa:	482f      	ldr	r0, [pc, #188]	; (8001b68 <main+0x208>)
 8001aac:	f00a fff3 	bl	800ca96 <HAL_UART_Transmit>
		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,GPIO_PIN_RESET);		//Pin PA8 = Stop
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ab6:	482d      	ldr	r0, [pc, #180]	; (8001b6c <main+0x20c>)
 8001ab8:	f008 f98e 	bl	8009dd8 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10,GPIO_PIN_RESET);		//Pin PA10 = Go
 8001abc:	2200      	movs	r2, #0
 8001abe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ac2:	482a      	ldr	r0, [pc, #168]	; (8001b6c <main+0x20c>)
 8001ac4:	f008 f988 	bl	8009dd8 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3,GPIO_PIN_RESET);		//Pin PB3 = Left
 8001ac8:	2200      	movs	r2, #0
 8001aca:	2108      	movs	r1, #8
 8001acc:	4828      	ldr	r0, [pc, #160]	; (8001b70 <main+0x210>)
 8001ace:	f008 f983 	bl	8009dd8 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,GPIO_PIN_RESET);			//Pin PB5 = right
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	2120      	movs	r1, #32
 8001ad6:	4826      	ldr	r0, [pc, #152]	; (8001b70 <main+0x210>)
 8001ad8:	f008 f97e 	bl	8009dd8 <HAL_GPIO_WritePin>
	  //GO_command();
		  if (max_ind == 6 ){	//left
 8001adc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001ae0:	2b06      	cmp	r3, #6
 8001ae2:	d102      	bne.n	8001aea <main+0x18a>
			  LEFT_command();
 8001ae4:	f7ff fec4 	bl	8001870 <_Z12LEFT_commandv>
 8001ae8:	e026      	b.n	8001b38 <main+0x1d8>
			  //keep_command = "";
		  }
		  else if (max_ind == 7){	//right
 8001aea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001aee:	2b07      	cmp	r3, #7
 8001af0:	d105      	bne.n	8001afe <main+0x19e>
			  RIGHT_command();
 8001af2:	f7ff fef9 	bl	80018e8 <_Z13RIGHT_commandv>
			  keep_command = 0;
 8001af6:	4b1f      	ldr	r3, [pc, #124]	; (8001b74 <main+0x214>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	e01c      	b.n	8001b38 <main+0x1d8>
		  }
		  else if (max_ind == 11){	//go
 8001afe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001b02:	2b0b      	cmp	r3, #11
 8001b04:	d105      	bne.n	8001b12 <main+0x1b2>
			  GO_command();
 8001b06:	f7ff fe5b 	bl	80017c0 <_Z10GO_commandv>
			  keep_command = 1;
 8001b0a:	4b1a      	ldr	r3, [pc, #104]	; (8001b74 <main+0x214>)
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	601a      	str	r2, [r3, #0]
 8001b10:	e012      	b.n	8001b38 <main+0x1d8>
		  }
		  else if (max_ind == 10){	//stop
 8001b12:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001b16:	2b0a      	cmp	r3, #10
 8001b18:	d105      	bne.n	8001b26 <main+0x1c6>

			  STOP_command();
 8001b1a:	f7ff fe7d 	bl	8001818 <_Z12STOP_commandv>
			  keep_command = 0;
 8001b1e:	4b15      	ldr	r3, [pc, #84]	; (8001b74 <main+0x214>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]
 8001b24:	e008      	b.n	8001b38 <main+0x1d8>
		  }
		  else if (max_ind == 0 || 1 || 2 || 3 || 4 || 5 || 8 || 9){	//Silence
			  if (keep_command == 1){
 8001b26:	4b13      	ldr	r3, [pc, #76]	; (8001b74 <main+0x214>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d102      	bne.n	8001b34 <main+0x1d4>
				  GO_command();
 8001b2e:	f7ff fe47 	bl	80017c0 <_Z10GO_commandv>
 8001b32:	e001      	b.n	8001b38 <main+0x1d8>
			  }
			  else{
				  STOP_command();
 8001b34:	f7ff fe70 	bl	8001818 <_Z12STOP_commandv>
	  KWS_DS_CNN kws(audio_buffer);
 8001b38:	463b      	mov	r3, r7
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7ff fe2a 	bl	8001794 <_ZN10KWS_DS_CNND1Ev>
			  }
		  }
  }
 8001b40:	e729      	b.n	8001996 <main+0x36>
 8001b42:	bf00      	nop
 8001b44:	20007e50 	.word	0x20007e50
 8001b48:	20007e98 	.word	0x20007e98
 8001b4c:	200000a0 	.word	0x200000a0
 8001b50:	20007da8 	.word	0x20007da8
 8001b54:	20000094 	.word	0x20000094
 8001b58:	080100a0 	.word	0x080100a0
 8001b5c:	200000a4 	.word	0x200000a4
 8001b60:	080100c4 	.word	0x080100c4
 8001b64:	080100ac 	.word	0x080100ac
 8001b68:	20007ee0 	.word	0x20007ee0
 8001b6c:	40020000 	.word	0x40020000
 8001b70:	40020400 	.word	0x40020400
 8001b74:	20007da4 	.word	0x20007da4

08001b78 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b0ac      	sub	sp, #176	; 0xb0
 8001b7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b7e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001b82:	2234      	movs	r2, #52	; 0x34
 8001b84:	2100      	movs	r1, #0
 8001b86:	4618      	mov	r0, r3
 8001b88:	f00d fe2c 	bl	800f7e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b8c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]
 8001b94:	605a      	str	r2, [r3, #4]
 8001b96:	609a      	str	r2, [r3, #8]
 8001b98:	60da      	str	r2, [r3, #12]
 8001b9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b9c:	f107 030c 	add.w	r3, r7, #12
 8001ba0:	225c      	movs	r2, #92	; 0x5c
 8001ba2:	2100      	movs	r1, #0
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f00d fe1d 	bl	800f7e4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001baa:	2300      	movs	r3, #0
 8001bac:	60bb      	str	r3, [r7, #8]
 8001bae:	4b48      	ldr	r3, [pc, #288]	; (8001cd0 <_Z18SystemClock_Configv+0x158>)
 8001bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb2:	4a47      	ldr	r2, [pc, #284]	; (8001cd0 <_Z18SystemClock_Configv+0x158>)
 8001bb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bb8:	6413      	str	r3, [r2, #64]	; 0x40
 8001bba:	4b45      	ldr	r3, [pc, #276]	; (8001cd0 <_Z18SystemClock_Configv+0x158>)
 8001bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bc2:	60bb      	str	r3, [r7, #8]
 8001bc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	607b      	str	r3, [r7, #4]
 8001bca:	4b42      	ldr	r3, [pc, #264]	; (8001cd4 <_Z18SystemClock_Configv+0x15c>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a41      	ldr	r2, [pc, #260]	; (8001cd4 <_Z18SystemClock_Configv+0x15c>)
 8001bd0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001bd4:	6013      	str	r3, [r2, #0]
 8001bd6:	4b3f      	ldr	r3, [pc, #252]	; (8001cd4 <_Z18SystemClock_Configv+0x15c>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001bde:	607b      	str	r3, [r7, #4]
 8001be0:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001be2:	2301      	movs	r3, #1
 8001be4:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001be6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bee:	2302      	movs	r3, #2
 8001bf0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bf4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001bf8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001bfc:	2304      	movs	r3, #4
 8001bfe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001c02:	23b4      	movs	r3, #180	; 0xb4
 8001c04:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c08:	2302      	movs	r3, #2
 8001c0a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001c0e:	2302      	movs	r3, #2
 8001c10:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001c14:	2302      	movs	r3, #2
 8001c16:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c1a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f009 fc82 	bl	800b528 <HAL_RCC_OscConfig>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	bf14      	ite	ne
 8001c2a:	2301      	movne	r3, #1
 8001c2c:	2300      	moveq	r3, #0
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <_Z18SystemClock_Configv+0xc0>
  {
    Error_Handler();
 8001c34:	f000 fa7c 	bl	8002130 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001c38:	f008 fbe8 	bl	800a40c <HAL_PWREx_EnableOverDrive>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	bf14      	ite	ne
 8001c42:	2301      	movne	r3, #1
 8001c44:	2300      	moveq	r3, #0
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <_Z18SystemClock_Configv+0xd8>
  {
    Error_Handler();
 8001c4c:	f000 fa70 	bl	8002130 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c50:	230f      	movs	r3, #15
 8001c52:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c54:	2302      	movs	r3, #2
 8001c56:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8001c5c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001c60:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001c62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c66:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001c68:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001c6c:	2105      	movs	r1, #5
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f008 fc1c 	bl	800a4ac <HAL_RCC_ClockConfig>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	bf14      	ite	ne
 8001c7a:	2301      	movne	r3, #1
 8001c7c:	2300      	moveq	r3, #0
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <_Z18SystemClock_Configv+0x110>
  {
    Error_Handler();
 8001c84:	f000 fa54 	bl	8002130 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB1;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001c8c:	23c0      	movs	r3, #192	; 0xc0
 8001c8e:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLI2SP_DIV2;
 8001c90:	2302      	movs	r3, #2
 8001c92:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 4;
 8001c94:	2304      	movs	r3, #4
 8001c96:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001c98:	2302      	movs	r3, #2
 8001c9a:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.I2sApb1ClockSelection = RCC_I2SAPB1CLKSOURCE_PLLI2S;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ca8:	f107 030c 	add.w	r3, r7, #12
 8001cac:	4618      	mov	r0, r3
 8001cae:	f008 fd17 	bl	800a6e0 <HAL_RCCEx_PeriphCLKConfig>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	bf14      	ite	ne
 8001cb8:	2301      	movne	r3, #1
 8001cba:	2300      	moveq	r3, #0
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <_Z18SystemClock_Configv+0x14e>
  {
    Error_Handler();
 8001cc2:	f000 fa35 	bl	8002130 <Error_Handler>
  }
}
 8001cc6:	bf00      	nop
 8001cc8:	37b0      	adds	r7, #176	; 0xb0
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	40023800 	.word	0x40023800
 8001cd4:	40007000 	.word	0x40007000

08001cd8 <_ZL12MX_I2S2_Initv>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8001cdc:	4b15      	ldr	r3, [pc, #84]	; (8001d34 <_ZL12MX_I2S2_Initv+0x5c>)
 8001cde:	4a16      	ldr	r2, [pc, #88]	; (8001d38 <_ZL12MX_I2S2_Initv+0x60>)
 8001ce0:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8001ce2:	4b14      	ldr	r3, [pc, #80]	; (8001d34 <_ZL12MX_I2S2_Initv+0x5c>)
 8001ce4:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001ce8:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8001cea:	4b12      	ldr	r3, [pc, #72]	; (8001d34 <_ZL12MX_I2S2_Initv+0x5c>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_32B;
 8001cf0:	4b10      	ldr	r3, [pc, #64]	; (8001d34 <_ZL12MX_I2S2_Initv+0x5c>)
 8001cf2:	2205      	movs	r2, #5
 8001cf4:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8001cf6:	4b0f      	ldr	r3, [pc, #60]	; (8001d34 <_ZL12MX_I2S2_Initv+0x5c>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8001cfc:	4b0d      	ldr	r3, [pc, #52]	; (8001d34 <_ZL12MX_I2S2_Initv+0x5c>)
 8001cfe:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001d02:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8001d04:	4b0b      	ldr	r3, [pc, #44]	; (8001d34 <_ZL12MX_I2S2_Initv+0x5c>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8001d0a:	4b0a      	ldr	r3, [pc, #40]	; (8001d34 <_ZL12MX_I2S2_Initv+0x5c>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001d10:	4b08      	ldr	r3, [pc, #32]	; (8001d34 <_ZL12MX_I2S2_Initv+0x5c>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8001d16:	4807      	ldr	r0, [pc, #28]	; (8001d34 <_ZL12MX_I2S2_Initv+0x5c>)
 8001d18:	f008 f878 	bl	8009e0c <HAL_I2S_Init>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	bf14      	ite	ne
 8001d22:	2301      	movne	r3, #1
 8001d24:	2300      	moveq	r3, #0
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d001      	beq.n	8001d30 <_ZL12MX_I2S2_Initv+0x58>
  {
    Error_Handler();
 8001d2c:	f000 fa00 	bl	8002130 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8001d30:	bf00      	nop
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	20007da8 	.word	0x20007da8
 8001d38:	40003800 	.word	0x40003800

08001d3c <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b08e      	sub	sp, #56	; 0x38
 8001d40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d46:	2200      	movs	r2, #0
 8001d48:	601a      	str	r2, [r3, #0]
 8001d4a:	605a      	str	r2, [r3, #4]
 8001d4c:	609a      	str	r2, [r3, #8]
 8001d4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d50:	f107 0320 	add.w	r3, r7, #32
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d5a:	1d3b      	adds	r3, r7, #4
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	605a      	str	r2, [r3, #4]
 8001d62:	609a      	str	r2, [r3, #8]
 8001d64:	60da      	str	r2, [r3, #12]
 8001d66:	611a      	str	r2, [r3, #16]
 8001d68:	615a      	str	r2, [r3, #20]
 8001d6a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d6c:	4b3a      	ldr	r3, [pc, #232]	; (8001e58 <_ZL12MX_TIM2_Initv+0x11c>)
 8001d6e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d72:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 900;
 8001d74:	4b38      	ldr	r3, [pc, #224]	; (8001e58 <_ZL12MX_TIM2_Initv+0x11c>)
 8001d76:	f44f 7261 	mov.w	r2, #900	; 0x384
 8001d7a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d7c:	4b36      	ldr	r3, [pc, #216]	; (8001e58 <_ZL12MX_TIM2_Initv+0x11c>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8001d82:	4b35      	ldr	r3, [pc, #212]	; (8001e58 <_ZL12MX_TIM2_Initv+0x11c>)
 8001d84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d88:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d8a:	4b33      	ldr	r3, [pc, #204]	; (8001e58 <_ZL12MX_TIM2_Initv+0x11c>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d90:	4b31      	ldr	r3, [pc, #196]	; (8001e58 <_ZL12MX_TIM2_Initv+0x11c>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d96:	4830      	ldr	r0, [pc, #192]	; (8001e58 <_ZL12MX_TIM2_Initv+0x11c>)
 8001d98:	f009 fe64 	bl	800ba64 <HAL_TIM_Base_Init>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	bf14      	ite	ne
 8001da2:	2301      	movne	r3, #1
 8001da4:	2300      	moveq	r3, #0
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <_ZL12MX_TIM2_Initv+0x74>
  {
    Error_Handler();
 8001dac:	f000 f9c0 	bl	8002130 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001db0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001db4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001db6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001dba:	4619      	mov	r1, r3
 8001dbc:	4826      	ldr	r0, [pc, #152]	; (8001e58 <_ZL12MX_TIM2_Initv+0x11c>)
 8001dbe:	f00a f987 	bl	800c0d0 <HAL_TIM_ConfigClockSource>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	bf14      	ite	ne
 8001dc8:	2301      	movne	r3, #1
 8001dca:	2300      	moveq	r3, #0
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <_ZL12MX_TIM2_Initv+0x9a>
  {
    Error_Handler();
 8001dd2:	f000 f9ad 	bl	8002130 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001dd6:	4820      	ldr	r0, [pc, #128]	; (8001e58 <_ZL12MX_TIM2_Initv+0x11c>)
 8001dd8:	f009 fe93 	bl	800bb02 <HAL_TIM_PWM_Init>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	bf14      	ite	ne
 8001de2:	2301      	movne	r3, #1
 8001de4:	2300      	moveq	r3, #0
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <_ZL12MX_TIM2_Initv+0xb4>
  {
    Error_Handler();
 8001dec:	f000 f9a0 	bl	8002130 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001df0:	2300      	movs	r3, #0
 8001df2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001df4:	2300      	movs	r3, #0
 8001df6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001df8:	f107 0320 	add.w	r3, r7, #32
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	4816      	ldr	r0, [pc, #88]	; (8001e58 <_ZL12MX_TIM2_Initv+0x11c>)
 8001e00:	f00a fd6c 	bl	800c8dc <HAL_TIMEx_MasterConfigSynchronization>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	bf14      	ite	ne
 8001e0a:	2301      	movne	r3, #1
 8001e0c:	2300      	moveq	r3, #0
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d001      	beq.n	8001e18 <_ZL12MX_TIM2_Initv+0xdc>
  {
    Error_Handler();
 8001e14:	f000 f98c 	bl	8002130 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e18:	2360      	movs	r3, #96	; 0x60
 8001e1a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e20:	2300      	movs	r3, #0
 8001e22:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e24:	2300      	movs	r3, #0
 8001e26:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e28:	1d3b      	adds	r3, r7, #4
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	480a      	ldr	r0, [pc, #40]	; (8001e58 <_ZL12MX_TIM2_Initv+0x11c>)
 8001e30:	f00a f890 	bl	800bf54 <HAL_TIM_PWM_ConfigChannel>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	bf14      	ite	ne
 8001e3a:	2301      	movne	r3, #1
 8001e3c:	2300      	moveq	r3, #0
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <_ZL12MX_TIM2_Initv+0x10c>
  {
    Error_Handler();
 8001e44:	f000 f974 	bl	8002130 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001e48:	4803      	ldr	r0, [pc, #12]	; (8001e58 <_ZL12MX_TIM2_Initv+0x11c>)
 8001e4a:	f001 f84f 	bl	8002eec <HAL_TIM_MspPostInit>

}
 8001e4e:	bf00      	nop
 8001e50:	3738      	adds	r7, #56	; 0x38
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	20007e50 	.word	0x20007e50

08001e5c <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b08e      	sub	sp, #56	; 0x38
 8001e60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e66:	2200      	movs	r2, #0
 8001e68:	601a      	str	r2, [r3, #0]
 8001e6a:	605a      	str	r2, [r3, #4]
 8001e6c:	609a      	str	r2, [r3, #8]
 8001e6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e70:	f107 0320 	add.w	r3, r7, #32
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e7a:	1d3b      	adds	r3, r7, #4
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	601a      	str	r2, [r3, #0]
 8001e80:	605a      	str	r2, [r3, #4]
 8001e82:	609a      	str	r2, [r3, #8]
 8001e84:	60da      	str	r2, [r3, #12]
 8001e86:	611a      	str	r2, [r3, #16]
 8001e88:	615a      	str	r2, [r3, #20]
 8001e8a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001e8c:	4b39      	ldr	r3, [pc, #228]	; (8001f74 <_ZL12MX_TIM5_Initv+0x118>)
 8001e8e:	4a3a      	ldr	r2, [pc, #232]	; (8001f78 <_ZL12MX_TIM5_Initv+0x11c>)
 8001e90:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 900;
 8001e92:	4b38      	ldr	r3, [pc, #224]	; (8001f74 <_ZL12MX_TIM5_Initv+0x118>)
 8001e94:	f44f 7261 	mov.w	r2, #900	; 0x384
 8001e98:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e9a:	4b36      	ldr	r3, [pc, #216]	; (8001f74 <_ZL12MX_TIM5_Initv+0x118>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000;
 8001ea0:	4b34      	ldr	r3, [pc, #208]	; (8001f74 <_ZL12MX_TIM5_Initv+0x118>)
 8001ea2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ea6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ea8:	4b32      	ldr	r3, [pc, #200]	; (8001f74 <_ZL12MX_TIM5_Initv+0x118>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eae:	4b31      	ldr	r3, [pc, #196]	; (8001f74 <_ZL12MX_TIM5_Initv+0x118>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001eb4:	482f      	ldr	r0, [pc, #188]	; (8001f74 <_ZL12MX_TIM5_Initv+0x118>)
 8001eb6:	f009 fdd5 	bl	800ba64 <HAL_TIM_Base_Init>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	bf14      	ite	ne
 8001ec0:	2301      	movne	r3, #1
 8001ec2:	2300      	moveq	r3, #0
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <_ZL12MX_TIM5_Initv+0x72>
  {
    Error_Handler();
 8001eca:	f000 f931 	bl	8002130 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ece:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ed2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001ed4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ed8:	4619      	mov	r1, r3
 8001eda:	4826      	ldr	r0, [pc, #152]	; (8001f74 <_ZL12MX_TIM5_Initv+0x118>)
 8001edc:	f00a f8f8 	bl	800c0d0 <HAL_TIM_ConfigClockSource>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	bf14      	ite	ne
 8001ee6:	2301      	movne	r3, #1
 8001ee8:	2300      	moveq	r3, #0
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d001      	beq.n	8001ef4 <_ZL12MX_TIM5_Initv+0x98>
  {
    Error_Handler();
 8001ef0:	f000 f91e 	bl	8002130 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001ef4:	481f      	ldr	r0, [pc, #124]	; (8001f74 <_ZL12MX_TIM5_Initv+0x118>)
 8001ef6:	f009 fe04 	bl	800bb02 <HAL_TIM_PWM_Init>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	bf14      	ite	ne
 8001f00:	2301      	movne	r3, #1
 8001f02:	2300      	moveq	r3, #0
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <_ZL12MX_TIM5_Initv+0xb2>
  {
    Error_Handler();
 8001f0a:	f000 f911 	bl	8002130 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f12:	2300      	movs	r3, #0
 8001f14:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001f16:	f107 0320 	add.w	r3, r7, #32
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	4815      	ldr	r0, [pc, #84]	; (8001f74 <_ZL12MX_TIM5_Initv+0x118>)
 8001f1e:	f00a fcdd 	bl	800c8dc <HAL_TIMEx_MasterConfigSynchronization>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	bf14      	ite	ne
 8001f28:	2301      	movne	r3, #1
 8001f2a:	2300      	moveq	r3, #0
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <_ZL12MX_TIM5_Initv+0xda>
  {
    Error_Handler();
 8001f32:	f000 f8fd 	bl	8002130 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f36:	2360      	movs	r3, #96	; 0x60
 8001f38:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f42:	2300      	movs	r3, #0
 8001f44:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f46:	1d3b      	adds	r3, r7, #4
 8001f48:	2204      	movs	r2, #4
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	4809      	ldr	r0, [pc, #36]	; (8001f74 <_ZL12MX_TIM5_Initv+0x118>)
 8001f4e:	f00a f801 	bl	800bf54 <HAL_TIM_PWM_ConfigChannel>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	bf14      	ite	ne
 8001f58:	2301      	movne	r3, #1
 8001f5a:	2300      	moveq	r3, #0
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d001      	beq.n	8001f66 <_ZL12MX_TIM5_Initv+0x10a>
  {
    Error_Handler();
 8001f62:	f000 f8e5 	bl	8002130 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001f66:	4803      	ldr	r0, [pc, #12]	; (8001f74 <_ZL12MX_TIM5_Initv+0x118>)
 8001f68:	f000 ffc0 	bl	8002eec <HAL_TIM_MspPostInit>

}
 8001f6c:	bf00      	nop
 8001f6e:	3738      	adds	r7, #56	; 0x38
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	20007e98 	.word	0x20007e98
 8001f78:	40000c00 	.word	0x40000c00

08001f7c <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f80:	4b13      	ldr	r3, [pc, #76]	; (8001fd0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001f82:	4a14      	ldr	r2, [pc, #80]	; (8001fd4 <_ZL19MX_USART2_UART_Initv+0x58>)
 8001f84:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f86:	4b12      	ldr	r3, [pc, #72]	; (8001fd0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001f88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f8c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f8e:	4b10      	ldr	r3, [pc, #64]	; (8001fd0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f94:	4b0e      	ldr	r3, [pc, #56]	; (8001fd0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f9a:	4b0d      	ldr	r3, [pc, #52]	; (8001fd0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001fa0:	4b0b      	ldr	r3, [pc, #44]	; (8001fd0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001fa2:	220c      	movs	r2, #12
 8001fa4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fa6:	4b0a      	ldr	r3, [pc, #40]	; (8001fd0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fac:	4b08      	ldr	r3, [pc, #32]	; (8001fd0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001fb2:	4807      	ldr	r0, [pc, #28]	; (8001fd0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001fb4:	f00a fd22 	bl	800c9fc <HAL_UART_Init>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	bf14      	ite	ne
 8001fbe:	2301      	movne	r3, #1
 8001fc0:	2300      	moveq	r3, #0
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d001      	beq.n	8001fcc <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8001fc8:	f000 f8b2 	bl	8002130 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001fcc:	bf00      	nop
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	20007ee0 	.word	0x20007ee0
 8001fd4:	40004400 	.word	0x40004400

08001fd8 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001fde:	2300      	movs	r3, #0
 8001fe0:	607b      	str	r3, [r7, #4]
 8001fe2:	4b10      	ldr	r3, [pc, #64]	; (8002024 <_ZL11MX_DMA_Initv+0x4c>)
 8001fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe6:	4a0f      	ldr	r2, [pc, #60]	; (8002024 <_ZL11MX_DMA_Initv+0x4c>)
 8001fe8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001fec:	6313      	str	r3, [r2, #48]	; 0x30
 8001fee:	4b0d      	ldr	r3, [pc, #52]	; (8002024 <_ZL11MX_DMA_Initv+0x4c>)
 8001ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ff6:	607b      	str	r3, [r7, #4]
 8001ff8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	2100      	movs	r1, #0
 8001ffe:	200e      	movs	r0, #14
 8002000:	f007 fa35 	bl	800946e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002004:	200e      	movs	r0, #14
 8002006:	f007 fa4e 	bl	80094a6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800200a:	2200      	movs	r2, #0
 800200c:	2100      	movs	r1, #0
 800200e:	2011      	movs	r0, #17
 8002010:	f007 fa2d 	bl	800946e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002014:	2011      	movs	r0, #17
 8002016:	f007 fa46 	bl	80094a6 <HAL_NVIC_EnableIRQ>

}
 800201a:	bf00      	nop
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	40023800 	.word	0x40023800

08002028 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b08a      	sub	sp, #40	; 0x28
 800202c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800202e:	f107 0314 	add.w	r3, r7, #20
 8002032:	2200      	movs	r2, #0
 8002034:	601a      	str	r2, [r3, #0]
 8002036:	605a      	str	r2, [r3, #4]
 8002038:	609a      	str	r2, [r3, #8]
 800203a:	60da      	str	r2, [r3, #12]
 800203c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800203e:	2300      	movs	r3, #0
 8002040:	613b      	str	r3, [r7, #16]
 8002042:	4b38      	ldr	r3, [pc, #224]	; (8002124 <_ZL12MX_GPIO_Initv+0xfc>)
 8002044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002046:	4a37      	ldr	r2, [pc, #220]	; (8002124 <_ZL12MX_GPIO_Initv+0xfc>)
 8002048:	f043 0304 	orr.w	r3, r3, #4
 800204c:	6313      	str	r3, [r2, #48]	; 0x30
 800204e:	4b35      	ldr	r3, [pc, #212]	; (8002124 <_ZL12MX_GPIO_Initv+0xfc>)
 8002050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002052:	f003 0304 	and.w	r3, r3, #4
 8002056:	613b      	str	r3, [r7, #16]
 8002058:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800205a:	2300      	movs	r3, #0
 800205c:	60fb      	str	r3, [r7, #12]
 800205e:	4b31      	ldr	r3, [pc, #196]	; (8002124 <_ZL12MX_GPIO_Initv+0xfc>)
 8002060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002062:	4a30      	ldr	r2, [pc, #192]	; (8002124 <_ZL12MX_GPIO_Initv+0xfc>)
 8002064:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002068:	6313      	str	r3, [r2, #48]	; 0x30
 800206a:	4b2e      	ldr	r3, [pc, #184]	; (8002124 <_ZL12MX_GPIO_Initv+0xfc>)
 800206c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002072:	60fb      	str	r3, [r7, #12]
 8002074:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002076:	2300      	movs	r3, #0
 8002078:	60bb      	str	r3, [r7, #8]
 800207a:	4b2a      	ldr	r3, [pc, #168]	; (8002124 <_ZL12MX_GPIO_Initv+0xfc>)
 800207c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207e:	4a29      	ldr	r2, [pc, #164]	; (8002124 <_ZL12MX_GPIO_Initv+0xfc>)
 8002080:	f043 0301 	orr.w	r3, r3, #1
 8002084:	6313      	str	r3, [r2, #48]	; 0x30
 8002086:	4b27      	ldr	r3, [pc, #156]	; (8002124 <_ZL12MX_GPIO_Initv+0xfc>)
 8002088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208a:	f003 0301 	and.w	r3, r3, #1
 800208e:	60bb      	str	r3, [r7, #8]
 8002090:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002092:	2300      	movs	r3, #0
 8002094:	607b      	str	r3, [r7, #4]
 8002096:	4b23      	ldr	r3, [pc, #140]	; (8002124 <_ZL12MX_GPIO_Initv+0xfc>)
 8002098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209a:	4a22      	ldr	r2, [pc, #136]	; (8002124 <_ZL12MX_GPIO_Initv+0xfc>)
 800209c:	f043 0302 	orr.w	r3, r3, #2
 80020a0:	6313      	str	r3, [r2, #48]	; 0x30
 80020a2:	4b20      	ldr	r3, [pc, #128]	; (8002124 <_ZL12MX_GPIO_Initv+0xfc>)
 80020a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a6:	f003 0302 	and.w	r3, r3, #2
 80020aa:	607b      	str	r3, [r7, #4]
 80020ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Stop_Pin|Go_Pin, GPIO_PIN_RESET);
 80020ae:	2200      	movs	r2, #0
 80020b0:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 80020b4:	481c      	ldr	r0, [pc, #112]	; (8002128 <_ZL12MX_GPIO_Initv+0x100>)
 80020b6:	f007 fe8f 	bl	8009dd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Left_Pin|Right_Pin, GPIO_PIN_RESET);
 80020ba:	2200      	movs	r2, #0
 80020bc:	2128      	movs	r1, #40	; 0x28
 80020be:	481b      	ldr	r0, [pc, #108]	; (800212c <_ZL12MX_GPIO_Initv+0x104>)
 80020c0:	f007 fe8a 	bl	8009dd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Stop_Pin */
  GPIO_InitStruct.Pin = Stop_Pin;
 80020c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020ca:	2301      	movs	r3, #1
 80020cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ce:	2300      	movs	r3, #0
 80020d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d2:	2300      	movs	r3, #0
 80020d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Stop_GPIO_Port, &GPIO_InitStruct);
 80020d6:	f107 0314 	add.w	r3, r7, #20
 80020da:	4619      	mov	r1, r3
 80020dc:	4812      	ldr	r0, [pc, #72]	; (8002128 <_ZL12MX_GPIO_Initv+0x100>)
 80020de:	f007 fce7 	bl	8009ab0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Go_Pin */
  GPIO_InitStruct.Pin = Go_Pin;
 80020e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020e8:	2301      	movs	r3, #1
 80020ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ec:	2300      	movs	r3, #0
 80020ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80020f0:	2301      	movs	r3, #1
 80020f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Go_GPIO_Port, &GPIO_InitStruct);
 80020f4:	f107 0314 	add.w	r3, r7, #20
 80020f8:	4619      	mov	r1, r3
 80020fa:	480b      	ldr	r0, [pc, #44]	; (8002128 <_ZL12MX_GPIO_Initv+0x100>)
 80020fc:	f007 fcd8 	bl	8009ab0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Left_Pin Right_Pin */
  GPIO_InitStruct.Pin = Left_Pin|Right_Pin;
 8002100:	2328      	movs	r3, #40	; 0x28
 8002102:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002104:	2301      	movs	r3, #1
 8002106:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002108:	2300      	movs	r3, #0
 800210a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800210c:	2301      	movs	r3, #1
 800210e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002110:	f107 0314 	add.w	r3, r7, #20
 8002114:	4619      	mov	r1, r3
 8002116:	4805      	ldr	r0, [pc, #20]	; (800212c <_ZL12MX_GPIO_Initv+0x104>)
 8002118:	f007 fcca 	bl	8009ab0 <HAL_GPIO_Init>

}
 800211c:	bf00      	nop
 800211e:	3728      	adds	r7, #40	; 0x28
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	40023800 	.word	0x40023800
 8002128:	40020000 	.word	0x40020000
 800212c:	40020400 	.word	0x40020400

08002130 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002134:	b672      	cpsid	i
}
 8002136:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002138:	e7fe      	b.n	8002138 <Error_Handler+0x8>

0800213a <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 800213a:	b580      	push	{r7, lr}
 800213c:	b082      	sub	sp, #8
 800213e:	af00      	add	r7, sp, #0
 8002140:	ed87 0a01 	vstr	s0, [r7, #4]
 8002144:	ed97 0a01 	vldr	s0, [r7, #4]
 8002148:	f00b f856 	bl	800d1f8 <roundf>
 800214c:	eef0 7a40 	vmov.f32	s15, s0
 8002150:	eeb0 0a67 	vmov.f32	s0, s15
 8002154:	3708      	adds	r7, #8
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
	...

0800215c <_ZN4MFCC8MelScaleEf>:
 
    static inline float InverseMelScale(float mel_freq) {
      return 700.0f * (expf (mel_freq / 1127.0f) - 1.0f);
    }

    static inline float MelScale(float freq) {
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	ed87 0a01 	vstr	s0, [r7, #4]
      return 1127.0f * logf (1.0f + freq / 700.0f);
 8002166:	ed97 7a01 	vldr	s14, [r7, #4]
 800216a:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8002198 <_ZN4MFCC8MelScaleEf+0x3c>
 800216e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002172:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002176:	ee77 7a87 	vadd.f32	s15, s15, s14
 800217a:	eeb0 0a67 	vmov.f32	s0, s15
 800217e:	f00b f959 	bl	800d434 <logf>
 8002182:	eef0 7a40 	vmov.f32	s15, s0
 8002186:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800219c <_ZN4MFCC8MelScaleEf+0x40>
 800218a:	ee67 7a87 	vmul.f32	s15, s15, s14
    }
 800218e:	eeb0 0a67 	vmov.f32	s0, s15
 8002192:	3708      	adds	r7, #8
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	442f0000 	.word	0x442f0000
 800219c:	448ce000 	.word	0x448ce000

080021a0 <_ZSt3logIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:
    log(_Tp __x)
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
    { return __builtin_log(__x); }
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f7fe f9d3 	bl	8000554 <__aeabi_i2d>
 80021ae:	4602      	mov	r2, r0
 80021b0:	460b      	mov	r3, r1
 80021b2:	ec43 2b10 	vmov	d0, r2, r3
 80021b6:	f00b f847 	bl	800d248 <log>
 80021ba:	eeb0 7a40 	vmov.f32	s14, s0
 80021be:	eef0 7a60 	vmov.f32	s15, s1
 80021c2:	eeb0 0a47 	vmov.f32	s0, s14
 80021c6:	eef0 0a67 	vmov.f32	s1, s15
 80021ca:	3708      	adds	r7, #8
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <_ZSt3powIidEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	60f8      	str	r0, [r7, #12]
 80021d8:	ed87 0b00 	vstr	d0, [r7]
      return pow(__type(__x), __type(__y));
 80021dc:	68f8      	ldr	r0, [r7, #12]
 80021de:	f7fe f9b9 	bl	8000554 <__aeabi_i2d>
 80021e2:	4602      	mov	r2, r0
 80021e4:	460b      	mov	r3, r1
 80021e6:	ed97 1b00 	vldr	d1, [r7]
 80021ea:	ec43 2b10 	vmov	d0, r2, r3
 80021ee:	f00b f873 	bl	800d2d8 <pow>
 80021f2:	eeb0 7a40 	vmov.f32	s14, s0
 80021f6:	eef0 7a60 	vmov.f32	s15, s1
    }
 80021fa:	eeb0 0a47 	vmov.f32	s0, s14
 80021fe:	eef0 0a67 	vmov.f32	s1, s15
 8002202:	3710      	adds	r7, #16
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}

08002208 <_ZN4MFCCC1Eiii>:
#include <string.h>

#include "mfcc.h"
#include "float.h"

MFCC::MFCC(int num_mfcc_features, int frame_len, int mfcc_dec_bits) 
 8002208:	b5b0      	push	{r4, r5, r7, lr}
 800220a:	b086      	sub	sp, #24
 800220c:	af00      	add	r7, sp, #0
 800220e:	60f8      	str	r0, [r7, #12]
 8002210:	60b9      	str	r1, [r7, #8]
 8002212:	607a      	str	r2, [r7, #4]
 8002214:	603b      	str	r3, [r7, #0]
:num_mfcc_features(num_mfcc_features), 
 frame_len(frame_len), 
 mfcc_dec_bits(mfcc_dec_bits)
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	68ba      	ldr	r2, [r7, #8]
 800221a:	601a      	str	r2, [r3, #0]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	605a      	str	r2, [r3, #4]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	683a      	ldr	r2, [r7, #0]
 8002226:	60da      	str	r2, [r3, #12]
{

  // Round-up to nearest power of 2.
  frame_len_padded = pow(2,ceil((log(frame_len)/log(2))));
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f7ff ffb9 	bl	80021a0 <_ZSt3logIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 800222e:	ec55 4b10 	vmov	r4, r5, d0
 8002232:	2002      	movs	r0, #2
 8002234:	f7ff ffb4 	bl	80021a0 <_ZSt3logIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8002238:	ec53 2b10 	vmov	r2, r3, d0
 800223c:	4620      	mov	r0, r4
 800223e:	4629      	mov	r1, r5
 8002240:	f7fe fb1c 	bl	800087c <__aeabi_ddiv>
 8002244:	4602      	mov	r2, r0
 8002246:	460b      	mov	r3, r1
 8002248:	ec43 2b17 	vmov	d7, r2, r3
 800224c:	eeb0 0a47 	vmov.f32	s0, s14
 8002250:	eef0 0a67 	vmov.f32	s1, s15
 8002254:	f00a fefc 	bl	800d050 <ceil>
 8002258:	eeb0 7a40 	vmov.f32	s14, s0
 800225c:	eef0 7a60 	vmov.f32	s15, s1
 8002260:	eeb0 0a47 	vmov.f32	s0, s14
 8002264:	eef0 0a67 	vmov.f32	s1, s15
 8002268:	2002      	movs	r0, #2
 800226a:	f7ff ffb1 	bl	80021d0 <_ZSt3powIidEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800226e:	ec53 2b10 	vmov	r2, r3, d0
 8002272:	4610      	mov	r0, r2
 8002274:	4619      	mov	r1, r3
 8002276:	f7fe fc87 	bl	8000b88 <__aeabi_d2iz>
 800227a:	4602      	mov	r2, r0
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	609a      	str	r2, [r3, #8]

  frame = new float[frame_len_padded];
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 8002288:	4293      	cmp	r3, r2
 800228a:	d201      	bcs.n	8002290 <_ZN4MFCCC1Eiii+0x88>
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	e001      	b.n	8002294 <_ZN4MFCCC1Eiii+0x8c>
 8002290:	f04f 33ff 	mov.w	r3, #4294967295
 8002294:	4618      	mov	r0, r3
 8002296:	f00a feb8 	bl	800d00a <_Znaj>
 800229a:	4603      	mov	r3, r0
 800229c:	461a      	mov	r2, r3
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	611a      	str	r2, [r3, #16]
  buffer = new float[frame_len_padded];
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d201      	bcs.n	80022b2 <_ZN4MFCCC1Eiii+0xaa>
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	e001      	b.n	80022b6 <_ZN4MFCCC1Eiii+0xae>
 80022b2:	f04f 33ff 	mov.w	r3, #4294967295
 80022b6:	4618      	mov	r0, r3
 80022b8:	f00a fea7 	bl	800d00a <_Znaj>
 80022bc:	4603      	mov	r3, r0
 80022be:	461a      	mov	r2, r3
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	615a      	str	r2, [r3, #20]
  mel_energies = new float[NUM_FBANK_BINS];
 80022c4:	20a0      	movs	r0, #160	; 0xa0
 80022c6:	f00a fea0 	bl	800d00a <_Znaj>
 80022ca:	4603      	mov	r3, r0
 80022cc:	461a      	mov	r2, r3
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	619a      	str	r2, [r3, #24]

  //create window function
  window_func = new float[frame_len];
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 80022d8:	4293      	cmp	r3, r2
 80022da:	d201      	bcs.n	80022e0 <_ZN4MFCCC1Eiii+0xd8>
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	e001      	b.n	80022e4 <_ZN4MFCCC1Eiii+0xdc>
 80022e0:	f04f 33ff 	mov.w	r3, #4294967295
 80022e4:	4618      	mov	r0, r3
 80022e6:	f00a fe90 	bl	800d00a <_Znaj>
 80022ea:	4603      	mov	r3, r0
 80022ec:	461a      	mov	r2, r3
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	61da      	str	r2, [r3, #28]
  for (int i = 0; i < frame_len; i++)
 80022f2:	2300      	movs	r3, #0
 80022f4:	617b      	str	r3, [r7, #20]
 80022f6:	697a      	ldr	r2, [r7, #20]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	429a      	cmp	r2, r3
 80022fc:	da43      	bge.n	8002386 <_ZN4MFCCC1Eiii+0x17e>
    window_func[i] = 0.5 - 0.5*cos(M_2PI * ((float)i) / (frame_len));
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	ee07 3a90 	vmov	s15, r3
 8002304:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002308:	ee17 0a90 	vmov	r0, s15
 800230c:	f7fe f934 	bl	8000578 <__aeabi_f2d>
 8002310:	a336      	add	r3, pc, #216	; (adr r3, 80023ec <_ZN4MFCCC1Eiii+0x1e4>)
 8002312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002316:	f7fe f987 	bl	8000628 <__aeabi_dmul>
 800231a:	4602      	mov	r2, r0
 800231c:	460b      	mov	r3, r1
 800231e:	4614      	mov	r4, r2
 8002320:	461d      	mov	r5, r3
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f7fe f916 	bl	8000554 <__aeabi_i2d>
 8002328:	4602      	mov	r2, r0
 800232a:	460b      	mov	r3, r1
 800232c:	4620      	mov	r0, r4
 800232e:	4629      	mov	r1, r5
 8002330:	f7fe faa4 	bl	800087c <__aeabi_ddiv>
 8002334:	4602      	mov	r2, r0
 8002336:	460b      	mov	r3, r1
 8002338:	ec43 2b17 	vmov	d7, r2, r3
 800233c:	eeb0 0a47 	vmov.f32	s0, s14
 8002340:	eef0 0a67 	vmov.f32	s1, s15
 8002344:	f00a ff08 	bl	800d158 <cos>
 8002348:	ec51 0b10 	vmov	r0, r1, d0
 800234c:	f04f 0200 	mov.w	r2, #0
 8002350:	4b25      	ldr	r3, [pc, #148]	; (80023e8 <_ZN4MFCCC1Eiii+0x1e0>)
 8002352:	f7fe f969 	bl	8000628 <__aeabi_dmul>
 8002356:	4602      	mov	r2, r0
 8002358:	460b      	mov	r3, r1
 800235a:	f04f 0000 	mov.w	r0, #0
 800235e:	4922      	ldr	r1, [pc, #136]	; (80023e8 <_ZN4MFCCC1Eiii+0x1e0>)
 8002360:	f7fd ffaa 	bl	80002b8 <__aeabi_dsub>
 8002364:	4602      	mov	r2, r0
 8002366:	460b      	mov	r3, r1
 8002368:	4610      	mov	r0, r2
 800236a:	4619      	mov	r1, r3
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	69da      	ldr	r2, [r3, #28]
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	18d4      	adds	r4, r2, r3
 8002376:	f7fe fc2f 	bl	8000bd8 <__aeabi_d2f>
 800237a:	4603      	mov	r3, r0
 800237c:	6023      	str	r3, [r4, #0]
  for (int i = 0; i < frame_len; i++)
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	3301      	adds	r3, #1
 8002382:	617b      	str	r3, [r7, #20]
 8002384:	e7b7      	b.n	80022f6 <_ZN4MFCCC1Eiii+0xee>

  //create mel filterbank
  fbank_filter_first = new int32_t[NUM_FBANK_BINS];
 8002386:	20a0      	movs	r0, #160	; 0xa0
 8002388:	f00a fe3f 	bl	800d00a <_Znaj>
 800238c:	4603      	mov	r3, r0
 800238e:	461a      	mov	r2, r3
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	621a      	str	r2, [r3, #32]
  fbank_filter_last = new int32_t[NUM_FBANK_BINS];;
 8002394:	20a0      	movs	r0, #160	; 0xa0
 8002396:	f00a fe38 	bl	800d00a <_Znaj>
 800239a:	4603      	mov	r3, r0
 800239c:	461a      	mov	r2, r3
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	625a      	str	r2, [r3, #36]	; 0x24
  mel_fbank = create_mel_fbank();
 80023a2:	68f8      	ldr	r0, [r7, #12]
 80023a4:	f000 f942 	bl	800262c <_ZN4MFCC16create_mel_fbankEv>
 80023a8:	4602      	mov	r2, r0
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	629a      	str	r2, [r3, #40]	; 0x28
  
  //create DCT matrix
  dct_matrix = create_dct_matrix(NUM_FBANK_BINS, num_mfcc_features);
 80023ae:	68ba      	ldr	r2, [r7, #8]
 80023b0:	2128      	movs	r1, #40	; 0x28
 80023b2:	68f8      	ldr	r0, [r7, #12]
 80023b4:	f000 f88c 	bl	80024d0 <_ZN4MFCC17create_dct_matrixEll>
 80023b8:	4602      	mov	r2, r0
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	62da      	str	r2, [r3, #44]	; 0x2c

  //initialize FFT
  rfft = new arm_rfft_fast_instance_f32;
 80023be:	2018      	movs	r0, #24
 80023c0:	f00a fe12 	bl	800cfe8 <_Znwj>
 80023c4:	4603      	mov	r3, r0
 80023c6:	461a      	mov	r2, r3
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	631a      	str	r2, [r3, #48]	; 0x30
  arm_rfft_fast_init_f32(rfft, frame_len_padded);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	4619      	mov	r1, r3
 80023d8:	4610      	mov	r0, r2
 80023da:	f006 fd9d 	bl	8008f18 <arm_rfft_fast_init_f32>

}
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	4618      	mov	r0, r3
 80023e2:	3718      	adds	r7, #24
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bdb0      	pop	{r4, r5, r7, pc}
 80023e8:	3fe00000 	.word	0x3fe00000
 80023ec:	54442d18 	.word	0x54442d18
 80023f0:	401921fb 	.word	0x401921fb

080023f4 <_ZN4MFCCD1Ev>:

MFCC::~MFCC() {
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  delete []frame;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	691b      	ldr	r3, [r3, #16]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d004      	beq.n	800240e <_ZN4MFCCD1Ev+0x1a>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	691b      	ldr	r3, [r3, #16]
 8002408:	4618      	mov	r0, r3
 800240a:	f00a fdeb 	bl	800cfe4 <_ZdaPv>
  delete [] buffer;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	695b      	ldr	r3, [r3, #20]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d004      	beq.n	8002420 <_ZN4MFCCD1Ev+0x2c>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	695b      	ldr	r3, [r3, #20]
 800241a:	4618      	mov	r0, r3
 800241c:	f00a fde2 	bl	800cfe4 <_ZdaPv>
  delete []mel_energies;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	699b      	ldr	r3, [r3, #24]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d004      	beq.n	8002432 <_ZN4MFCCD1Ev+0x3e>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	699b      	ldr	r3, [r3, #24]
 800242c:	4618      	mov	r0, r3
 800242e:	f00a fdd9 	bl	800cfe4 <_ZdaPv>
  delete []window_func;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	69db      	ldr	r3, [r3, #28]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d004      	beq.n	8002444 <_ZN4MFCCD1Ev+0x50>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	69db      	ldr	r3, [r3, #28]
 800243e:	4618      	mov	r0, r3
 8002440:	f00a fdd0 	bl	800cfe4 <_ZdaPv>
  delete []fbank_filter_first;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6a1b      	ldr	r3, [r3, #32]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d004      	beq.n	8002456 <_ZN4MFCCD1Ev+0x62>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6a1b      	ldr	r3, [r3, #32]
 8002450:	4618      	mov	r0, r3
 8002452:	f00a fdc7 	bl	800cfe4 <_ZdaPv>
  delete []fbank_filter_last;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245a:	2b00      	cmp	r3, #0
 800245c:	d004      	beq.n	8002468 <_ZN4MFCCD1Ev+0x74>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002462:	4618      	mov	r0, r3
 8002464:	f00a fdbe 	bl	800cfe4 <_ZdaPv>
  delete []dct_matrix;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800246c:	2b00      	cmp	r3, #0
 800246e:	d004      	beq.n	800247a <_ZN4MFCCD1Ev+0x86>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002474:	4618      	mov	r0, r3
 8002476:	f00a fdb5 	bl	800cfe4 <_ZdaPv>
  delete rfft;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247e:	2b00      	cmp	r3, #0
 8002480:	d003      	beq.n	800248a <_ZN4MFCCD1Ev+0x96>
 8002482:	2118      	movs	r1, #24
 8002484:	4618      	mov	r0, r3
 8002486:	f00a fdab 	bl	800cfe0 <_ZdlPvj>
  for(int i=0;i<NUM_FBANK_BINS;i++)
 800248a:	2300      	movs	r3, #0
 800248c:	60fb      	str	r3, [r7, #12]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2b27      	cmp	r3, #39	; 0x27
 8002492:	dc0f      	bgt.n	80024b4 <_ZN4MFCCD1Ev+0xc0>
    delete mel_fbank[i];
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	4413      	add	r3, r2
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d003      	beq.n	80024ac <_ZN4MFCCD1Ev+0xb8>
 80024a4:	2104      	movs	r1, #4
 80024a6:	4618      	mov	r0, r3
 80024a8:	f00a fd9a 	bl	800cfe0 <_ZdlPvj>
  for(int i=0;i<NUM_FBANK_BINS;i++)
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	3301      	adds	r3, #1
 80024b0:	60fb      	str	r3, [r7, #12]
 80024b2:	e7ec      	b.n	800248e <_ZN4MFCCD1Ev+0x9a>
  delete mel_fbank;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d003      	beq.n	80024c4 <_ZN4MFCCD1Ev+0xd0>
 80024bc:	2104      	movs	r1, #4
 80024be:	4618      	mov	r0, r3
 80024c0:	f00a fd8e 	bl	800cfe0 <_ZdlPvj>
}
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	4618      	mov	r0, r3
 80024c8:	3710      	adds	r7, #16
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
	...

080024d0 <_ZN4MFCC17create_dct_matrixEll>:

float * MFCC::create_dct_matrix(int32_t input_length, int32_t coefficient_count) {
 80024d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80024d4:	b08a      	sub	sp, #40	; 0x28
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	60f8      	str	r0, [r7, #12]
 80024da:	60b9      	str	r1, [r7, #8]
 80024dc:	607a      	str	r2, [r7, #4]
  int32_t k, n;
  float * M = new float[input_length*coefficient_count];
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	fb02 f303 	mul.w	r3, r2, r3
 80024e6:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d201      	bcs.n	80024f2 <_ZN4MFCC17create_dct_matrixEll+0x22>
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	e001      	b.n	80024f6 <_ZN4MFCC17create_dct_matrixEll+0x26>
 80024f2:	f04f 33ff 	mov.w	r3, #4294967295
 80024f6:	4618      	mov	r0, r3
 80024f8:	f00a fd87 	bl	800d00a <_Znaj>
 80024fc:	4603      	mov	r3, r0
 80024fe:	61fb      	str	r3, [r7, #28]
  float normalizer;
  arm_sqrt_f32(2.0/(float)input_length,&normalizer);
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	ee07 3a90 	vmov	s15, r3
 8002506:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800250a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800250e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002512:	edc7 7a06 	vstr	s15, [r7, #24]
 8002516:	f107 0310 	add.w	r3, r7, #16
 800251a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 800251c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002520:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002528:	db09      	blt.n	800253e <_ZN4MFCC17create_dct_matrixEll+0x6e>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 800252a:	ed97 0a06 	vldr	s0, [r7, #24]
 800252e:	f00a ffb7 	bl	800d4a0 <sqrtf>
 8002532:	eef0 7a40 	vmov.f32	s15, s0
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	edc3 7a00 	vstr	s15, [r3]
#endif

      return (ARM_MATH_SUCCESS);
 800253c:	e004      	b.n	8002548 <_ZN4MFCC17create_dct_matrixEll+0x78>
    }
    else
    {
      *pOut = 0.0f;
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	f04f 0200 	mov.w	r2, #0
 8002544:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8002546:	bf00      	nop
  for (k = 0; k < coefficient_count; k++) {
 8002548:	2300      	movs	r3, #0
 800254a:	627b      	str	r3, [r7, #36]	; 0x24
 800254c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	429a      	cmp	r2, r3
 8002552:	da5d      	bge.n	8002610 <_ZN4MFCC17create_dct_matrixEll+0x140>
    for (n = 0; n < input_length; n++) {
 8002554:	2300      	movs	r3, #0
 8002556:	623b      	str	r3, [r7, #32]
 8002558:	6a3a      	ldr	r2, [r7, #32]
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	429a      	cmp	r2, r3
 800255e:	da53      	bge.n	8002608 <_ZN4MFCC17create_dct_matrixEll+0x138>
      M[k*input_length+n] = normalizer * cos( ((double)M_PI)/input_length * (n + 0.5) * k );
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	4618      	mov	r0, r3
 8002564:	f7fe f808 	bl	8000578 <__aeabi_f2d>
 8002568:	4604      	mov	r4, r0
 800256a:	460d      	mov	r5, r1
 800256c:	68b8      	ldr	r0, [r7, #8]
 800256e:	f7fd fff1 	bl	8000554 <__aeabi_i2d>
 8002572:	4602      	mov	r2, r0
 8002574:	460b      	mov	r3, r1
 8002576:	a12b      	add	r1, pc, #172	; (adr r1, 8002624 <_ZN4MFCC17create_dct_matrixEll+0x154>)
 8002578:	e9d1 0100 	ldrd	r0, r1, [r1]
 800257c:	f7fe f97e 	bl	800087c <__aeabi_ddiv>
 8002580:	4602      	mov	r2, r0
 8002582:	460b      	mov	r3, r1
 8002584:	4690      	mov	r8, r2
 8002586:	4699      	mov	r9, r3
 8002588:	6a38      	ldr	r0, [r7, #32]
 800258a:	f7fd ffe3 	bl	8000554 <__aeabi_i2d>
 800258e:	f04f 0200 	mov.w	r2, #0
 8002592:	4b23      	ldr	r3, [pc, #140]	; (8002620 <_ZN4MFCC17create_dct_matrixEll+0x150>)
 8002594:	f7fd fe92 	bl	80002bc <__adddf3>
 8002598:	4602      	mov	r2, r0
 800259a:	460b      	mov	r3, r1
 800259c:	4640      	mov	r0, r8
 800259e:	4649      	mov	r1, r9
 80025a0:	f7fe f842 	bl	8000628 <__aeabi_dmul>
 80025a4:	4602      	mov	r2, r0
 80025a6:	460b      	mov	r3, r1
 80025a8:	4690      	mov	r8, r2
 80025aa:	4699      	mov	r9, r3
 80025ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80025ae:	f7fd ffd1 	bl	8000554 <__aeabi_i2d>
 80025b2:	4602      	mov	r2, r0
 80025b4:	460b      	mov	r3, r1
 80025b6:	4640      	mov	r0, r8
 80025b8:	4649      	mov	r1, r9
 80025ba:	f7fe f835 	bl	8000628 <__aeabi_dmul>
 80025be:	4602      	mov	r2, r0
 80025c0:	460b      	mov	r3, r1
 80025c2:	ec43 2b17 	vmov	d7, r2, r3
 80025c6:	eeb0 0a47 	vmov.f32	s0, s14
 80025ca:	eef0 0a67 	vmov.f32	s1, s15
 80025ce:	f00a fdc3 	bl	800d158 <cos>
 80025d2:	ec53 2b10 	vmov	r2, r3, d0
 80025d6:	4620      	mov	r0, r4
 80025d8:	4629      	mov	r1, r5
 80025da:	f7fe f825 	bl	8000628 <__aeabi_dmul>
 80025de:	4602      	mov	r2, r0
 80025e0:	460b      	mov	r3, r1
 80025e2:	4610      	mov	r0, r2
 80025e4:	4619      	mov	r1, r3
 80025e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e8:	68ba      	ldr	r2, [r7, #8]
 80025ea:	fb02 f203 	mul.w	r2, r2, r3
 80025ee:	6a3b      	ldr	r3, [r7, #32]
 80025f0:	4413      	add	r3, r2
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	69fa      	ldr	r2, [r7, #28]
 80025f6:	18d4      	adds	r4, r2, r3
 80025f8:	f7fe faee 	bl	8000bd8 <__aeabi_d2f>
 80025fc:	4603      	mov	r3, r0
 80025fe:	6023      	str	r3, [r4, #0]
    for (n = 0; n < input_length; n++) {
 8002600:	6a3b      	ldr	r3, [r7, #32]
 8002602:	3301      	adds	r3, #1
 8002604:	623b      	str	r3, [r7, #32]
 8002606:	e7a7      	b.n	8002558 <_ZN4MFCC17create_dct_matrixEll+0x88>
  for (k = 0; k < coefficient_count; k++) {
 8002608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260a:	3301      	adds	r3, #1
 800260c:	627b      	str	r3, [r7, #36]	; 0x24
 800260e:	e79d      	b.n	800254c <_ZN4MFCC17create_dct_matrixEll+0x7c>
    }
  }
  return M;
 8002610:	69fb      	ldr	r3, [r7, #28]
}
 8002612:	4618      	mov	r0, r3
 8002614:	3728      	adds	r7, #40	; 0x28
 8002616:	46bd      	mov	sp, r7
 8002618:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800261c:	f3af 8000 	nop.w
 8002620:	3fe00000 	.word	0x3fe00000
 8002624:	54442d18 	.word	0x54442d18
 8002628:	400921fb 	.word	0x400921fb

0800262c <_ZN4MFCC16create_mel_fbankEv>:

float ** MFCC::create_mel_fbank() {
 800262c:	b590      	push	{r4, r7, lr}
 800262e:	b095      	sub	sp, #84	; 0x54
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]

  int32_t bin, i;

  int32_t num_fft_bins = frame_len_padded/2;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	0fda      	lsrs	r2, r3, #31
 800263a:	4413      	add	r3, r2
 800263c:	105b      	asrs	r3, r3, #1
 800263e:	637b      	str	r3, [r7, #52]	; 0x34
  float fft_bin_width = ((float)SAMP_FREQ) / frame_len_padded;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	ee07 3a90 	vmov	s15, r3
 8002648:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800264c:	eddf 6a92 	vldr	s13, [pc, #584]	; 8002898 <_ZN4MFCC16create_mel_fbankEv+0x26c>
 8002650:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002654:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
  float mel_low_freq = MelScale(MEL_LOW_FREQ);
 8002658:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 800265c:	f7ff fd7e 	bl	800215c <_ZN4MFCC8MelScaleEf>
 8002660:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
  float mel_high_freq = MelScale(MEL_HIGH_FREQ); 
 8002664:	ed9f 0a8d 	vldr	s0, [pc, #564]	; 800289c <_ZN4MFCC16create_mel_fbankEv+0x270>
 8002668:	f7ff fd78 	bl	800215c <_ZN4MFCC8MelScaleEf>
 800266c:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
  float mel_freq_delta = (mel_high_freq - mel_low_freq) / (NUM_FBANK_BINS+1);
 8002670:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002674:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002678:	ee37 7a67 	vsub.f32	s14, s14, s15
 800267c:	eddf 6a88 	vldr	s13, [pc, #544]	; 80028a0 <_ZN4MFCC16create_mel_fbankEv+0x274>
 8002680:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002684:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

  float *this_bin = new float[num_fft_bins];
 8002688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800268a:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 800268e:	4293      	cmp	r3, r2
 8002690:	d201      	bcs.n	8002696 <_ZN4MFCC16create_mel_fbankEv+0x6a>
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	e001      	b.n	800269a <_ZN4MFCC16create_mel_fbankEv+0x6e>
 8002696:	f04f 33ff 	mov.w	r3, #4294967295
 800269a:	4618      	mov	r0, r3
 800269c:	f00a fcb5 	bl	800d00a <_Znaj>
 80026a0:	4603      	mov	r3, r0
 80026a2:	623b      	str	r3, [r7, #32]

  float ** mel_fbank =  new float*[NUM_FBANK_BINS];
 80026a4:	20a0      	movs	r0, #160	; 0xa0
 80026a6:	f00a fcb0 	bl	800d00a <_Znaj>
 80026aa:	4603      	mov	r3, r0
 80026ac:	61fb      	str	r3, [r7, #28]

  for (bin = 0; bin < NUM_FBANK_BINS; bin++) {
 80026ae:	2300      	movs	r3, #0
 80026b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026b4:	2b27      	cmp	r3, #39	; 0x27
 80026b6:	f300 80e4 	bgt.w	8002882 <_ZN4MFCC16create_mel_fbankEv+0x256>

    float left_mel = mel_low_freq + bin * mel_freq_delta;
 80026ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026bc:	ee07 3a90 	vmov	s15, r3
 80026c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026c4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80026c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026cc:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80026d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026d4:	edc7 7a06 	vstr	s15, [r7, #24]
    float center_mel = mel_low_freq + (bin + 1) * mel_freq_delta;
 80026d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026da:	3301      	adds	r3, #1
 80026dc:	ee07 3a90 	vmov	s15, r3
 80026e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026e4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80026e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026ec:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80026f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026f4:	edc7 7a05 	vstr	s15, [r7, #20]
    float right_mel = mel_low_freq + (bin + 2) * mel_freq_delta;
 80026f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026fa:	3302      	adds	r3, #2
 80026fc:	ee07 3a90 	vmov	s15, r3
 8002700:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002704:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002708:	ee67 7a27 	vmul.f32	s15, s14, s15
 800270c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8002710:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002714:	edc7 7a04 	vstr	s15, [r7, #16]

    int32_t first_index = -1, last_index = -1;
 8002718:	f04f 33ff 	mov.w	r3, #4294967295
 800271c:	647b      	str	r3, [r7, #68]	; 0x44
 800271e:	f04f 33ff 	mov.w	r3, #4294967295
 8002722:	643b      	str	r3, [r7, #64]	; 0x40

    for (i = 0; i < num_fft_bins; i++) {
 8002724:	2300      	movs	r3, #0
 8002726:	64bb      	str	r3, [r7, #72]	; 0x48
 8002728:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800272a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800272c:	429a      	cmp	r2, r3
 800272e:	da65      	bge.n	80027fc <_ZN4MFCC16create_mel_fbankEv+0x1d0>

      float freq = (fft_bin_width * i);  // center freq of this fft bin.
 8002730:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002732:	ee07 3a90 	vmov	s15, r3
 8002736:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800273a:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800273e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002742:	edc7 7a03 	vstr	s15, [r7, #12]
      float mel = MelScale(freq);
 8002746:	ed97 0a03 	vldr	s0, [r7, #12]
 800274a:	f7ff fd07 	bl	800215c <_ZN4MFCC8MelScaleEf>
 800274e:	ed87 0a02 	vstr	s0, [r7, #8]
      this_bin[i] = 0.0;
 8002752:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	6a3a      	ldr	r2, [r7, #32]
 8002758:	4413      	add	r3, r2
 800275a:	f04f 0200 	mov.w	r2, #0
 800275e:	601a      	str	r2, [r3, #0]

      if (mel > left_mel && mel < right_mel) {
 8002760:	ed97 7a02 	vldr	s14, [r7, #8]
 8002764:	edd7 7a06 	vldr	s15, [r7, #24]
 8002768:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800276c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002770:	dd40      	ble.n	80027f4 <_ZN4MFCC16create_mel_fbankEv+0x1c8>
 8002772:	ed97 7a02 	vldr	s14, [r7, #8]
 8002776:	edd7 7a04 	vldr	s15, [r7, #16]
 800277a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800277e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002782:	d537      	bpl.n	80027f4 <_ZN4MFCC16create_mel_fbankEv+0x1c8>
        float weight;
        if (mel <= center_mel) {
 8002784:	ed97 7a02 	vldr	s14, [r7, #8]
 8002788:	edd7 7a05 	vldr	s15, [r7, #20]
 800278c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002794:	d810      	bhi.n	80027b8 <_ZN4MFCC16create_mel_fbankEv+0x18c>
          weight = (mel - left_mel) / (center_mel - left_mel);
 8002796:	ed97 7a02 	vldr	s14, [r7, #8]
 800279a:	edd7 7a06 	vldr	s15, [r7, #24]
 800279e:	ee77 6a67 	vsub.f32	s13, s14, s15
 80027a2:	ed97 7a05 	vldr	s14, [r7, #20]
 80027a6:	edd7 7a06 	vldr	s15, [r7, #24]
 80027aa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80027ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027b2:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
 80027b6:	e00f      	b.n	80027d8 <_ZN4MFCC16create_mel_fbankEv+0x1ac>
        } else {
          weight = (right_mel-mel) / (right_mel-center_mel);
 80027b8:	ed97 7a04 	vldr	s14, [r7, #16]
 80027bc:	edd7 7a02 	vldr	s15, [r7, #8]
 80027c0:	ee77 6a67 	vsub.f32	s13, s14, s15
 80027c4:	ed97 7a04 	vldr	s14, [r7, #16]
 80027c8:	edd7 7a05 	vldr	s15, [r7, #20]
 80027cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80027d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027d4:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        }
        this_bin[i] = weight;
 80027d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	6a3a      	ldr	r2, [r7, #32]
 80027de:	4413      	add	r3, r2
 80027e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80027e2:	601a      	str	r2, [r3, #0]
        if (first_index == -1)
 80027e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027ea:	d101      	bne.n	80027f0 <_ZN4MFCC16create_mel_fbankEv+0x1c4>
          first_index = i;
 80027ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027ee:	647b      	str	r3, [r7, #68]	; 0x44
        last_index = i;
 80027f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027f2:	643b      	str	r3, [r7, #64]	; 0x40
    for (i = 0; i < num_fft_bins; i++) {
 80027f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027f6:	3301      	adds	r3, #1
 80027f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80027fa:	e795      	b.n	8002728 <_ZN4MFCC16create_mel_fbankEv+0xfc>
      }
    }

    fbank_filter_first[bin] = first_index;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6a1a      	ldr	r2, [r3, #32]
 8002800:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	4413      	add	r3, r2
 8002806:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002808:	601a      	str	r2, [r3, #0]
    fbank_filter_last[bin] = last_index;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800280e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	4413      	add	r3, r2
 8002814:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002816:	601a      	str	r2, [r3, #0]
    mel_fbank[bin] = new float[last_index-first_index+1]; 
 8002818:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800281a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	3301      	adds	r3, #1
 8002820:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 8002824:	4293      	cmp	r3, r2
 8002826:	d201      	bcs.n	800282c <_ZN4MFCC16create_mel_fbankEv+0x200>
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	e001      	b.n	8002830 <_ZN4MFCC16create_mel_fbankEv+0x204>
 800282c:	f04f 33ff 	mov.w	r3, #4294967295
 8002830:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002832:	0092      	lsls	r2, r2, #2
 8002834:	69f9      	ldr	r1, [r7, #28]
 8002836:	188c      	adds	r4, r1, r2
 8002838:	4618      	mov	r0, r3
 800283a:	f00a fbe6 	bl	800d00a <_Znaj>
 800283e:	4603      	mov	r3, r0
 8002840:	6023      	str	r3, [r4, #0]

    int32_t j = 0;
 8002842:	2300      	movs	r3, #0
 8002844:	63bb      	str	r3, [r7, #56]	; 0x38
    //copy the part we care about
    for (i = first_index; i <= last_index; i++) {
 8002846:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002848:	64bb      	str	r3, [r7, #72]	; 0x48
 800284a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800284c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800284e:	429a      	cmp	r2, r3
 8002850:	dc13      	bgt.n	800287a <_ZN4MFCC16create_mel_fbankEv+0x24e>
      mel_fbank[bin][j++] = this_bin[i];
 8002852:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	6a3a      	ldr	r2, [r7, #32]
 8002858:	441a      	add	r2, r3
 800285a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	69f9      	ldr	r1, [r7, #28]
 8002860:	440b      	add	r3, r1
 8002862:	6819      	ldr	r1, [r3, #0]
 8002864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002866:	1c58      	adds	r0, r3, #1
 8002868:	63b8      	str	r0, [r7, #56]	; 0x38
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	440b      	add	r3, r1
 800286e:	6812      	ldr	r2, [r2, #0]
 8002870:	601a      	str	r2, [r3, #0]
    for (i = first_index; i <= last_index; i++) {
 8002872:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002874:	3301      	adds	r3, #1
 8002876:	64bb      	str	r3, [r7, #72]	; 0x48
 8002878:	e7e7      	b.n	800284a <_ZN4MFCC16create_mel_fbankEv+0x21e>
  for (bin = 0; bin < NUM_FBANK_BINS; bin++) {
 800287a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800287c:	3301      	adds	r3, #1
 800287e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002880:	e717      	b.n	80026b2 <_ZN4MFCC16create_mel_fbankEv+0x86>
    }
  }
  delete []this_bin;
 8002882:	6a3b      	ldr	r3, [r7, #32]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d002      	beq.n	800288e <_ZN4MFCC16create_mel_fbankEv+0x262>
 8002888:	6a38      	ldr	r0, [r7, #32]
 800288a:	f00a fbab 	bl	800cfe4 <_ZdaPv>
  return mel_fbank;
 800288e:	69fb      	ldr	r3, [r7, #28]
}
 8002890:	4618      	mov	r0, r3
 8002892:	3754      	adds	r7, #84	; 0x54
 8002894:	46bd      	mov	sp, r7
 8002896:	bd90      	pop	{r4, r7, pc}
 8002898:	467a0000 	.word	0x467a0000
 800289c:	457a0000 	.word	0x457a0000
 80028a0:	42240000 	.word	0x42240000

080028a4 <_ZN4MFCC12mfcc_computeEPKsPa>:

void MFCC::mfcc_compute(const int16_t * audio_data, q7_t* mfcc_out) {
 80028a4:	b590      	push	{r4, r7, lr}
 80028a6:	b095      	sub	sp, #84	; 0x54
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	60b9      	str	r1, [r7, #8]
 80028ae:	607a      	str	r2, [r7, #4]

  int32_t i, j, bin;

  //TensorFlow way of normalizing .wav data to (-1,1)
  for (i = 0; i < frame_len; i++) {
 80028b0:	2300      	movs	r3, #0
 80028b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80028ba:	429a      	cmp	r2, r3
 80028bc:	da18      	bge.n	80028f0 <_ZN4MFCC12mfcc_computeEPKsPa+0x4c>
    frame[i] = (float)audio_data[i]/(1<<15); 
 80028be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028c0:	005b      	lsls	r3, r3, #1
 80028c2:	68ba      	ldr	r2, [r7, #8]
 80028c4:	4413      	add	r3, r2
 80028c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028ca:	ee07 3a90 	vmov	s15, r3
 80028ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	691a      	ldr	r2, [r3, #16]
 80028d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	4413      	add	r3, r2
 80028dc:	eddf 6aac 	vldr	s13, [pc, #688]	; 8002b90 <_ZN4MFCC12mfcc_computeEPKsPa+0x2ec>
 80028e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80028e4:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < frame_len; i++) {
 80028e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028ea:	3301      	adds	r3, #1
 80028ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80028ee:	e7e1      	b.n	80028b4 <_ZN4MFCC12mfcc_computeEPKsPa+0x10>
  }
  //Fill up remaining with zeros
  memset(&frame[frame_len], 0, sizeof(float) * (frame_len_padded-frame_len));
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	691a      	ldr	r2, [r3, #16]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	18d0      	adds	r0, r2, r3
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	689a      	ldr	r2, [r3, #8]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	461a      	mov	r2, r3
 800290a:	2100      	movs	r1, #0
 800290c:	f00c ff6a 	bl	800f7e4 <memset>

  for (i = 0; i < frame_len; i++) {
 8002910:	2300      	movs	r3, #0
 8002912:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800291a:	429a      	cmp	r2, r3
 800291c:	da1a      	bge.n	8002954 <_ZN4MFCC12mfcc_computeEPKsPa+0xb0>
    frame[i] *= window_func[i];
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	691a      	ldr	r2, [r3, #16]
 8002922:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	4413      	add	r3, r2
 8002928:	ed93 7a00 	vldr	s14, [r3]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	69da      	ldr	r2, [r3, #28]
 8002930:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	4413      	add	r3, r2
 8002936:	edd3 7a00 	vldr	s15, [r3]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	691a      	ldr	r2, [r3, #16]
 800293e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	4413      	add	r3, r2
 8002944:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002948:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < frame_len; i++) {
 800294c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800294e:	3301      	adds	r3, #1
 8002950:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002952:	e7df      	b.n	8002914 <_ZN4MFCC12mfcc_computeEPKsPa+0x70>
  }

  //Compute FFT
  arm_rfft_fast_f32(rfft, frame, buffer, 0);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6919      	ldr	r1, [r3, #16]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	695a      	ldr	r2, [r3, #20]
 8002960:	2300      	movs	r3, #0
 8002962:	f006 f979 	bl	8008c58 <arm_rfft_fast_f32>

  //Convert to power spectrum
  //frame is stored as [real0, realN/2-1, real1, im1, real2, im2, ...]
  int32_t half_dim = frame_len_padded/2;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	0fda      	lsrs	r2, r3, #31
 800296c:	4413      	add	r3, r2
 800296e:	105b      	asrs	r3, r3, #1
 8002970:	63bb      	str	r3, [r7, #56]	; 0x38
  float first_energy = buffer[0] * buffer[0],
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	695b      	ldr	r3, [r3, #20]
 8002976:	ed93 7a00 	vldr	s14, [r3]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	695b      	ldr	r3, [r3, #20]
 800297e:	edd3 7a00 	vldr	s15, [r3]
 8002982:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002986:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        last_energy =  buffer[1] * buffer[1];  // handle this special case
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	695b      	ldr	r3, [r3, #20]
 800298e:	3304      	adds	r3, #4
 8002990:	ed93 7a00 	vldr	s14, [r3]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	695b      	ldr	r3, [r3, #20]
 8002998:	3304      	adds	r3, #4
 800299a:	edd3 7a00 	vldr	s15, [r3]
 800299e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029a2:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
  for (i = 1; i < half_dim; i++) {
 80029a6:	2301      	movs	r3, #1
 80029a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80029ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029ae:	429a      	cmp	r2, r3
 80029b0:	da23      	bge.n	80029fa <_ZN4MFCC12mfcc_computeEPKsPa+0x156>
    float real = buffer[i*2], im = buffer[i*2 + 1];
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	695a      	ldr	r2, [r3, #20]
 80029b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029b8:	00db      	lsls	r3, r3, #3
 80029ba:	4413      	add	r3, r2
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	695a      	ldr	r2, [r3, #20]
 80029c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029c6:	00db      	lsls	r3, r3, #3
 80029c8:	3304      	adds	r3, #4
 80029ca:	4413      	add	r3, r2
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	62bb      	str	r3, [r7, #40]	; 0x28
    buffer[i] = real*real + im*im;
 80029d0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80029d4:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80029d8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80029dc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	695a      	ldr	r2, [r3, #20]
 80029e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	4413      	add	r3, r2
 80029ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029ee:	edc3 7a00 	vstr	s15, [r3]
  for (i = 1; i < half_dim; i++) {
 80029f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029f4:	3301      	adds	r3, #1
 80029f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029f8:	e7d7      	b.n	80029aa <_ZN4MFCC12mfcc_computeEPKsPa+0x106>
  }
  buffer[0] = first_energy;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	695b      	ldr	r3, [r3, #20]
 80029fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a00:	601a      	str	r2, [r3, #0]
  buffer[half_dim] = last_energy;  
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	695a      	ldr	r2, [r3, #20]
 8002a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	4413      	add	r3, r2
 8002a0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a0e:	601a      	str	r2, [r3, #0]
 
  float sqrt_data;
  //Apply mel filterbanks
  for (bin = 0; bin < NUM_FBANK_BINS; bin++) {
 8002a10:	2300      	movs	r3, #0
 8002a12:	647b      	str	r3, [r7, #68]	; 0x44
 8002a14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a16:	2b27      	cmp	r3, #39	; 0x27
 8002a18:	dc6d      	bgt.n	8002af6 <_ZN4MFCC12mfcc_computeEPKsPa+0x252>
    j = 0;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	64bb      	str	r3, [r7, #72]	; 0x48
    float mel_energy = 0;
 8002a1e:	f04f 0300 	mov.w	r3, #0
 8002a22:	643b      	str	r3, [r7, #64]	; 0x40
    int32_t first_index = fbank_filter_first[bin];
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	6a1a      	ldr	r2, [r3, #32]
 8002a28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	4413      	add	r3, r2
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	627b      	str	r3, [r7, #36]	; 0x24
    int32_t last_index = fbank_filter_last[bin];
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	4413      	add	r3, r2
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	623b      	str	r3, [r7, #32]
    for (i = first_index; i <= last_index; i++) {
 8002a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a44:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a46:	6a3b      	ldr	r3, [r7, #32]
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	dc3a      	bgt.n	8002ac2 <_ZN4MFCC12mfcc_computeEPKsPa+0x21e>
      arm_sqrt_f32(buffer[i],&sqrt_data);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	695a      	ldr	r2, [r3, #20]
 8002a50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	4413      	add	r3, r2
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	61fb      	str	r3, [r7, #28]
 8002a5a:	f107 0314 	add.w	r3, r7, #20
 8002a5e:	61bb      	str	r3, [r7, #24]
    if (in >= 0.0f)
 8002a60:	edd7 7a07 	vldr	s15, [r7, #28]
 8002a64:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a6c:	db09      	blt.n	8002a82 <_ZN4MFCC12mfcc_computeEPKsPa+0x1de>
      *pOut = sqrtf(in);
 8002a6e:	ed97 0a07 	vldr	s0, [r7, #28]
 8002a72:	f00a fd15 	bl	800d4a0 <sqrtf>
 8002a76:	eef0 7a40 	vmov.f32	s15, s0
 8002a7a:	69bb      	ldr	r3, [r7, #24]
 8002a7c:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 8002a80:	e004      	b.n	8002a8c <_ZN4MFCC12mfcc_computeEPKsPa+0x1e8>
      *pOut = 0.0f;
 8002a82:	69bb      	ldr	r3, [r7, #24]
 8002a84:	f04f 0200 	mov.w	r2, #0
 8002a88:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8002a8a:	bf00      	nop
      mel_energy += (sqrt_data) * mel_fbank[bin][j++];
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	4413      	add	r3, r2
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a9a:	1c59      	adds	r1, r3, #1
 8002a9c:	64b9      	str	r1, [r7, #72]	; 0x48
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	4413      	add	r3, r2
 8002aa2:	ed93 7a00 	vldr	s14, [r3]
 8002aa6:	edd7 7a05 	vldr	s15, [r7, #20]
 8002aaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002aae:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002ab2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ab6:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    for (i = first_index; i <= last_index; i++) {
 8002aba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002abc:	3301      	adds	r3, #1
 8002abe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ac0:	e7c0      	b.n	8002a44 <_ZN4MFCC12mfcc_computeEPKsPa+0x1a0>
    }
    mel_energies[bin] = mel_energy;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	699a      	ldr	r2, [r3, #24]
 8002ac6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	4413      	add	r3, r2
 8002acc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002ace:	601a      	str	r2, [r3, #0]

    //avoid log of zero
    if (mel_energy == 0.0)
 8002ad0:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002ad4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002ad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002adc:	d107      	bne.n	8002aee <_ZN4MFCC12mfcc_computeEPKsPa+0x24a>
      mel_energies[bin] = FLT_MIN;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	699a      	ldr	r2, [r3, #24]
 8002ae2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	4413      	add	r3, r2
 8002ae8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002aec:	601a      	str	r2, [r3, #0]
  for (bin = 0; bin < NUM_FBANK_BINS; bin++) {
 8002aee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002af0:	3301      	adds	r3, #1
 8002af2:	647b      	str	r3, [r7, #68]	; 0x44
 8002af4:	e78e      	b.n	8002a14 <_ZN4MFCC12mfcc_computeEPKsPa+0x170>
  }

  //Take log
  for (bin = 0; bin < NUM_FBANK_BINS; bin++)
 8002af6:	2300      	movs	r3, #0
 8002af8:	647b      	str	r3, [r7, #68]	; 0x44
 8002afa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002afc:	2b27      	cmp	r3, #39	; 0x27
 8002afe:	dc17      	bgt.n	8002b30 <_ZN4MFCC12mfcc_computeEPKsPa+0x28c>
    mel_energies[bin] = logf(mel_energies[bin]);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	699a      	ldr	r2, [r3, #24]
 8002b04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	4413      	add	r3, r2
 8002b0a:	edd3 7a00 	vldr	s15, [r3]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	699a      	ldr	r2, [r3, #24]
 8002b12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	18d4      	adds	r4, r2, r3
 8002b18:	eeb0 0a67 	vmov.f32	s0, s15
 8002b1c:	f00a fc8a 	bl	800d434 <logf>
 8002b20:	eef0 7a40 	vmov.f32	s15, s0
 8002b24:	edc4 7a00 	vstr	s15, [r4]
  for (bin = 0; bin < NUM_FBANK_BINS; bin++)
 8002b28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	647b      	str	r3, [r7, #68]	; 0x44
 8002b2e:	e7e4      	b.n	8002afa <_ZN4MFCC12mfcc_computeEPKsPa+0x256>

  //Take DCT. Uses matrix mul.
  for (i = 0; i < num_mfcc_features; i++) {
 8002b30:	2300      	movs	r3, #0
 8002b32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	da71      	bge.n	8002c22 <_ZN4MFCC12mfcc_computeEPKsPa+0x37e>
    float sum = 0.0;
 8002b3e:	f04f 0300 	mov.w	r3, #0
 8002b42:	63fb      	str	r3, [r7, #60]	; 0x3c
    for (j = 0; j < NUM_FBANK_BINS; j++) {
 8002b44:	2300      	movs	r3, #0
 8002b46:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b4a:	2b27      	cmp	r3, #39	; 0x27
 8002b4c:	dc26      	bgt.n	8002b9c <_ZN4MFCC12mfcc_computeEPKsPa+0x2f8>
      sum += dct_matrix[i*NUM_FBANK_BINS+j] * mel_energies[j];
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b52:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b54:	4613      	mov	r3, r2
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	4413      	add	r3, r2
 8002b5a:	00db      	lsls	r3, r3, #3
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b60:	4413      	add	r3, r2
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	440b      	add	r3, r1
 8002b66:	ed93 7a00 	vldr	s14, [r3]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	699a      	ldr	r2, [r3, #24]
 8002b6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	4413      	add	r3, r2
 8002b74:	edd3 7a00 	vldr	s15, [r3]
 8002b78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b7c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002b80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b84:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    for (j = 0; j < NUM_FBANK_BINS; j++) {
 8002b88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b8e:	e7db      	b.n	8002b48 <_ZN4MFCC12mfcc_computeEPKsPa+0x2a4>
 8002b90:	47000000 	.word	0x47000000
 8002b94:	42fe0000 	.word	0x42fe0000
 8002b98:	c3000000 	.word	0xc3000000
    }

    //Input is Qx.mfcc_dec_bits (from quantization step)
    sum *= (0x1<<mfcc_dec_bits);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba6:	ee07 3a90 	vmov	s15, r3
 8002baa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bae:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002bb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bb6:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    sum = round(sum); 
 8002bba:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 8002bbe:	f7ff fabc 	bl	800213a <_ZSt5roundf>
 8002bc2:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
    if(sum >= 127)
 8002bc6:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002bca:	ed1f 7a0e 	vldr	s14, [pc, #-56]	; 8002b94 <_ZN4MFCC12mfcc_computeEPKsPa+0x2f0>
 8002bce:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bd6:	db05      	blt.n	8002be4 <_ZN4MFCC12mfcc_computeEPKsPa+0x340>
      mfcc_out[i] = 127;
 8002bd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	4413      	add	r3, r2
 8002bde:	227f      	movs	r2, #127	; 0x7f
 8002be0:	701a      	strb	r2, [r3, #0]
 8002be2:	e01a      	b.n	8002c1a <_ZN4MFCC12mfcc_computeEPKsPa+0x376>
    else if(sum <= -128)
 8002be4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002be8:	ed1f 7a15 	vldr	s14, [pc, #-84]	; 8002b98 <_ZN4MFCC12mfcc_computeEPKsPa+0x2f4>
 8002bec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bf4:	d805      	bhi.n	8002c02 <_ZN4MFCC12mfcc_computeEPKsPa+0x35e>
      mfcc_out[i] = -128;
 8002bf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	4413      	add	r3, r2
 8002bfc:	2280      	movs	r2, #128	; 0x80
 8002bfe:	701a      	strb	r2, [r3, #0]
 8002c00:	e00b      	b.n	8002c1a <_ZN4MFCC12mfcc_computeEPKsPa+0x376>
    else
      mfcc_out[i] = sum; 
 8002c02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	4413      	add	r3, r2
 8002c08:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002c0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c10:	edc7 7a00 	vstr	s15, [r7]
 8002c14:	683a      	ldr	r2, [r7, #0]
 8002c16:	b252      	sxtb	r2, r2
 8002c18:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < num_mfcc_features; i++) {
 8002c1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c1c:	3301      	adds	r3, #1
 8002c1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c20:	e788      	b.n	8002b34 <_ZN4MFCC12mfcc_computeEPKsPa+0x290>
  }

}
 8002c22:	bf00      	nop
 8002c24:	3754      	adds	r7, #84	; 0x54
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd90      	pop	{r4, r7, pc}
 8002c2a:	bf00      	nop

08002c2c <_ZN2NND1Ev>:
 * limitations under the License.
 */

#include "nn.h"

NN::~NN() {
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	4a04      	ldr	r2, [pc, #16]	; (8002c48 <_ZN2NND1Ev+0x1c>)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	601a      	str	r2, [r3, #0]
}
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr
 8002c48:	0801598c 	.word	0x0801598c

08002c4c <_ZN2NN13get_frame_lenEv>:

int NN::get_frame_len() {
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  return frame_len;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	685b      	ldr	r3, [r3, #4]
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <_ZN2NN15get_frame_shiftEv>:

int NN::get_frame_shift() {
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  return frame_shift;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	689b      	ldr	r3, [r3, #8]
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	370c      	adds	r7, #12
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr

08002c7c <_ZN2NN21get_num_mfcc_featuresEv>:

int NN::get_num_mfcc_features() {
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  return num_mfcc_features;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	68db      	ldr	r3, [r3, #12]
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr

08002c94 <_ZN2NN14get_num_framesEv>:

int NN::get_num_frames() {
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  return num_frames;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	691b      	ldr	r3, [r3, #16]
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr

08002cac <_ZN2NN19get_num_out_classesEv>:

int NN::get_num_out_classes() {
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  return num_out_classes;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	695b      	ldr	r3, [r3, #20]
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	370c      	adds	r7, #12
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr

08002cc4 <_ZN2NN15get_in_dec_bitsEv>:

int NN::get_in_dec_bits() {
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  return in_dec_bits;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	699b      	ldr	r3, [r3, #24]
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	370c      	adds	r7, #12
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr

08002cdc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	607b      	str	r3, [r7, #4]
 8002ce6:	4b10      	ldr	r3, [pc, #64]	; (8002d28 <HAL_MspInit+0x4c>)
 8002ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cea:	4a0f      	ldr	r2, [pc, #60]	; (8002d28 <HAL_MspInit+0x4c>)
 8002cec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cf0:	6453      	str	r3, [r2, #68]	; 0x44
 8002cf2:	4b0d      	ldr	r3, [pc, #52]	; (8002d28 <HAL_MspInit+0x4c>)
 8002cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cfa:	607b      	str	r3, [r7, #4]
 8002cfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cfe:	2300      	movs	r3, #0
 8002d00:	603b      	str	r3, [r7, #0]
 8002d02:	4b09      	ldr	r3, [pc, #36]	; (8002d28 <HAL_MspInit+0x4c>)
 8002d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d06:	4a08      	ldr	r2, [pc, #32]	; (8002d28 <HAL_MspInit+0x4c>)
 8002d08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d0c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d0e:	4b06      	ldr	r3, [pc, #24]	; (8002d28 <HAL_MspInit+0x4c>)
 8002d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d16:	603b      	str	r3, [r7, #0]
 8002d18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d1a:	bf00      	nop
 8002d1c:	370c      	adds	r7, #12
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop
 8002d28:	40023800 	.word	0x40023800

08002d2c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b08a      	sub	sp, #40	; 0x28
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d34:	f107 0314 	add.w	r3, r7, #20
 8002d38:	2200      	movs	r2, #0
 8002d3a:	601a      	str	r2, [r3, #0]
 8002d3c:	605a      	str	r2, [r3, #4]
 8002d3e:	609a      	str	r2, [r3, #8]
 8002d40:	60da      	str	r2, [r3, #12]
 8002d42:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a40      	ldr	r2, [pc, #256]	; (8002e4c <HAL_I2S_MspInit+0x120>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d17a      	bne.n	8002e44 <HAL_I2S_MspInit+0x118>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002d4e:	2300      	movs	r3, #0
 8002d50:	613b      	str	r3, [r7, #16]
 8002d52:	4b3f      	ldr	r3, [pc, #252]	; (8002e50 <HAL_I2S_MspInit+0x124>)
 8002d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d56:	4a3e      	ldr	r2, [pc, #248]	; (8002e50 <HAL_I2S_MspInit+0x124>)
 8002d58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d5c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d5e:	4b3c      	ldr	r3, [pc, #240]	; (8002e50 <HAL_I2S_MspInit+0x124>)
 8002d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d66:	613b      	str	r3, [r7, #16]
 8002d68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	60fb      	str	r3, [r7, #12]
 8002d6e:	4b38      	ldr	r3, [pc, #224]	; (8002e50 <HAL_I2S_MspInit+0x124>)
 8002d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d72:	4a37      	ldr	r2, [pc, #220]	; (8002e50 <HAL_I2S_MspInit+0x124>)
 8002d74:	f043 0304 	orr.w	r3, r3, #4
 8002d78:	6313      	str	r3, [r2, #48]	; 0x30
 8002d7a:	4b35      	ldr	r3, [pc, #212]	; (8002e50 <HAL_I2S_MspInit+0x124>)
 8002d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7e:	f003 0304 	and.w	r3, r3, #4
 8002d82:	60fb      	str	r3, [r7, #12]
 8002d84:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d86:	2300      	movs	r3, #0
 8002d88:	60bb      	str	r3, [r7, #8]
 8002d8a:	4b31      	ldr	r3, [pc, #196]	; (8002e50 <HAL_I2S_MspInit+0x124>)
 8002d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8e:	4a30      	ldr	r2, [pc, #192]	; (8002e50 <HAL_I2S_MspInit+0x124>)
 8002d90:	f043 0302 	orr.w	r3, r3, #2
 8002d94:	6313      	str	r3, [r2, #48]	; 0x30
 8002d96:	4b2e      	ldr	r3, [pc, #184]	; (8002e50 <HAL_I2S_MspInit+0x124>)
 8002d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9a:	f003 0302 	and.w	r3, r3, #2
 8002d9e:	60bb      	str	r3, [r7, #8]
 8002da0:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PC1     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002da2:	2302      	movs	r3, #2
 8002da4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002da6:	2302      	movs	r3, #2
 8002da8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002daa:	2300      	movs	r3, #0
 8002dac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dae:	2300      	movs	r3, #0
 8002db0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8002db2:	2307      	movs	r3, #7
 8002db4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002db6:	f107 0314 	add.w	r3, r7, #20
 8002dba:	4619      	mov	r1, r3
 8002dbc:	4825      	ldr	r0, [pc, #148]	; (8002e54 <HAL_I2S_MspInit+0x128>)
 8002dbe:	f006 fe77 	bl	8009ab0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8002dc2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002dc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dc8:	2302      	movs	r3, #2
 8002dca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002dd4:	2305      	movs	r3, #5
 8002dd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dd8:	f107 0314 	add.w	r3, r7, #20
 8002ddc:	4619      	mov	r1, r3
 8002dde:	481e      	ldr	r0, [pc, #120]	; (8002e58 <HAL_I2S_MspInit+0x12c>)
 8002de0:	f006 fe66 	bl	8009ab0 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8002de4:	4b1d      	ldr	r3, [pc, #116]	; (8002e5c <HAL_I2S_MspInit+0x130>)
 8002de6:	4a1e      	ldr	r2, [pc, #120]	; (8002e60 <HAL_I2S_MspInit+0x134>)
 8002de8:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8002dea:	4b1c      	ldr	r3, [pc, #112]	; (8002e5c <HAL_I2S_MspInit+0x130>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002df0:	4b1a      	ldr	r3, [pc, #104]	; (8002e5c <HAL_I2S_MspInit+0x130>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002df6:	4b19      	ldr	r3, [pc, #100]	; (8002e5c <HAL_I2S_MspInit+0x130>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002dfc:	4b17      	ldr	r3, [pc, #92]	; (8002e5c <HAL_I2S_MspInit+0x130>)
 8002dfe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e02:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002e04:	4b15      	ldr	r3, [pc, #84]	; (8002e5c <HAL_I2S_MspInit+0x130>)
 8002e06:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e0a:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002e0c:	4b13      	ldr	r3, [pc, #76]	; (8002e5c <HAL_I2S_MspInit+0x130>)
 8002e0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e12:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8002e14:	4b11      	ldr	r3, [pc, #68]	; (8002e5c <HAL_I2S_MspInit+0x130>)
 8002e16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e1a:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002e1c:	4b0f      	ldr	r3, [pc, #60]	; (8002e5c <HAL_I2S_MspInit+0x130>)
 8002e1e:	2200      	movs	r2, #0
 8002e20:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e22:	4b0e      	ldr	r3, [pc, #56]	; (8002e5c <HAL_I2S_MspInit+0x130>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8002e28:	480c      	ldr	r0, [pc, #48]	; (8002e5c <HAL_I2S_MspInit+0x130>)
 8002e2a:	f006 fb57 	bl	80094dc <HAL_DMA_Init>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d001      	beq.n	8002e38 <HAL_I2S_MspInit+0x10c>
    {
      Error_Handler();
 8002e34:	f7ff f97c 	bl	8002130 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	4a08      	ldr	r2, [pc, #32]	; (8002e5c <HAL_I2S_MspInit+0x130>)
 8002e3c:	63da      	str	r2, [r3, #60]	; 0x3c
 8002e3e:	4a07      	ldr	r2, [pc, #28]	; (8002e5c <HAL_I2S_MspInit+0x130>)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002e44:	bf00      	nop
 8002e46:	3728      	adds	r7, #40	; 0x28
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	40003800 	.word	0x40003800
 8002e50:	40023800 	.word	0x40023800
 8002e54:	40020800 	.word	0x40020800
 8002e58:	40020400 	.word	0x40020400
 8002e5c:	20007df0 	.word	0x20007df0
 8002e60:	40026058 	.word	0x40026058

08002e64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e74:	d116      	bne.n	8002ea4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e76:	2300      	movs	r3, #0
 8002e78:	60fb      	str	r3, [r7, #12]
 8002e7a:	4b1a      	ldr	r3, [pc, #104]	; (8002ee4 <HAL_TIM_Base_MspInit+0x80>)
 8002e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7e:	4a19      	ldr	r2, [pc, #100]	; (8002ee4 <HAL_TIM_Base_MspInit+0x80>)
 8002e80:	f043 0301 	orr.w	r3, r3, #1
 8002e84:	6413      	str	r3, [r2, #64]	; 0x40
 8002e86:	4b17      	ldr	r3, [pc, #92]	; (8002ee4 <HAL_TIM_Base_MspInit+0x80>)
 8002e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8a:	f003 0301 	and.w	r3, r3, #1
 8002e8e:	60fb      	str	r3, [r7, #12]
 8002e90:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002e92:	2200      	movs	r2, #0
 8002e94:	2100      	movs	r1, #0
 8002e96:	201c      	movs	r0, #28
 8002e98:	f006 fae9 	bl	800946e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002e9c:	201c      	movs	r0, #28
 8002e9e:	f006 fb02 	bl	80094a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002ea2:	e01a      	b.n	8002eda <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM5)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a0f      	ldr	r2, [pc, #60]	; (8002ee8 <HAL_TIM_Base_MspInit+0x84>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d115      	bne.n	8002eda <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002eae:	2300      	movs	r3, #0
 8002eb0:	60bb      	str	r3, [r7, #8]
 8002eb2:	4b0c      	ldr	r3, [pc, #48]	; (8002ee4 <HAL_TIM_Base_MspInit+0x80>)
 8002eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb6:	4a0b      	ldr	r2, [pc, #44]	; (8002ee4 <HAL_TIM_Base_MspInit+0x80>)
 8002eb8:	f043 0308 	orr.w	r3, r3, #8
 8002ebc:	6413      	str	r3, [r2, #64]	; 0x40
 8002ebe:	4b09      	ldr	r3, [pc, #36]	; (8002ee4 <HAL_TIM_Base_MspInit+0x80>)
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec2:	f003 0308 	and.w	r3, r3, #8
 8002ec6:	60bb      	str	r3, [r7, #8]
 8002ec8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002eca:	2200      	movs	r2, #0
 8002ecc:	2100      	movs	r1, #0
 8002ece:	2032      	movs	r0, #50	; 0x32
 8002ed0:	f006 facd 	bl	800946e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002ed4:	2032      	movs	r0, #50	; 0x32
 8002ed6:	f006 fae6 	bl	80094a6 <HAL_NVIC_EnableIRQ>
}
 8002eda:	bf00      	nop
 8002edc:	3710      	adds	r7, #16
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	40023800 	.word	0x40023800
 8002ee8:	40000c00 	.word	0x40000c00

08002eec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b08a      	sub	sp, #40	; 0x28
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ef4:	f107 0314 	add.w	r3, r7, #20
 8002ef8:	2200      	movs	r2, #0
 8002efa:	601a      	str	r2, [r3, #0]
 8002efc:	605a      	str	r2, [r3, #4]
 8002efe:	609a      	str	r2, [r3, #8]
 8002f00:	60da      	str	r2, [r3, #12]
 8002f02:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f0c:	d11e      	bne.n	8002f4c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f0e:	2300      	movs	r3, #0
 8002f10:	613b      	str	r3, [r7, #16]
 8002f12:	4b22      	ldr	r3, [pc, #136]	; (8002f9c <HAL_TIM_MspPostInit+0xb0>)
 8002f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f16:	4a21      	ldr	r2, [pc, #132]	; (8002f9c <HAL_TIM_MspPostInit+0xb0>)
 8002f18:	f043 0301 	orr.w	r3, r3, #1
 8002f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f1e:	4b1f      	ldr	r3, [pc, #124]	; (8002f9c <HAL_TIM_MspPostInit+0xb0>)
 8002f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f22:	f003 0301 	and.w	r3, r3, #1
 8002f26:	613b      	str	r3, [r7, #16]
 8002f28:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f2e:	2302      	movs	r3, #2
 8002f30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f32:	2300      	movs	r3, #0
 8002f34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f36:	2300      	movs	r3, #0
 8002f38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f3e:	f107 0314 	add.w	r3, r7, #20
 8002f42:	4619      	mov	r1, r3
 8002f44:	4816      	ldr	r0, [pc, #88]	; (8002fa0 <HAL_TIM_MspPostInit+0xb4>)
 8002f46:	f006 fdb3 	bl	8009ab0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002f4a:	e022      	b.n	8002f92 <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM5)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a14      	ldr	r2, [pc, #80]	; (8002fa4 <HAL_TIM_MspPostInit+0xb8>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d11d      	bne.n	8002f92 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f56:	2300      	movs	r3, #0
 8002f58:	60fb      	str	r3, [r7, #12]
 8002f5a:	4b10      	ldr	r3, [pc, #64]	; (8002f9c <HAL_TIM_MspPostInit+0xb0>)
 8002f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5e:	4a0f      	ldr	r2, [pc, #60]	; (8002f9c <HAL_TIM_MspPostInit+0xb0>)
 8002f60:	f043 0301 	orr.w	r3, r3, #1
 8002f64:	6313      	str	r3, [r2, #48]	; 0x30
 8002f66:	4b0d      	ldr	r3, [pc, #52]	; (8002f9c <HAL_TIM_MspPostInit+0xb0>)
 8002f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6a:	f003 0301 	and.w	r3, r3, #1
 8002f6e:	60fb      	str	r3, [r7, #12]
 8002f70:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002f72:	2302      	movs	r3, #2
 8002f74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f76:	2302      	movs	r3, #2
 8002f78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002f82:	2302      	movs	r3, #2
 8002f84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f86:	f107 0314 	add.w	r3, r7, #20
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	4804      	ldr	r0, [pc, #16]	; (8002fa0 <HAL_TIM_MspPostInit+0xb4>)
 8002f8e:	f006 fd8f 	bl	8009ab0 <HAL_GPIO_Init>
}
 8002f92:	bf00      	nop
 8002f94:	3728      	adds	r7, #40	; 0x28
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	40023800 	.word	0x40023800
 8002fa0:	40020000 	.word	0x40020000
 8002fa4:	40000c00 	.word	0x40000c00

08002fa8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b08a      	sub	sp, #40	; 0x28
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fb0:	f107 0314 	add.w	r3, r7, #20
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	601a      	str	r2, [r3, #0]
 8002fb8:	605a      	str	r2, [r3, #4]
 8002fba:	609a      	str	r2, [r3, #8]
 8002fbc:	60da      	str	r2, [r3, #12]
 8002fbe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a31      	ldr	r2, [pc, #196]	; (800308c <HAL_UART_MspInit+0xe4>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d15c      	bne.n	8003084 <HAL_UART_MspInit+0xdc>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002fca:	2300      	movs	r3, #0
 8002fcc:	613b      	str	r3, [r7, #16]
 8002fce:	4b30      	ldr	r3, [pc, #192]	; (8003090 <HAL_UART_MspInit+0xe8>)
 8002fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd2:	4a2f      	ldr	r2, [pc, #188]	; (8003090 <HAL_UART_MspInit+0xe8>)
 8002fd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fd8:	6413      	str	r3, [r2, #64]	; 0x40
 8002fda:	4b2d      	ldr	r3, [pc, #180]	; (8003090 <HAL_UART_MspInit+0xe8>)
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fe2:	613b      	str	r3, [r7, #16]
 8002fe4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	60fb      	str	r3, [r7, #12]
 8002fea:	4b29      	ldr	r3, [pc, #164]	; (8003090 <HAL_UART_MspInit+0xe8>)
 8002fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fee:	4a28      	ldr	r2, [pc, #160]	; (8003090 <HAL_UART_MspInit+0xe8>)
 8002ff0:	f043 0301 	orr.w	r3, r3, #1
 8002ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ff6:	4b26      	ldr	r3, [pc, #152]	; (8003090 <HAL_UART_MspInit+0xe8>)
 8002ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffa:	f003 0301 	and.w	r3, r3, #1
 8002ffe:	60fb      	str	r3, [r7, #12]
 8003000:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003002:	230c      	movs	r3, #12
 8003004:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003006:	2302      	movs	r3, #2
 8003008:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800300a:	2300      	movs	r3, #0
 800300c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800300e:	2303      	movs	r3, #3
 8003010:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003012:	2307      	movs	r3, #7
 8003014:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003016:	f107 0314 	add.w	r3, r7, #20
 800301a:	4619      	mov	r1, r3
 800301c:	481d      	ldr	r0, [pc, #116]	; (8003094 <HAL_UART_MspInit+0xec>)
 800301e:	f006 fd47 	bl	8009ab0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8003022:	4b1d      	ldr	r3, [pc, #116]	; (8003098 <HAL_UART_MspInit+0xf0>)
 8003024:	4a1d      	ldr	r2, [pc, #116]	; (800309c <HAL_UART_MspInit+0xf4>)
 8003026:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8003028:	4b1b      	ldr	r3, [pc, #108]	; (8003098 <HAL_UART_MspInit+0xf0>)
 800302a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800302e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003030:	4b19      	ldr	r3, [pc, #100]	; (8003098 <HAL_UART_MspInit+0xf0>)
 8003032:	2240      	movs	r2, #64	; 0x40
 8003034:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003036:	4b18      	ldr	r3, [pc, #96]	; (8003098 <HAL_UART_MspInit+0xf0>)
 8003038:	2200      	movs	r2, #0
 800303a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800303c:	4b16      	ldr	r3, [pc, #88]	; (8003098 <HAL_UART_MspInit+0xf0>)
 800303e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003042:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003044:	4b14      	ldr	r3, [pc, #80]	; (8003098 <HAL_UART_MspInit+0xf0>)
 8003046:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800304a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800304c:	4b12      	ldr	r3, [pc, #72]	; (8003098 <HAL_UART_MspInit+0xf0>)
 800304e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003052:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 8003054:	4b10      	ldr	r3, [pc, #64]	; (8003098 <HAL_UART_MspInit+0xf0>)
 8003056:	f44f 7280 	mov.w	r2, #256	; 0x100
 800305a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800305c:	4b0e      	ldr	r3, [pc, #56]	; (8003098 <HAL_UART_MspInit+0xf0>)
 800305e:	2200      	movs	r2, #0
 8003060:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003062:	4b0d      	ldr	r3, [pc, #52]	; (8003098 <HAL_UART_MspInit+0xf0>)
 8003064:	2200      	movs	r2, #0
 8003066:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003068:	480b      	ldr	r0, [pc, #44]	; (8003098 <HAL_UART_MspInit+0xf0>)
 800306a:	f006 fa37 	bl	80094dc <HAL_DMA_Init>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d001      	beq.n	8003078 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8003074:	f7ff f85c 	bl	8002130 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	4a07      	ldr	r2, [pc, #28]	; (8003098 <HAL_UART_MspInit+0xf0>)
 800307c:	635a      	str	r2, [r3, #52]	; 0x34
 800307e:	4a06      	ldr	r2, [pc, #24]	; (8003098 <HAL_UART_MspInit+0xf0>)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003084:	bf00      	nop
 8003086:	3728      	adds	r7, #40	; 0x28
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}
 800308c:	40004400 	.word	0x40004400
 8003090:	40023800 	.word	0x40023800
 8003094:	40020000 	.word	0x40020000
 8003098:	20007f24 	.word	0x20007f24
 800309c:	400260a0 	.word	0x400260a0

080030a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030a0:	b480      	push	{r7}
 80030a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80030a4:	e7fe      	b.n	80030a4 <NMI_Handler+0x4>

080030a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030a6:	b480      	push	{r7}
 80030a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030aa:	e7fe      	b.n	80030aa <HardFault_Handler+0x4>

080030ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030ac:	b480      	push	{r7}
 80030ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030b0:	e7fe      	b.n	80030b0 <MemManage_Handler+0x4>

080030b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030b2:	b480      	push	{r7}
 80030b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030b6:	e7fe      	b.n	80030b6 <BusFault_Handler+0x4>

080030b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030b8:	b480      	push	{r7}
 80030ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030bc:	e7fe      	b.n	80030bc <UsageFault_Handler+0x4>

080030be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80030be:	b480      	push	{r7}
 80030c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80030c2:	bf00      	nop
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr

080030cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030cc:	b480      	push	{r7}
 80030ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030d0:	bf00      	nop
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr

080030da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030da:	b480      	push	{r7}
 80030dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80030de:	bf00      	nop
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr

080030e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030ec:	f006 f8a0 	bl	8009230 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030f0:	bf00      	nop
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80030f8:	4802      	ldr	r0, [pc, #8]	; (8003104 <DMA1_Stream3_IRQHandler+0x10>)
 80030fa:	f006 fa9d 	bl	8009638 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80030fe:	bf00      	nop
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	20007df0 	.word	0x20007df0

08003108 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800310c:	4802      	ldr	r0, [pc, #8]	; (8003118 <DMA1_Stream6_IRQHandler+0x10>)
 800310e:	f006 fa93 	bl	8009638 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8003112:	bf00      	nop
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	20007f24 	.word	0x20007f24

0800311c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003120:	4802      	ldr	r0, [pc, #8]	; (800312c <TIM2_IRQHandler+0x10>)
 8003122:	f008 fe0f 	bl	800bd44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003126:	bf00      	nop
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	20007e50 	.word	0x20007e50

08003130 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003134:	4802      	ldr	r0, [pc, #8]	; (8003140 <TIM5_IRQHandler+0x10>)
 8003136:	f008 fe05 	bl	800bd44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800313a:	bf00      	nop
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	20007e98 	.word	0x20007e98

08003144 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003144:	b480      	push	{r7}
 8003146:	af00      	add	r7, sp, #0
	return 1;
 8003148:	2301      	movs	r3, #1
}
 800314a:	4618      	mov	r0, r3
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr

08003154 <_kill>:

int _kill(int pid, int sig)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800315e:	f00c fadf 	bl	800f720 <__errno>
 8003162:	4603      	mov	r3, r0
 8003164:	2216      	movs	r2, #22
 8003166:	601a      	str	r2, [r3, #0]
	return -1;
 8003168:	f04f 33ff 	mov.w	r3, #4294967295
}
 800316c:	4618      	mov	r0, r3
 800316e:	3708      	adds	r7, #8
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <_exit>:

void _exit (int status)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800317c:	f04f 31ff 	mov.w	r1, #4294967295
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f7ff ffe7 	bl	8003154 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003186:	e7fe      	b.n	8003186 <_exit+0x12>

08003188 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b086      	sub	sp, #24
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003190:	4a14      	ldr	r2, [pc, #80]	; (80031e4 <_sbrk+0x5c>)
 8003192:	4b15      	ldr	r3, [pc, #84]	; (80031e8 <_sbrk+0x60>)
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800319c:	4b13      	ldr	r3, [pc, #76]	; (80031ec <_sbrk+0x64>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d102      	bne.n	80031aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80031a4:	4b11      	ldr	r3, [pc, #68]	; (80031ec <_sbrk+0x64>)
 80031a6:	4a12      	ldr	r2, [pc, #72]	; (80031f0 <_sbrk+0x68>)
 80031a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80031aa:	4b10      	ldr	r3, [pc, #64]	; (80031ec <_sbrk+0x64>)
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4413      	add	r3, r2
 80031b2:	693a      	ldr	r2, [r7, #16]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d207      	bcs.n	80031c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80031b8:	f00c fab2 	bl	800f720 <__errno>
 80031bc:	4603      	mov	r3, r0
 80031be:	220c      	movs	r2, #12
 80031c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80031c2:	f04f 33ff 	mov.w	r3, #4294967295
 80031c6:	e009      	b.n	80031dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80031c8:	4b08      	ldr	r3, [pc, #32]	; (80031ec <_sbrk+0x64>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80031ce:	4b07      	ldr	r3, [pc, #28]	; (80031ec <_sbrk+0x64>)
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4413      	add	r3, r2
 80031d6:	4a05      	ldr	r2, [pc, #20]	; (80031ec <_sbrk+0x64>)
 80031d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80031da:	68fb      	ldr	r3, [r7, #12]
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3718      	adds	r7, #24
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	20020000 	.word	0x20020000
 80031e8:	00000400 	.word	0x00000400
 80031ec:	20007f84 	.word	0x20007f84
 80031f0:	20007fa8 	.word	0x20007fa8

080031f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80031f4:	b480      	push	{r7}
 80031f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80031f8:	4b06      	ldr	r3, [pc, #24]	; (8003214 <SystemInit+0x20>)
 80031fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031fe:	4a05      	ldr	r2, [pc, #20]	; (8003214 <SystemInit+0x20>)
 8003200:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003204:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003208:	bf00      	nop
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr
 8003212:	bf00      	nop
 8003214:	e000ed00 	.word	0xe000ed00

08003218 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003218:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003250 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800321c:	480d      	ldr	r0, [pc, #52]	; (8003254 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800321e:	490e      	ldr	r1, [pc, #56]	; (8003258 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003220:	4a0e      	ldr	r2, [pc, #56]	; (800325c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003222:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003224:	e002      	b.n	800322c <LoopCopyDataInit>

08003226 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003226:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003228:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800322a:	3304      	adds	r3, #4

0800322c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800322c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800322e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003230:	d3f9      	bcc.n	8003226 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003232:	4a0b      	ldr	r2, [pc, #44]	; (8003260 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003234:	4c0b      	ldr	r4, [pc, #44]	; (8003264 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003236:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003238:	e001      	b.n	800323e <LoopFillZerobss>

0800323a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800323a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800323c:	3204      	adds	r2, #4

0800323e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800323e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003240:	d3fb      	bcc.n	800323a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003242:	f7ff ffd7 	bl	80031f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003246:	f00c fa71 	bl	800f72c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800324a:	f7fe fb89 	bl	8001960 <main>
  bx  lr    
 800324e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003250:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003254:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003258:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800325c:	0803307c 	.word	0x0803307c
  ldr r2, =_sbss
 8003260:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8003264:	20007fa8 	.word	0x20007fa8

08003268 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003268:	e7fe      	b.n	8003268 <ADC_IRQHandler>

0800326a <arm_relu_q7>:
 * Optimized relu with QSUB instructions.
 *
 */

void arm_relu_q7(q7_t *data, uint16_t size)
{
 800326a:	b480      	push	{r7}
 800326c:	b093      	sub	sp, #76	; 0x4c
 800326e:	af00      	add	r7, sp, #0
 8003270:	6078      	str	r0, [r7, #4]
 8003272:	460b      	mov	r3, r1
 8003274:	807b      	strh	r3, [r7, #2]

#if defined(ARM_MATH_DSP)
    /* Run the following code for M cores with DSP extension */

    uint16_t i = size >> 2;
 8003276:	887b      	ldrh	r3, [r7, #2]
 8003278:	089b      	lsrs	r3, r3, #2
 800327a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    q7_t *input = data;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	617b      	str	r3, [r7, #20]
    q7_t *output = data;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	613b      	str	r3, [r7, #16]
    q31_t in;
    q31_t buf;
    q31_t mask;

    while (i)
 8003286:	e045      	b.n	8003314 <arm_relu_q7+0xaa>
 8003288:	f107 0314 	add.w	r3, r7, #20
 800328c:	61bb      	str	r3, [r7, #24]
{
  q31_t val;


#ifdef __ARM_FEATURE_UNALIGNED
  memcpy (&val, *pQ7, 4);
 800328e:	69bb      	ldr	r3, [r7, #24]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	60fb      	str	r3, [r7, #12]
#else
  val =(((*pQ7)[3] & 0x0FF) << 24)  | (((*pQ7)[2] & 0x0FF) << 16)  | (((*pQ7)[1] & 0x0FF) << 8)  | ((*pQ7)[0] & 0x0FF);
#endif 

  *pQ7 += 4;
 8003296:	69bb      	ldr	r3, [r7, #24]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	1d1a      	adds	r2, r3, #4
 800329c:	69bb      	ldr	r3, [r7, #24]
 800329e:	601a      	str	r2, [r3, #0]

  return (val);
 80032a0:	68fb      	ldr	r3, [r7, #12]
    {
        in = read_q7x4_ia(&input);
 80032a2:	643b      	str	r3, [r7, #64]	; 0x40

        /* extract the first bit */
        buf = (int32_t)__ROR((uint32_t)in & 0x80808080, 7);
 80032a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032a6:	f003 3380 	and.w	r3, r3, #2155905152	; 0x80808080
 80032aa:	623b      	str	r3, [r7, #32]
 80032ac:	2307      	movs	r3, #7
 80032ae:	61fb      	str	r3, [r7, #28]
  \param [in]    op2  Number of Bits to rotate
  \return               Rotated value
 */
__STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
{
  op2 %= 32U;
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	f003 031f 	and.w	r3, r3, #31
 80032b6:	61fb      	str	r3, [r7, #28]
  if (op2 == 0U)
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d101      	bne.n	80032c2 <arm_relu_q7+0x58>
  {
    return op1;
 80032be:	6a3b      	ldr	r3, [r7, #32]
 80032c0:	e003      	b.n	80032ca <arm_relu_q7+0x60>
  }
  return (op1 >> op2) | (op1 << (32U - op2));
 80032c2:	6a3a      	ldr	r2, [r7, #32]
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	fa62 f303 	ror.w	r3, r2, r3
 80032ca:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* if MSB=1, mask will be 0xFF, 0x0 otherwise */
        mask = __QSUB8(0x00000000, buf);
 80032cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032ce:	2200      	movs	r2, #0
 80032d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80032d2:	62bb      	str	r3, [r7, #40]	; 0x28

__STATIC_FORCEINLINE uint32_t __QSUB8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __ASM ("qsub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80032d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032d8:	fac3 f312 	qsub8	r3, r3, r2
 80032dc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80032de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e0:	63bb      	str	r3, [r7, #56]	; 0x38

        write_q7x4_ia(&output, in & (~mask));
 80032e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032e4:	43da      	mvns	r2, r3
 80032e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032e8:	4013      	ands	r3, r2
 80032ea:	f107 0210 	add.w	r2, r7, #16
 80032ee:	637a      	str	r2, [r7, #52]	; 0x34
 80032f0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE void write_q7x4_ia (
  q7_t ** pQ7,
  q31_t   value)
{
  q31_t val = value;
 80032f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032f4:	60bb      	str	r3, [r7, #8]
#ifdef __ARM_FEATURE_UNALIGNED
  memcpy (*pQ7, &val, 4);
 80032f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	68ba      	ldr	r2, [r7, #8]
 80032fc:	601a      	str	r2, [r3, #0]
  (*pQ7)[1] = (val >> 8) & 0x0FF;
  (*pQ7)[2] = (val >> 16) & 0x0FF;
  (*pQ7)[3] = (val >> 24) & 0x0FF;

#endif
  *pQ7 += 4;
 80032fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	1d1a      	adds	r2, r3, #4
 8003304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003306:	601a      	str	r2, [r3, #0]
}
 8003308:	bf00      	nop

        i--;
 800330a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800330e:	3b01      	subs	r3, #1
 8003310:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    while (i)
 8003314:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003318:	2b00      	cmp	r3, #0
 800331a:	d1b5      	bne.n	8003288 <arm_relu_q7+0x1e>
    }

    i = size & 0x3;
 800331c:	887b      	ldrh	r3, [r7, #2]
 800331e:	f003 0303 	and.w	r3, r3, #3
 8003322:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    while (i)
 8003326:	e00f      	b.n	8003348 <arm_relu_q7+0xde>
    {
        if (*input < 0)
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	f993 3000 	ldrsb.w	r3, [r3]
 800332e:	2b00      	cmp	r3, #0
 8003330:	da02      	bge.n	8003338 <arm_relu_q7+0xce>
        {
            *input = 0;
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	2200      	movs	r2, #0
 8003336:	701a      	strb	r2, [r3, #0]
        }
        input++;
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	3301      	adds	r3, #1
 800333c:	617b      	str	r3, [r7, #20]
        i--;
 800333e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003342:	3b01      	subs	r3, #1
 8003344:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    while (i)
 8003348:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800334c:	2b00      	cmp	r3, #0
 800334e:	d1eb      	bne.n	8003328 <arm_relu_q7+0xbe>
        if (data[i] < 0)
            data[i] = 0;
    }

#endif
}
 8003350:	bf00      	nop
 8003352:	bf00      	nop
 8003354:	374c      	adds	r7, #76	; 0x4c
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr

0800335e <arm_convolve_1x1_HWC_q7_fast_nonsquare>:
                                                  q7_t *Im_out,
                                                  const uint16_t dim_im_out_x,
                                                  const uint16_t dim_im_out_y,
                                                  q15_t *bufferA,
                                                  q7_t *bufferB)
{
 800335e:	b580      	push	{r7, lr}
 8003360:	b0b0      	sub	sp, #192	; 0xc0
 8003362:	af04      	add	r7, sp, #16
 8003364:	60f8      	str	r0, [r7, #12]
 8003366:	4608      	mov	r0, r1
 8003368:	4611      	mov	r1, r2
 800336a:	461a      	mov	r2, r3
 800336c:	4603      	mov	r3, r0
 800336e:	817b      	strh	r3, [r7, #10]
 8003370:	460b      	mov	r3, r1
 8003372:	813b      	strh	r3, [r7, #8]
 8003374:	4613      	mov	r3, r2
 8003376:	80fb      	strh	r3, [r7, #6]
    /* -----------------------
     *  Here we use bufferA as q15_t internally as computation are done with q15_t level
     *  im2col are done to output in q15_t format from q7_t input
     */

    q15_t *pBuffer = bufferA;
 8003378:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800337c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    q7_t *pOut = Im_out;
 8003380:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003384:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    if (ch_im_in % 4 != 0 || ch_im_out % 2 != 0 || dim_kernel_x != 1 || dim_kernel_y != 1 || padding_x != 0 ||
 8003388:	88fb      	ldrh	r3, [r7, #6]
 800338a:	f003 0303 	and.w	r3, r3, #3
 800338e:	b29b      	uxth	r3, r3
 8003390:	2b00      	cmp	r3, #0
 8003392:	d11e      	bne.n	80033d2 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x74>
 8003394:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8003398:	f003 0301 	and.w	r3, r3, #1
 800339c:	b29b      	uxth	r3, r3
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d117      	bne.n	80033d2 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x74>
 80033a2:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d113      	bne.n	80033d2 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x74>
 80033aa:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d10f      	bne.n	80033d2 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x74>
 80033b2:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d10b      	bne.n	80033d2 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x74>
 80033ba:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d107      	bne.n	80033d2 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x74>
        padding_y != 0 || stride_x != 1 || stride_y != 1)
 80033c2:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	; 0xd0
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d103      	bne.n	80033d2 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x74>
 80033ca:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d002      	beq.n	80033d8 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x7a>
    {
        /* check if the input dimension meets the constraints */
        return ARM_MATH_SIZE_MISMATCH;
 80033d2:	f06f 0302 	mvn.w	r3, #2
 80033d6:	e182      	b.n	80036de <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x380>
    }

    for (i_out_y = 0; i_out_y < dim_im_out_y; i_out_y++)
 80033d8:	2300      	movs	r3, #0
 80033da:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 80033de:	e05f      	b.n	80034a0 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x142>
    {
        for (i_out_x = 0; i_out_x < dim_im_out_x; i_out_x++)
 80033e0:	2300      	movs	r3, #0
 80033e2:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
 80033e6:	e04e      	b.n	8003486 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x128>
        {
            /* This part implements the im2col function */
            arm_q7_to_q15_reordered_no_shift(
                (q7_t *)Im_in + (i_out_y * dim_im_in_x + i_out_x) * ch_im_in, pBuffer, ch_im_in);
 80033e8:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
 80033ec:	897a      	ldrh	r2, [r7, #10]
 80033ee:	fb02 f203 	mul.w	r2, r2, r3
 80033f2:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 80033f6:	4413      	add	r3, r2
 80033f8:	88fa      	ldrh	r2, [r7, #6]
 80033fa:	fb02 f303 	mul.w	r3, r2, r3
 80033fe:	461a      	mov	r2, r3
            arm_q7_to_q15_reordered_no_shift(
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	4413      	add	r3, r2
 8003404:	88fa      	ldrh	r2, [r7, #6]
 8003406:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800340a:	4618      	mov	r0, r3
 800340c:	f002 ff6b 	bl	80062e6 <arm_q7_to_q15_reordered_no_shift>
            pBuffer += ch_im_in;
 8003410:	88fb      	ldrh	r3, [r7, #6]
 8003412:	005b      	lsls	r3, r3, #1
 8003414:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8003418:	4413      	add	r3, r2
 800341a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

            if (pBuffer == bufferA + 2 * ch_im_in * dim_kernel_x * dim_kernel_y)
 800341e:	88fb      	ldrh	r3, [r7, #6]
 8003420:	f8b7 20c0 	ldrh.w	r2, [r7, #192]	; 0xc0
 8003424:	fb02 f303 	mul.w	r3, r2, r3
 8003428:	f8b7 20c4 	ldrh.w	r2, [r7, #196]	; 0xc4
 800342c:	fb02 f303 	mul.w	r3, r2, r3
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8003436:	4413      	add	r3, r2
 8003438:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800343c:	429a      	cmp	r2, r3
 800343e:	d11b      	bne.n	8003478 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x11a>
            {
                pOut = arm_nn_mat_mult_kernel_q7_q15_reordered(
 8003440:	88f9      	ldrh	r1, [r7, #6]
 8003442:	f8b7 20bc 	ldrh.w	r2, [r7, #188]	; 0xbc
 8003446:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800344a:	9303      	str	r3, [sp, #12]
 800344c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003450:	9302      	str	r3, [sp, #8]
 8003452:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	; 0xe0
 8003456:	9301      	str	r3, [sp, #4]
 8003458:	f8b7 30dc 	ldrh.w	r3, [r7, #220]	; 0xdc
 800345c:	9300      	str	r3, [sp, #0]
 800345e:	460b      	mov	r3, r1
 8003460:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8003464:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8003468:	f001 ff2c 	bl	80052c4 <arm_nn_mat_mult_kernel_q7_q15_reordered>
 800346c:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
                    wt, bufferA, ch_im_out, ch_im_in, bias_shift, out_shift, bias, pOut);
                /* counter reset */
                pBuffer = bufferA;
 8003470:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003474:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        for (i_out_x = 0; i_out_x < dim_im_out_x; i_out_x++)
 8003478:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 800347c:	b29b      	uxth	r3, r3
 800347e:	3301      	adds	r3, #1
 8003480:	b29b      	uxth	r3, r3
 8003482:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
 8003486:	f9b7 20ac 	ldrsh.w	r2, [r7, #172]	; 0xac
 800348a:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
 800348e:	429a      	cmp	r2, r3
 8003490:	dbaa      	blt.n	80033e8 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x8a>
    for (i_out_y = 0; i_out_y < dim_im_out_y; i_out_y++)
 8003492:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
 8003496:	b29b      	uxth	r3, r3
 8003498:	3301      	adds	r3, #1
 800349a:	b29b      	uxth	r3, r3
 800349c:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 80034a0:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	; 0xae
 80034a4:	f8b7 30ec 	ldrh.w	r3, [r7, #236]	; 0xec
 80034a8:	429a      	cmp	r2, r3
 80034aa:	db99      	blt.n	80033e0 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x82>
            }
        }
    }

    /* check if there is left-over for compute */
    if (pBuffer != bufferA)
 80034ac:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80034b0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80034b4:	429a      	cmp	r2, r3
 80034b6:	f000 8111 	beq.w	80036dc <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x37e>
    {
        const q7_t *pA = wt;
 80034ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80034be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        for (i_ch_out = 0; i_ch_out < ch_im_out; i_ch_out++)
 80034c2:	2300      	movs	r3, #0
 80034c4:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80034c8:	e101      	b.n	80036ce <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x370>
        {
            q31_t sum = ((q31_t)(bias[i_ch_out]) << bias_shift) + NN_ROUND(out_shift);
 80034ca:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	; 0xaa
 80034ce:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80034d2:	4413      	add	r3, r2
 80034d4:	f993 3000 	ldrsb.w	r3, [r3]
 80034d8:	461a      	mov	r2, r3
 80034da:	f8b7 30dc 	ldrh.w	r3, [r7, #220]	; 0xdc
 80034de:	fa02 f303 	lsl.w	r3, r2, r3
 80034e2:	4619      	mov	r1, r3
 80034e4:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	; 0xe0
 80034e8:	2201      	movs	r2, #1
 80034ea:	fa02 f303 	lsl.w	r3, r2, r3
 80034ee:	085b      	lsrs	r3, r3, #1
 80034f0:	440b      	add	r3, r1
 80034f2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
            const q15_t *pB = bufferA;
 80034f6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80034fa:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* basically each time it process 4 entries */
            uint16_t colCnt = ch_im_in * dim_kernel_x * dim_kernel_y >> 2;
 80034fc:	88fb      	ldrh	r3, [r7, #6]
 80034fe:	f8b7 20c0 	ldrh.w	r2, [r7, #192]	; 0xc0
 8003502:	fb02 f303 	mul.w	r3, r2, r3
 8003506:	f8b7 20c4 	ldrh.w	r2, [r7, #196]	; 0xc4
 800350a:	fb02 f303 	mul.w	r3, r2, r3
 800350e:	109b      	asrs	r3, r3, #2
 8003510:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            while (colCnt)
 8003514:	e084      	b.n	8003620 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x2c2>
 8003516:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800351a:	623b      	str	r3, [r7, #32]
 800351c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003520:	657b      	str	r3, [r7, #84]	; 0x54
 8003522:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003526:	653b      	str	r3, [r7, #80]	; 0x50
 8003528:	f107 0320 	add.w	r3, r7, #32
 800352c:	64fb      	str	r3, [r7, #76]	; 0x4c
  @return        q31 value
 */
__STATIC_FORCEINLINE q31_t arm_nn_read_q7x4_ia(const q7_t **in_q7)
{
    q31_t val;
    memcpy(&val, *in_q7, 4);
 800352e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	61fb      	str	r3, [r7, #28]
    *in_q7 += 4;
 8003536:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	1d1a      	adds	r2, r3, #4
 800353c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800353e:	601a      	str	r2, [r3, #0]

    return (val);
 8003540:	69fb      	ldr	r3, [r7, #28]
 * @brief read and expand one q7 word into two q15 words with reordering
 */

__STATIC_FORCEINLINE const q7_t *read_and_pad_reordered(const q7_t *source, q31_t *out1, q31_t *out2)
{
    q31_t inA = arm_nn_read_q7x4_ia(&source);
 8003542:	64bb      	str	r3, [r7, #72]	; 0x48
#ifndef ARM_MATH_BIG_ENDIAN
    *out2 = __SXTB16(__ROR((uint32_t)inA, 8));
 8003544:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003546:	647b      	str	r3, [r7, #68]	; 0x44
 8003548:	2308      	movs	r3, #8
 800354a:	643b      	str	r3, [r7, #64]	; 0x40
  op2 %= 32U;
 800354c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800354e:	f003 031f 	and.w	r3, r3, #31
 8003552:	643b      	str	r3, [r7, #64]	; 0x40
  if (op2 == 0U)
 8003554:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003556:	2b00      	cmp	r3, #0
 8003558:	d101      	bne.n	800355e <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x200>
    return op1;
 800355a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800355c:	e003      	b.n	8003566 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x208>
  return (op1 >> op2) | (op1 << (32U - op2));
 800355e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003560:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003562:	fa62 f303 	ror.w	r3, r2, r3
 8003566:	63fb      	str	r3, [r7, #60]	; 0x3c

__STATIC_FORCEINLINE uint32_t __SXTB16(uint32_t op1)
{
  uint32_t result;

  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8003568:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800356a:	fa2f f383 	sxtb16	r3, r3
 800356e:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 8003570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003572:	461a      	mov	r2, r3
 8003574:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003576:	601a      	str	r2, [r3, #0]
    *out1 = __SXTB16(inA);
 8003578:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800357a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800357c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800357e:	fa2f f383 	sxtb16	r3, r3
 8003582:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003586:	461a      	mov	r2, r3
 8003588:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800358a:	601a      	str	r2, [r3, #0]
#else
    *out1 = __SXTB16(__ROR((uint32_t)inA, 8));
    *out2 = __SXTB16(inA);
#endif

    return source;
 800358c:	6a3b      	ldr	r3, [r7, #32]
            {

                q31_t inA1, inA2;
                q31_t inB1, inB2;

                pA = read_and_pad_reordered(pA, &inA1, &inA2);
 800358e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003592:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003596:	65bb      	str	r3, [r7, #88]	; 0x58
    memcpy(&val, *in_q15, 4);
 8003598:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	61bb      	str	r3, [r7, #24]
    *in_q15 += 2;
 80035a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	1d1a      	adds	r2, r3, #4
 80035a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035a8:	601a      	str	r2, [r3, #0]
    return (val);
 80035aa:	69bb      	ldr	r3, [r7, #24]

                inB1 = arm_nn_read_q15x2_ia(&pB);
 80035ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                sum = __SMLAD(inA1, inB1, sum);
 80035b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035b2:	4619      	mov	r1, r3
 80035b4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80035b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80035bc:	66b9      	str	r1, [r7, #104]	; 0x68
 80035be:	667a      	str	r2, [r7, #100]	; 0x64
 80035c0:	663b      	str	r3, [r7, #96]	; 0x60

__STATIC_FORCEINLINE uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80035c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80035c4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80035c6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80035c8:	fb23 1302 	smlad	r3, r3, r2, r1
 80035cc:	65fb      	str	r3, [r7, #92]	; 0x5c
  return(result);
 80035ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80035d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80035d8:	66fb      	str	r3, [r7, #108]	; 0x6c
    memcpy(&val, *in_q15, 4);
 80035da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	617b      	str	r3, [r7, #20]
    *in_q15 += 2;
 80035e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	1d1a      	adds	r2, r3, #4
 80035e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035ea:	601a      	str	r2, [r3, #0]
    return (val);
 80035ec:	697b      	ldr	r3, [r7, #20]
                inB2 = arm_nn_read_q15x2_ia(&pB);
 80035ee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                sum = __SMLAD(inA2, inB2, sum);
 80035f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f4:	4619      	mov	r1, r3
 80035f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80035fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80035fe:	67f9      	str	r1, [r7, #124]	; 0x7c
 8003600:	67ba      	str	r2, [r7, #120]	; 0x78
 8003602:	677b      	str	r3, [r7, #116]	; 0x74
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8003604:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003606:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003608:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800360a:	fb23 1302 	smlad	r3, r3, r2, r1
 800360e:	673b      	str	r3, [r7, #112]	; 0x70
  return(result);
 8003610:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003612:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

                colCnt--;
 8003616:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800361a:	3b01      	subs	r3, #1
 800361c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
            while (colCnt)
 8003620:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8003624:	2b00      	cmp	r3, #0
 8003626:	f47f af76 	bne.w	8003516 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x1b8>
            }
            colCnt = ch_im_in * dim_kernel_y * dim_kernel_x & 0x3;
 800362a:	88fa      	ldrh	r2, [r7, #6]
 800362c:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 8003630:	fb12 f303 	smulbb	r3, r2, r3
 8003634:	b29b      	uxth	r3, r3
 8003636:	f8b7 20c0 	ldrh.w	r2, [r7, #192]	; 0xc0
 800363a:	fb12 f303 	smulbb	r3, r2, r3
 800363e:	b29b      	uxth	r3, r3
 8003640:	f003 0303 	and.w	r3, r3, #3
 8003644:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
            while (colCnt)
 8003648:	e01d      	b.n	8003686 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x328>
            {
                q7_t inA1 = *pA++;
 800364a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800364e:	1c5a      	adds	r2, r3, #1
 8003650:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
                q15_t inB1 = *pB++;
 800365a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800365c:	1c9a      	adds	r2, r3, #2
 800365e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003660:	881b      	ldrh	r3, [r3, #0]
 8003662:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
                sum += inA1 * inB1;
 8003666:	f997 308b 	ldrsb.w	r3, [r7, #139]	; 0x8b
 800366a:	f9b7 2088 	ldrsh.w	r2, [r7, #136]	; 0x88
 800366e:	fb02 f303 	mul.w	r3, r2, r3
 8003672:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003676:	4413      	add	r3, r2
 8003678:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                colCnt--;
 800367c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8003680:	3b01      	subs	r3, #1
 8003682:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
            while (colCnt)
 8003686:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800368a:	2b00      	cmp	r3, #0
 800368c:	d1dd      	bne.n	800364a <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x2ec>
            }
            *pOut = (q7_t)__SSAT((sum >> out_shift), 8);
 800368e:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	; 0xe0
 8003692:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003696:	fa42 f303 	asr.w	r3, r2, r3
 800369a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800369e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80036a2:	f303 0307 	ssat	r3, #8, r3
 80036a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80036aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80036ae:	b25a      	sxtb	r2, r3
 80036b0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80036b4:	701a      	strb	r2, [r3, #0]
            pOut++;
 80036b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80036ba:	3301      	adds	r3, #1
 80036bc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        for (i_ch_out = 0; i_ch_out < ch_im_out; i_ch_out++)
 80036c0:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	; 0xaa
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	3301      	adds	r3, #1
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80036ce:	f9b7 20aa 	ldrsh.w	r2, [r7, #170]	; 0xaa
 80036d2:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 80036d6:	429a      	cmp	r2, r3
 80036d8:	f6ff aef7 	blt.w	80034ca <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x16c>
    }

#endif /* ARM_MATH_DSP */

    /* Return to application */
    return ARM_MATH_SUCCESS;
 80036dc:	2300      	movs	r3, #0
}
 80036de:	4618      	mov	r0, r3
 80036e0:	37b0      	adds	r7, #176	; 0xb0
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}

080036e6 <arm_convolve_HWC_q7_basic_nonsquare>:
                                               q7_t *Im_out,
                                               const uint16_t dim_im_out_x,
                                               const uint16_t dim_im_out_y,
                                               q15_t *bufferA,
                                               q7_t *bufferB)
{
 80036e6:	b580      	push	{r7, lr}
 80036e8:	b0b8      	sub	sp, #224	; 0xe0
 80036ea:	af04      	add	r7, sp, #16
 80036ec:	60f8      	str	r0, [r7, #12]
 80036ee:	4608      	mov	r0, r1
 80036f0:	4611      	mov	r1, r2
 80036f2:	461a      	mov	r2, r3
 80036f4:	4603      	mov	r3, r0
 80036f6:	817b      	strh	r3, [r7, #10]
 80036f8:	460b      	mov	r3, r1
 80036fa:	813b      	strh	r3, [r7, #8]
 80036fc:	4613      	mov	r3, r2
 80036fe:	80fb      	strh	r3, [r7, #6]

    /*
     *  Here we use bufferA as q15_t internally as computation are done with q15_t level
     *  im2col are done to output in q15_t format from q7_t input
     */
    q15_t *pBuffer = bufferA;
 8003700:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003704:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    q7_t *pOut = Im_out;
 8003708:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800370c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

    /* This part implements the im2col function */
    for (i_out_y = 0; i_out_y < dim_im_out_y; i_out_y++)
 8003710:	2300      	movs	r3, #0
 8003712:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
 8003716:	e0cf      	b.n	80038b8 <arm_convolve_HWC_q7_basic_nonsquare+0x1d2>
    {
        for (i_out_x = 0; i_out_x < dim_im_out_x; i_out_x++)
 8003718:	2300      	movs	r3, #0
 800371a:	f8a7 30cc 	strh.w	r3, [r7, #204]	; 0xcc
 800371e:	e0bd      	b.n	800389c <arm_convolve_HWC_q7_basic_nonsquare+0x1b6>
        {
            for (i_ker_y = i_out_y * stride_y - padding_y; i_ker_y < i_out_y * stride_y - padding_y + dim_kernel_y;
 8003720:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003724:	f8b7 20f4 	ldrh.w	r2, [r7, #244]	; 0xf4
 8003728:	fb12 f303 	smulbb	r3, r2, r3
 800372c:	b29a      	uxth	r2, r3
 800372e:	f8b7 30ec 	ldrh.w	r3, [r7, #236]	; 0xec
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	b29b      	uxth	r3, r3
 8003736:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
 800373a:	e061      	b.n	8003800 <arm_convolve_HWC_q7_basic_nonsquare+0x11a>
                 i_ker_y++)
            {
                for (i_ker_x = i_out_x * stride_x - padding_x; i_ker_x < i_out_x * stride_x - padding_x + dim_kernel_x;
 800373c:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 8003740:	f8b7 20f0 	ldrh.w	r2, [r7, #240]	; 0xf0
 8003744:	fb12 f303 	smulbb	r3, r2, r3
 8003748:	b29a      	uxth	r2, r3
 800374a:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
 800374e:	1ad3      	subs	r3, r2, r3
 8003750:	b29b      	uxth	r3, r3
 8003752:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
 8003756:	e03c      	b.n	80037d2 <arm_convolve_HWC_q7_basic_nonsquare+0xec>
                     i_ker_x++)
                {
                    if (i_ker_y < 0 || i_ker_y >= dim_im_in_y || i_ker_x < 0 || i_ker_x >= dim_im_in_x)
 8003758:	f9b7 30ca 	ldrsh.w	r3, [r7, #202]	; 0xca
 800375c:	2b00      	cmp	r3, #0
 800375e:	db0d      	blt.n	800377c <arm_convolve_HWC_q7_basic_nonsquare+0x96>
 8003760:	f9b7 20ca 	ldrsh.w	r2, [r7, #202]	; 0xca
 8003764:	893b      	ldrh	r3, [r7, #8]
 8003766:	429a      	cmp	r2, r3
 8003768:	da08      	bge.n	800377c <arm_convolve_HWC_q7_basic_nonsquare+0x96>
 800376a:	f9b7 30c8 	ldrsh.w	r3, [r7, #200]	; 0xc8
 800376e:	2b00      	cmp	r3, #0
 8003770:	db04      	blt.n	800377c <arm_convolve_HWC_q7_basic_nonsquare+0x96>
 8003772:	f9b7 20c8 	ldrsh.w	r2, [r7, #200]	; 0xc8
 8003776:	897b      	ldrh	r3, [r7, #10]
 8003778:	429a      	cmp	r2, r3
 800377a:	db08      	blt.n	800378e <arm_convolve_HWC_q7_basic_nonsquare+0xa8>
                    {
                        /* Filling 0 for out-of-bound paddings */
                        /* arm_fill_q15(0, pBuffer, ch_im_in); */
                        memset(pBuffer, 0, sizeof(q15_t) * ch_im_in);
 800377c:	88fb      	ldrh	r3, [r7, #6]
 800377e:	005b      	lsls	r3, r3, #1
 8003780:	461a      	mov	r2, r3
 8003782:	2100      	movs	r1, #0
 8003784:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8003788:	f00c f82c 	bl	800f7e4 <memset>
 800378c:	e013      	b.n	80037b6 <arm_convolve_HWC_q7_basic_nonsquare+0xd0>
                    }
                    else
                    {
                        /* Copying the pixel data to column */
                        arm_q7_to_q15_no_shift(
                            (q7_t *)Im_in + (i_ker_y * dim_im_in_x + i_ker_x) * ch_im_in, pBuffer, ch_im_in);
 800378e:	f9b7 30ca 	ldrsh.w	r3, [r7, #202]	; 0xca
 8003792:	897a      	ldrh	r2, [r7, #10]
 8003794:	fb02 f203 	mul.w	r2, r2, r3
 8003798:	f9b7 30c8 	ldrsh.w	r3, [r7, #200]	; 0xc8
 800379c:	4413      	add	r3, r2
 800379e:	88fa      	ldrh	r2, [r7, #6]
 80037a0:	fb02 f303 	mul.w	r3, r2, r3
 80037a4:	461a      	mov	r2, r3
                        arm_q7_to_q15_no_shift(
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	4413      	add	r3, r2
 80037aa:	88fa      	ldrh	r2, [r7, #6]
 80037ac:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 80037b0:	4618      	mov	r0, r3
 80037b2:	f002 fd04 	bl	80061be <arm_q7_to_q15_no_shift>
                    }
                    pBuffer += ch_im_in;
 80037b6:	88fb      	ldrh	r3, [r7, #6]
 80037b8:	005b      	lsls	r3, r3, #1
 80037ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80037be:	4413      	add	r3, r2
 80037c0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                     i_ker_x++)
 80037c4:	f9b7 30c8 	ldrsh.w	r3, [r7, #200]	; 0xc8
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	3301      	adds	r3, #1
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
                for (i_ker_x = i_out_x * stride_x - padding_x; i_ker_x < i_out_x * stride_x - padding_x + dim_kernel_x;
 80037d2:	f9b7 20c8 	ldrsh.w	r2, [r7, #200]	; 0xc8
 80037d6:	f9b7 30cc 	ldrsh.w	r3, [r7, #204]	; 0xcc
 80037da:	f8b7 10f0 	ldrh.w	r1, [r7, #240]	; 0xf0
 80037de:	fb01 f103 	mul.w	r1, r1, r3
 80037e2:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
 80037e6:	1ac9      	subs	r1, r1, r3
 80037e8:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	; 0xe0
 80037ec:	440b      	add	r3, r1
 80037ee:	429a      	cmp	r2, r3
 80037f0:	dbb2      	blt.n	8003758 <arm_convolve_HWC_q7_basic_nonsquare+0x72>
                 i_ker_y++)
 80037f2:	f9b7 30ca 	ldrsh.w	r3, [r7, #202]	; 0xca
 80037f6:	b29b      	uxth	r3, r3
 80037f8:	3301      	adds	r3, #1
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
            for (i_ker_y = i_out_y * stride_y - padding_y; i_ker_y < i_out_y * stride_y - padding_y + dim_kernel_y;
 8003800:	f9b7 20ca 	ldrsh.w	r2, [r7, #202]	; 0xca
 8003804:	f9b7 30ce 	ldrsh.w	r3, [r7, #206]	; 0xce
 8003808:	f8b7 10f4 	ldrh.w	r1, [r7, #244]	; 0xf4
 800380c:	fb01 f103 	mul.w	r1, r1, r3
 8003810:	f8b7 30ec 	ldrh.w	r3, [r7, #236]	; 0xec
 8003814:	1ac9      	subs	r1, r1, r3
 8003816:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 800381a:	440b      	add	r3, r1
 800381c:	429a      	cmp	r2, r3
 800381e:	db8d      	blt.n	800373c <arm_convolve_HWC_q7_basic_nonsquare+0x56>
                }
            }

            /* Computation is filed for every 2 columns */
            if (pBuffer == bufferA + 2 * ch_im_in * dim_kernel_y * dim_kernel_x)
 8003820:	88fb      	ldrh	r3, [r7, #6]
 8003822:	f8b7 20e4 	ldrh.w	r2, [r7, #228]	; 0xe4
 8003826:	fb02 f303 	mul.w	r3, r2, r3
 800382a:	f8b7 20e0 	ldrh.w	r2, [r7, #224]	; 0xe0
 800382e:	fb02 f303 	mul.w	r3, r2, r3
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8003838:	4413      	add	r3, r2
 800383a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800383e:	429a      	cmp	r2, r3
 8003840:	d125      	bne.n	800388e <arm_convolve_HWC_q7_basic_nonsquare+0x1a8>
            {
                pOut = arm_nn_mat_mult_kernel_q7_q15(
 8003842:	88fa      	ldrh	r2, [r7, #6]
 8003844:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 8003848:	fb12 f303 	smulbb	r3, r2, r3
 800384c:	b29b      	uxth	r3, r3
 800384e:	f8b7 20e0 	ldrh.w	r2, [r7, #224]	; 0xe0
 8003852:	fb12 f303 	smulbb	r3, r2, r3
 8003856:	b299      	uxth	r1, r3
 8003858:	f8b7 20dc 	ldrh.w	r2, [r7, #220]	; 0xdc
 800385c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003860:	9303      	str	r3, [sp, #12]
 8003862:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003866:	9302      	str	r3, [sp, #8]
 8003868:	f8b7 3100 	ldrh.w	r3, [r7, #256]	; 0x100
 800386c:	9301      	str	r3, [sp, #4]
 800386e:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	; 0xfc
 8003872:	9300      	str	r3, [sp, #0]
 8003874:	460b      	mov	r3, r1
 8003876:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 800387a:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800387e:	f000 fe6d 	bl	800455c <arm_nn_mat_mult_kernel_q7_q15>
 8003882:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
                    wt, bufferA, ch_im_out, ch_im_in * dim_kernel_y * dim_kernel_x, bias_shift, out_shift, bias, pOut);

                /* counter reset */
                pBuffer = bufferA;
 8003886:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800388a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
        for (i_out_x = 0; i_out_x < dim_im_out_x; i_out_x++)
 800388e:	f9b7 30cc 	ldrsh.w	r3, [r7, #204]	; 0xcc
 8003892:	b29b      	uxth	r3, r3
 8003894:	3301      	adds	r3, #1
 8003896:	b29b      	uxth	r3, r3
 8003898:	f8a7 30cc 	strh.w	r3, [r7, #204]	; 0xcc
 800389c:	f9b7 20cc 	ldrsh.w	r2, [r7, #204]	; 0xcc
 80038a0:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
 80038a4:	429a      	cmp	r2, r3
 80038a6:	f6ff af3b 	blt.w	8003720 <arm_convolve_HWC_q7_basic_nonsquare+0x3a>
    for (i_out_y = 0; i_out_y < dim_im_out_y; i_out_y++)
 80038aa:	f9b7 30ce 	ldrsh.w	r3, [r7, #206]	; 0xce
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	3301      	adds	r3, #1
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
 80038b8:	f9b7 20ce 	ldrsh.w	r2, [r7, #206]	; 0xce
 80038bc:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 80038c0:	429a      	cmp	r2, r3
 80038c2:	f6ff af29 	blt.w	8003718 <arm_convolve_HWC_q7_basic_nonsquare+0x32>
            }
        }
    }

    /* left-over because odd number of output pixels */
    if (pBuffer != bufferA)
 80038c6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80038ca:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80038ce:	429a      	cmp	r2, r3
 80038d0:	f000 8133 	beq.w	8003b3a <arm_convolve_HWC_q7_basic_nonsquare+0x454>
    {
        const q7_t *pA = wt;
 80038d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80038d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
        int i;

        for (i = 0; i < ch_im_out; i++)
 80038dc:	2300      	movs	r3, #0
 80038de:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80038e2:	e123      	b.n	8003b2c <arm_convolve_HWC_q7_basic_nonsquare+0x446>
        {
            /* Load the accumulator with bias first */
            q31_t sum = ((q31_t)bias[i] << bias_shift) + NN_ROUND(out_shift);
 80038e4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80038e8:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 80038ec:	4413      	add	r3, r2
 80038ee:	f993 3000 	ldrsb.w	r3, [r3]
 80038f2:	461a      	mov	r2, r3
 80038f4:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	; 0xfc
 80038f8:	fa02 f303 	lsl.w	r3, r2, r3
 80038fc:	4619      	mov	r1, r3
 80038fe:	f8b7 3100 	ldrh.w	r3, [r7, #256]	; 0x100
 8003902:	2201      	movs	r2, #1
 8003904:	fa02 f303 	lsl.w	r3, r2, r3
 8003908:	085b      	lsrs	r3, r3, #1
 800390a:	440b      	add	r3, r1
 800390c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

            /* Point to the beging of the im2col buffer */
            const q15_t *pB = bufferA;
 8003910:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003914:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Each time it process 4 entries */
            uint16_t colCnt = ch_im_in * dim_kernel_y * dim_kernel_x >> 2;
 8003916:	88fb      	ldrh	r3, [r7, #6]
 8003918:	f8b7 20e4 	ldrh.w	r2, [r7, #228]	; 0xe4
 800391c:	fb02 f303 	mul.w	r3, r2, r3
 8003920:	f8b7 20e0 	ldrh.w	r2, [r7, #224]	; 0xe0
 8003924:	fb02 f303 	mul.w	r3, r2, r3
 8003928:	109b      	asrs	r3, r3, #2
 800392a:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2

            while (colCnt)
 800392e:	e0aa      	b.n	8003a86 <arm_convolve_HWC_q7_basic_nonsquare+0x3a0>
 8003930:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003934:	61fb      	str	r3, [r7, #28]
 8003936:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800393a:	673b      	str	r3, [r7, #112]	; 0x70
 800393c:	f107 0320 	add.w	r3, r7, #32
 8003940:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003942:	f107 031c 	add.w	r3, r7, #28
 8003946:	66bb      	str	r3, [r7, #104]	; 0x68
    memcpy(&val, *in_q7, 4);
 8003948:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	61bb      	str	r3, [r7, #24]
    *in_q7 += 4;
 8003950:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	1d1a      	adds	r2, r3, #4
 8003956:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003958:	601a      	str	r2, [r3, #0]
    return (val);
 800395a:	69bb      	ldr	r3, [r7, #24]
    q31_t inA = arm_nn_read_q7x4_ia(&source);
 800395c:	667b      	str	r3, [r7, #100]	; 0x64
    q31_t inAbuf1 = __SXTB16(__ROR((uint32_t)inA, 8));
 800395e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003960:	663b      	str	r3, [r7, #96]	; 0x60
 8003962:	2308      	movs	r3, #8
 8003964:	65fb      	str	r3, [r7, #92]	; 0x5c
  op2 %= 32U;
 8003966:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003968:	f003 031f 	and.w	r3, r3, #31
 800396c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (op2 == 0U)
 800396e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003970:	2b00      	cmp	r3, #0
 8003972:	d101      	bne.n	8003978 <arm_convolve_HWC_q7_basic_nonsquare+0x292>
    return op1;
 8003974:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003976:	e003      	b.n	8003980 <arm_convolve_HWC_q7_basic_nonsquare+0x29a>
  return (op1 >> op2) | (op1 << (32U - op2));
 8003978:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800397a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800397c:	fa62 f303 	ror.w	r3, r2, r3
 8003980:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8003982:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003984:	fa2f f383 	sxtb16	r3, r3
 8003988:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800398a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800398c:	653b      	str	r3, [r7, #80]	; 0x50
    q31_t inAbuf2 = __SXTB16(inA);
 800398e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003990:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8003992:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003994:	fa2f f383 	sxtb16	r3, r3
 8003998:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 800399a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800399c:	647b      	str	r3, [r7, #68]	; 0x44
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 800399e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039a0:	643b      	str	r3, [r7, #64]	; 0x40
 80039a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80039aa:	eac3 4322 	pkhtb	r3, r3, r2, asr #16
 80039ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80039b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039b2:	461a      	mov	r2, r3
 80039b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039b6:	601a      	str	r2, [r3, #0]
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 80039b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039ba:	637b      	str	r3, [r7, #52]	; 0x34
 80039bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039be:	633b      	str	r3, [r7, #48]	; 0x30
 80039c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039c4:	eac3 4302 	pkhbt	r3, r3, r2, lsl #16
 80039c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039cc:	461a      	mov	r2, r3
 80039ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039d0:	601a      	str	r2, [r3, #0]
    return source;
 80039d2:	69fb      	ldr	r3, [r7, #28]
            {
                q31_t inA1, inA2;
                q31_t inB1, inB2;

                pA = read_and_pad(pA, &inA1, &inA2);
 80039d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80039d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80039dc:	677b      	str	r3, [r7, #116]	; 0x74
    memcpy(&val, *in_q15, 4);
 80039de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	617b      	str	r3, [r7, #20]
    *in_q15 += 2;
 80039e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	1d1a      	adds	r2, r3, #4
 80039ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039ee:	601a      	str	r2, [r3, #0]
    return (val);
 80039f0:	697b      	ldr	r3, [r7, #20]

                inB1 = arm_nn_read_q15x2_ia(&pB);
 80039f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
                sum = __SMLAD(inA1, inB1, sum);
 80039f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f8:	4619      	mov	r1, r3
 80039fa:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80039fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003a02:	f8c7 1084 	str.w	r1, [r7, #132]	; 0x84
 8003a06:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003a0a:	67fb      	str	r3, [r7, #124]	; 0x7c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8003a0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a10:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003a14:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003a16:	fb23 1302 	smlad	r3, r3, r2, r1
 8003a1a:	67bb      	str	r3, [r7, #120]	; 0x78
  return(result);
 8003a1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a1e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003a22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a26:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    memcpy(&val, *in_q15, 4);
 8003a2a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	613b      	str	r3, [r7, #16]
    *in_q15 += 2;
 8003a34:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	1d1a      	adds	r2, r3, #4
 8003a3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003a40:	601a      	str	r2, [r3, #0]
    return (val);
 8003a42:	693b      	ldr	r3, [r7, #16]
                inB2 = arm_nn_read_q15x2_ia(&pB);
 8003a44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

                sum = __SMLAD(inA2, inB2, sum);
 8003a48:	6a3b      	ldr	r3, [r7, #32]
 8003a4a:	4619      	mov	r1, r3
 8003a4c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8003a50:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003a54:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8003a58:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003a5c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8003a60:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003a64:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003a68:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003a6c:	fb23 1302 	smlad	r3, r3, r2, r1
 8003a70:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  return(result);
 8003a74:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003a78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

                colCnt--;
 8003a7c:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8003a80:	3b01      	subs	r3, #1
 8003a82:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
            while (colCnt)
 8003a86:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	f47f af50 	bne.w	8003930 <arm_convolve_HWC_q7_basic_nonsquare+0x24a>
            }
            colCnt = ch_im_in * dim_kernel_y * dim_kernel_x & 0x3;
 8003a90:	88fa      	ldrh	r2, [r7, #6]
 8003a92:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 8003a96:	fb12 f303 	smulbb	r3, r2, r3
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	f8b7 20e0 	ldrh.w	r2, [r7, #224]	; 0xe0
 8003aa0:	fb12 f303 	smulbb	r3, r2, r3
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	f003 0303 	and.w	r3, r3, #3
 8003aaa:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
            while (colCnt)
 8003aae:	e01d      	b.n	8003aec <arm_convolve_HWC_q7_basic_nonsquare+0x406>
            {
                q7_t inA1 = *pA++;
 8003ab0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003ab4:	1c5a      	adds	r2, r3, #1
 8003ab6:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003aba:	781b      	ldrb	r3, [r3, #0]
 8003abc:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
                q15_t inB1 = *pB++;
 8003ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ac2:	1c9a      	adds	r2, r3, #2
 8003ac4:	62ba      	str	r2, [r7, #40]	; 0x28
 8003ac6:	881b      	ldrh	r3, [r3, #0]
 8003ac8:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
                sum += inA1 * inB1;
 8003acc:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8003ad0:	f9b7 20a4 	ldrsh.w	r2, [r7, #164]	; 0xa4
 8003ad4:	fb02 f303 	mul.w	r3, r2, r3
 8003ad8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003adc:	4413      	add	r3, r2
 8003ade:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
                colCnt--;
 8003ae2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
            while (colCnt)
 8003aec:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d1dd      	bne.n	8003ab0 <arm_convolve_HWC_q7_basic_nonsquare+0x3ca>
            }
            *pOut++ = (q7_t)__SSAT((sum >> out_shift), 8);
 8003af4:	f8b7 3100 	ldrh.w	r3, [r7, #256]	; 0x100
 8003af8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003afc:	fa42 f303 	asr.w	r3, r2, r3
 8003b00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003b04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003b08:	f303 0307 	ssat	r3, #8, r3
 8003b0c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003b10:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8003b14:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003b18:	1c5a      	adds	r2, r3, #1
 8003b1a:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8003b1e:	b24a      	sxtb	r2, r1
 8003b20:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < ch_im_out; i++)
 8003b22:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003b26:	3301      	adds	r3, #1
 8003b28:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003b2c:	f8b7 30dc 	ldrh.w	r3, [r7, #220]	; 0xdc
 8003b30:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003b34:	429a      	cmp	r2, r3
 8003b36:	f6ff aed5 	blt.w	80038e4 <arm_convolve_HWC_q7_basic_nonsquare+0x1fe>
    }

#endif /* ARM_MATH_DSP */

    /* Return to application */
    return ARM_MATH_SUCCESS;
 8003b3a:	2300      	movs	r3, #0
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	37d0      	adds	r7, #208	; 0xd0
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}

08003b44 <arm_depthwise_separable_conv_HWC_q7_nonsquare>:
                                                         q7_t *Im_out,
                                                         const uint16_t dim_im_out_x,
                                                         const uint16_t dim_im_out_y,
                                                         q15_t *bufferA,
                                                         q7_t *bufferB)
{
 8003b44:	b590      	push	{r4, r7, lr}
 8003b46:	b0eb      	sub	sp, #428	; 0x1ac
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	f107 040c 	add.w	r4, r7, #12
 8003b4e:	6020      	str	r0, [r4, #0]
 8003b50:	460c      	mov	r4, r1
 8003b52:	4610      	mov	r0, r2
 8003b54:	4619      	mov	r1, r3
 8003b56:	f107 030a 	add.w	r3, r7, #10
 8003b5a:	4622      	mov	r2, r4
 8003b5c:	801a      	strh	r2, [r3, #0]
 8003b5e:	f107 0308 	add.w	r3, r7, #8
 8003b62:	4602      	mov	r2, r0
 8003b64:	801a      	strh	r2, [r3, #0]
 8003b66:	1dbb      	adds	r3, r7, #6
 8003b68:	460a      	mov	r2, r1
 8003b6a:	801a      	strh	r2, [r3, #0]
     *
     */

    int16_t i_out_y, i_out_x;
    int16_t i_ker_y, i_ker_x;
    q7_t *colBuffer = (q7_t *)bufferA;
 8003b6c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003b70:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
    q7_t *pBuffer = colBuffer;
 8003b74:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003b78:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
    const q7_t *pBias = bias;
 8003b7c:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8003b80:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
    q7_t *pOut = Im_out;
 8003b84:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8003b88:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
    uint16_t rowCnt;
    uint16_t row_shift;

    /* do some checking here, basically ch_im_in == ch_im_out */
    if (ch_im_in != ch_im_out)
 8003b8c:	1dbb      	adds	r3, r7, #6
 8003b8e:	881a      	ldrh	r2, [r3, #0]
 8003b90:	f8b7 31bc 	ldrh.w	r3, [r7, #444]	; 0x1bc
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d003      	beq.n	8003ba0 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x5c>
    {
        return ARM_MATH_SIZE_MISMATCH;
 8003b98:	f06f 0302 	mvn.w	r3, #2
 8003b9c:	f000 bcd9 	b.w	8004552 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0xa0e>
    }

    for (i_out_y = 0; i_out_y < dim_im_out_y; i_out_y++)
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	f8a7 31a6 	strh.w	r3, [r7, #422]	; 0x1a6
 8003ba6:	f000 bccc 	b.w	8004542 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x9fe>
    {
        for (i_out_x = 0; i_out_x < dim_im_out_x; i_out_x++)
 8003baa:	2300      	movs	r3, #0
 8003bac:	f8a7 31a4 	strh.w	r3, [r7, #420]	; 0x1a4
 8003bb0:	f000 bcb9 	b.w	8004526 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x9e2>
        {
            /* we first do im2col here */
            for (i_ker_y = i_out_y * stride_y - padding_y; i_ker_y < i_out_y * stride_y - padding_y + dim_kernel_y;
 8003bb4:	f8b7 31a6 	ldrh.w	r3, [r7, #422]	; 0x1a6
 8003bb8:	f8b7 21d4 	ldrh.w	r2, [r7, #468]	; 0x1d4
 8003bbc:	fb12 f303 	smulbb	r3, r2, r3
 8003bc0:	b29a      	uxth	r2, r3
 8003bc2:	f8b7 31cc 	ldrh.w	r3, [r7, #460]	; 0x1cc
 8003bc6:	1ad3      	subs	r3, r2, r3
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	f8a7 31a2 	strh.w	r3, [r7, #418]	; 0x1a2
 8003bce:	e06b      	b.n	8003ca8 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x164>
                 i_ker_y++)
            {
                for (i_ker_x = i_out_x * stride_x - padding_x; i_ker_x < i_out_x * stride_x - padding_x + dim_kernel_x;
 8003bd0:	f8b7 31a4 	ldrh.w	r3, [r7, #420]	; 0x1a4
 8003bd4:	f8b7 21d0 	ldrh.w	r2, [r7, #464]	; 0x1d0
 8003bd8:	fb12 f303 	smulbb	r3, r2, r3
 8003bdc:	b29a      	uxth	r2, r3
 8003bde:	f8b7 31c8 	ldrh.w	r3, [r7, #456]	; 0x1c8
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	f8a7 31a0 	strh.w	r3, [r7, #416]	; 0x1a0
 8003bea:	e046      	b.n	8003c7a <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x136>
                     i_ker_x++)
                {
                    if (i_ker_y < 0 || i_ker_y >= dim_im_in_y || i_ker_x < 0 || i_ker_x >= dim_im_in_x)
 8003bec:	f9b7 31a2 	ldrsh.w	r3, [r7, #418]	; 0x1a2
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	db11      	blt.n	8003c18 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0xd4>
 8003bf4:	f9b7 21a2 	ldrsh.w	r2, [r7, #418]	; 0x1a2
 8003bf8:	f107 0308 	add.w	r3, r7, #8
 8003bfc:	881b      	ldrh	r3, [r3, #0]
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	da0a      	bge.n	8003c18 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0xd4>
 8003c02:	f9b7 31a0 	ldrsh.w	r3, [r7, #416]	; 0x1a0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	db06      	blt.n	8003c18 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0xd4>
 8003c0a:	f9b7 21a0 	ldrsh.w	r2, [r7, #416]	; 0x1a0
 8003c0e:	f107 030a 	add.w	r3, r7, #10
 8003c12:	881b      	ldrh	r3, [r3, #0]
 8003c14:	429a      	cmp	r2, r3
 8003c16:	db08      	blt.n	8003c2a <arm_depthwise_separable_conv_HWC_q7_nonsquare+0xe6>
                    {
                        /* arm_fill_q7(0, pBuffer, ch_im_in); */
                        memset(pBuffer, 0, ch_im_in);
 8003c18:	1dbb      	adds	r3, r7, #6
 8003c1a:	881b      	ldrh	r3, [r3, #0]
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	2100      	movs	r1, #0
 8003c20:	f8d7 019c 	ldr.w	r0, [r7, #412]	; 0x19c
 8003c24:	f00b fdde 	bl	800f7e4 <memset>
 8003c28:	e019      	b.n	8003c5e <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x11a>
                    }
                    else
                    {
                        /* arm_copy_q7((q7_t *) Im_in + (i_ker_y * dim_im_in_x + i_ker_x) * ch_im_in, pBuffer,
                         * ch_im_in); */
                        memcpy(pBuffer, (q7_t *)Im_in + (i_ker_y * dim_im_in_x + i_ker_x) * ch_im_in, ch_im_in);
 8003c2a:	f9b7 31a2 	ldrsh.w	r3, [r7, #418]	; 0x1a2
 8003c2e:	f107 020a 	add.w	r2, r7, #10
 8003c32:	8812      	ldrh	r2, [r2, #0]
 8003c34:	fb02 f203 	mul.w	r2, r2, r3
 8003c38:	f9b7 31a0 	ldrsh.w	r3, [r7, #416]	; 0x1a0
 8003c3c:	4413      	add	r3, r2
 8003c3e:	1dba      	adds	r2, r7, #6
 8003c40:	8812      	ldrh	r2, [r2, #0]
 8003c42:	fb02 f303 	mul.w	r3, r2, r3
 8003c46:	461a      	mov	r2, r3
 8003c48:	f107 030c 	add.w	r3, r7, #12
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	1899      	adds	r1, r3, r2
 8003c50:	1dbb      	adds	r3, r7, #6
 8003c52:	881b      	ldrh	r3, [r3, #0]
 8003c54:	461a      	mov	r2, r3
 8003c56:	f8d7 019c 	ldr.w	r0, [r7, #412]	; 0x19c
 8003c5a:	f00b fd9b 	bl	800f794 <memcpy>
                    }
                    pBuffer += ch_im_in;
 8003c5e:	1dbb      	adds	r3, r7, #6
 8003c60:	881b      	ldrh	r3, [r3, #0]
 8003c62:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8003c66:	4413      	add	r3, r2
 8003c68:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
                     i_ker_x++)
 8003c6c:	f9b7 31a0 	ldrsh.w	r3, [r7, #416]	; 0x1a0
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	3301      	adds	r3, #1
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	f8a7 31a0 	strh.w	r3, [r7, #416]	; 0x1a0
                for (i_ker_x = i_out_x * stride_x - padding_x; i_ker_x < i_out_x * stride_x - padding_x + dim_kernel_x;
 8003c7a:	f9b7 21a0 	ldrsh.w	r2, [r7, #416]	; 0x1a0
 8003c7e:	f9b7 31a4 	ldrsh.w	r3, [r7, #420]	; 0x1a4
 8003c82:	f8b7 11d0 	ldrh.w	r1, [r7, #464]	; 0x1d0
 8003c86:	fb01 f103 	mul.w	r1, r1, r3
 8003c8a:	f8b7 31c8 	ldrh.w	r3, [r7, #456]	; 0x1c8
 8003c8e:	1ac9      	subs	r1, r1, r3
 8003c90:	f8b7 31c0 	ldrh.w	r3, [r7, #448]	; 0x1c0
 8003c94:	440b      	add	r3, r1
 8003c96:	429a      	cmp	r2, r3
 8003c98:	dba8      	blt.n	8003bec <arm_depthwise_separable_conv_HWC_q7_nonsquare+0xa8>
                 i_ker_y++)
 8003c9a:	f9b7 31a2 	ldrsh.w	r3, [r7, #418]	; 0x1a2
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	3301      	adds	r3, #1
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	f8a7 31a2 	strh.w	r3, [r7, #418]	; 0x1a2
            for (i_ker_y = i_out_y * stride_y - padding_y; i_ker_y < i_out_y * stride_y - padding_y + dim_kernel_y;
 8003ca8:	f9b7 21a2 	ldrsh.w	r2, [r7, #418]	; 0x1a2
 8003cac:	f9b7 31a6 	ldrsh.w	r3, [r7, #422]	; 0x1a6
 8003cb0:	f8b7 11d4 	ldrh.w	r1, [r7, #468]	; 0x1d4
 8003cb4:	fb01 f103 	mul.w	r1, r1, r3
 8003cb8:	f8b7 31cc 	ldrh.w	r3, [r7, #460]	; 0x1cc
 8003cbc:	1ac9      	subs	r1, r1, r3
 8003cbe:	f8b7 31c4 	ldrh.w	r3, [r7, #452]	; 0x1c4
 8003cc2:	440b      	add	r3, r1
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	db83      	blt.n	8003bd0 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x8c>
                }
            }

            /* we will do the computation here for each channel */
            rowCnt = ch_im_out >> 2;
 8003cc8:	f8b7 31bc 	ldrh.w	r3, [r7, #444]	; 0x1bc
 8003ccc:	089b      	lsrs	r3, r3, #2
 8003cce:	f8a7 3192 	strh.w	r3, [r7, #402]	; 0x192
            row_shift = 0;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	f8a7 3190 	strh.w	r3, [r7, #400]	; 0x190
            pBias = bias;
 8003cd8:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8003cdc:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198

            while (rowCnt)
 8003ce0:	e38c      	b.n	80043fc <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x8b8>
            {
                q31_t sum = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 8003ce2:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8003ce6:	1c5a      	adds	r2, r3, #1
 8003ce8:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003cec:	f993 3000 	ldrsb.w	r3, [r3]
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	f8b7 31dc 	ldrh.w	r3, [r7, #476]	; 0x1dc
 8003cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	f8b7 31e0 	ldrh.w	r3, [r7, #480]	; 0x1e0
 8003d00:	2201      	movs	r2, #1
 8003d02:	fa02 f303 	lsl.w	r3, r2, r3
 8003d06:	085b      	lsrs	r3, r3, #1
 8003d08:	440b      	add	r3, r1
 8003d0a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
                q31_t sum2 = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 8003d0e:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8003d12:	1c5a      	adds	r2, r3, #1
 8003d14:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003d18:	f993 3000 	ldrsb.w	r3, [r3]
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	f8b7 31dc 	ldrh.w	r3, [r7, #476]	; 0x1dc
 8003d22:	fa02 f303 	lsl.w	r3, r2, r3
 8003d26:	4619      	mov	r1, r3
 8003d28:	f8b7 31e0 	ldrh.w	r3, [r7, #480]	; 0x1e0
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d32:	085b      	lsrs	r3, r3, #1
 8003d34:	440b      	add	r3, r1
 8003d36:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
                q31_t sum3 = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 8003d3a:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8003d3e:	1c5a      	adds	r2, r3, #1
 8003d40:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003d44:	f993 3000 	ldrsb.w	r3, [r3]
 8003d48:	461a      	mov	r2, r3
 8003d4a:	f8b7 31dc 	ldrh.w	r3, [r7, #476]	; 0x1dc
 8003d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d52:	4619      	mov	r1, r3
 8003d54:	f8b7 31e0 	ldrh.w	r3, [r7, #480]	; 0x1e0
 8003d58:	2201      	movs	r2, #1
 8003d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5e:	085b      	lsrs	r3, r3, #1
 8003d60:	440b      	add	r3, r1
 8003d62:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
                q31_t sum4 = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 8003d66:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8003d6a:	1c5a      	adds	r2, r3, #1
 8003d6c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003d70:	f993 3000 	ldrsb.w	r3, [r3]
 8003d74:	461a      	mov	r2, r3
 8003d76:	f8b7 31dc 	ldrh.w	r3, [r7, #476]	; 0x1dc
 8003d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7e:	4619      	mov	r1, r3
 8003d80:	f8b7 31e0 	ldrh.w	r3, [r7, #480]	; 0x1e0
 8003d84:	2201      	movs	r2, #1
 8003d86:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8a:	085b      	lsrs	r3, r3, #1
 8003d8c:	440b      	add	r3, r1
 8003d8e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180

                uint16_t colCnt = (dim_kernel_x * dim_kernel_y) >> 1;
 8003d92:	f8b7 31c0 	ldrh.w	r3, [r7, #448]	; 0x1c0
 8003d96:	f8b7 21c4 	ldrh.w	r2, [r7, #452]	; 0x1c4
 8003d9a:	fb02 f303 	mul.w	r3, r2, r3
 8003d9e:	105b      	asrs	r3, r3, #1
 8003da0:	f8a7 317e 	strh.w	r3, [r7, #382]	; 0x17e
                q7_t *pB = colBuffer + row_shift;
 8003da4:	f8b7 3190 	ldrh.w	r3, [r7, #400]	; 0x190
 8003da8:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8003dac:	4413      	add	r3, r2
 8003dae:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
                const q7_t *pA = wt + row_shift;
 8003db2:	f8b7 3190 	ldrh.w	r3, [r7, #400]	; 0x190
 8003db6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003dba:	4413      	add	r3, r2
 8003dbc:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
                row_shift += 4;
 8003dc0:	f8b7 3190 	ldrh.w	r3, [r7, #400]	; 0x190
 8003dc4:	3304      	adds	r3, #4
 8003dc6:	f8a7 3190 	strh.w	r3, [r7, #400]	; 0x190

#ifdef USE_INTRINSIC

#ifndef ARM_MATH_BIG_ENDIAN

                while (colCnt)
 8003dca:	e228      	b.n	800421e <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x6da>
 8003dcc:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8003dd0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003dd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 8003ddc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003de0:	601a      	str	r2, [r3, #0]
    return (val);
 8003de2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003de6:	681b      	ldr	r3, [r3, #0]
                {
                    q31_t inA1, inA2, inB1, inB2, opA, opB;

                    inB1 = arm_nn_read_q7x4(pB);
 8003de8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
                    pB += ch_im_in;
 8003dec:	1dbb      	adds	r3, r7, #6
 8003dee:	881b      	ldrh	r3, [r3, #0]
 8003df0:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003df4:	4413      	add	r3, r2
 8003df6:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8003dfa:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8003dfe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003e02:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 8003e0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e0e:	601a      	str	r2, [r3, #0]
    return (val);
 8003e10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e14:	681b      	ldr	r3, [r3, #0]
                    opB = arm_nn_read_q7x4(pB);
 8003e16:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    pB += ch_im_in;
 8003e1a:	1dbb      	adds	r3, r7, #6
 8003e1c:	881b      	ldrh	r3, [r3, #0]
 8003e1e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003e22:	4413      	add	r3, r2
 8003e24:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
                    inB2 = __PKHTB(opB, inB1, 16);
 8003e28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003e2c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003e30:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003e34:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003e38:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003e3c:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8003e40:	eac3 4322 	pkhtb	r3, r3, r2, asr #16
 8003e44:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003e48:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003e4c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
                    inB1 = __PKHBT(inB1, opB, 16);
 8003e50:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003e54:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8003e58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003e5c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8003e60:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003e64:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003e68:	eac3 4302 	pkhbt	r3, r3, r2, lsl #16
 8003e6c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8003e70:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003e74:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8003e78:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8003e7c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003e80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 8003e88:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003e8c:	601a      	str	r2, [r3, #0]
    return (val);
 8003e8e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003e92:	681b      	ldr	r3, [r3, #0]
                    inA1 = arm_nn_read_q7x4(pA);
 8003e94:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
                    pA += ch_im_in;
 8003e98:	1dbb      	adds	r3, r7, #6
 8003e9a:	881b      	ldrh	r3, [r3, #0]
 8003e9c:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003ea0:	4413      	add	r3, r2
 8003ea2:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8003ea6:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8003eaa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003eae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 8003eb6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003eba:	601a      	str	r2, [r3, #0]
    return (val);
 8003ebc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ec0:	681b      	ldr	r3, [r3, #0]
                    opB = arm_nn_read_q7x4(pA);
 8003ec2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    pA += ch_im_in;
 8003ec6:	1dbb      	adds	r3, r7, #6
 8003ec8:	881b      	ldrh	r3, [r3, #0]
 8003eca:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003ece:	4413      	add	r3, r2
 8003ed0:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
                    inA2 = __PKHTB(opB, inA1, 16);
 8003ed4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003ed8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003edc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ee0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003ee4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003ee8:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8003eec:	eac3 4322 	pkhtb	r3, r3, r2, asr #16
 8003ef0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003ef4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003ef8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
                    inA1 = __PKHBT(inA1, opB, 16);
 8003efc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f00:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003f04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003f08:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003f0c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003f10:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8003f14:	eac3 4302 	pkhbt	r3, r3, r2, lsl #16
 8003f18:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003f1c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003f20:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
                    opA = __SXTB16(inA1);
 8003f24:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8003f28:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003f2c:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8003f2e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	fa2f f283 	sxtb16	r2, r3
 8003f38:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003f3c:	601a      	str	r2, [r3, #0]
  return(result);
 8003f3e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
                    opB = __SXTB16(inB1);
 8003f48:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8003f4c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003f50:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8003f52:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	fa2f f283 	sxtb16	r2, r3
 8003f5c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003f60:	601a      	str	r2, [r3, #0]
  return(result);
 8003f62:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    sum = __SMLAD(opA, opB, sum);
 8003f6c:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 8003f70:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 8003f74:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8003f78:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003f7c:	6018      	str	r0, [r3, #0]
 8003f7e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003f82:	6019      	str	r1, [r3, #0]
 8003f84:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003f88:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8003f8a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8003f94:	6812      	ldr	r2, [r2, #0]
 8003f96:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8003f9a:	6809      	ldr	r1, [r1, #0]
 8003f9c:	fb23 1202 	smlad	r2, r3, r2, r1
 8003fa0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003fa4:	601a      	str	r2, [r3, #0]
  return(result);
 8003fa6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
                    opA = __SXTB16(__ROR(inA1, 8));
 8003fb0:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8003fb4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003fb8:	601a      	str	r2, [r3, #0]
 8003fba:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003fbe:	2208      	movs	r2, #8
 8003fc0:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 8003fc2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003fc6:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003fca:	6812      	ldr	r2, [r2, #0]
 8003fcc:	f002 021f 	and.w	r2, r2, #31
 8003fd0:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8003fd2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d103      	bne.n	8003fe4 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x4a0>
    return op1;
 8003fdc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	e007      	b.n	8003ff4 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x4b0>
  return (op1 >> op2) | (op1 << (32U - op2));
 8003fe4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003fe8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003fec:	6812      	ldr	r2, [r2, #0]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	fa62 f303 	ror.w	r3, r2, r3
 8003ff4:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003ff8:	6013      	str	r3, [r2, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8003ffa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	fa2f f283 	sxtb16	r2, r3
 8004004:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004008:	601a      	str	r2, [r3, #0]
  return(result);
 800400a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
                    opB = __SXTB16(__ROR(inB1, 8));
 8004014:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8004018:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800401c:	601a      	str	r2, [r3, #0]
 800401e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004022:	2208      	movs	r2, #8
 8004024:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 8004026:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800402a:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800402e:	6812      	ldr	r2, [r2, #0]
 8004030:	f002 021f 	and.w	r2, r2, #31
 8004034:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8004036:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d103      	bne.n	8004048 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x504>
    return op1;
 8004040:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	e007      	b.n	8004058 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x514>
  return (op1 >> op2) | (op1 << (32U - op2));
 8004048:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800404c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004050:	6812      	ldr	r2, [r2, #0]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	fa62 f303 	ror.w	r3, r2, r3
 8004058:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800405c:	6013      	str	r3, [r2, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800405e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	fa2f f283 	sxtb16	r2, r3
 8004068:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800406c:	601a      	str	r2, [r3, #0]
  return(result);
 800406e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    sum2 = __SMLAD(opA, opB, sum2);
 8004078:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 800407c:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 8004080:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 8004084:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8004088:	6018      	str	r0, [r3, #0]
 800408a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800408e:	6019      	str	r1, [r3, #0]
 8004090:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004094:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8004096:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80040a0:	6812      	ldr	r2, [r2, #0]
 80040a2:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80040a6:	6809      	ldr	r1, [r1, #0]
 80040a8:	fb23 1202 	smlad	r2, r3, r2, r1
 80040ac:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80040b0:	601a      	str	r2, [r3, #0]
  return(result);
 80040b2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
                    opA = __SXTB16(inA2);
 80040bc:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 80040c0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80040c4:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80040c6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	fa2f f283 	sxtb16	r2, r3
 80040d0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80040d4:	601a      	str	r2, [r3, #0]
  return(result);
 80040d6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
                    opB = __SXTB16(inB2);
 80040e0:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80040e4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80040e8:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80040ea:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	fa2f f283 	sxtb16	r2, r3
 80040f4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80040f8:	601a      	str	r2, [r3, #0]
  return(result);
 80040fa:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    sum3 = __SMLAD(opA, opB, sum3);
 8004104:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 8004108:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 800410c:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 8004110:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8004114:	6018      	str	r0, [r3, #0]
 8004116:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800411a:	6019      	str	r1, [r3, #0]
 800411c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004120:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8004122:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800412c:	6812      	ldr	r2, [r2, #0]
 800412e:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8004132:	6809      	ldr	r1, [r1, #0]
 8004134:	fb23 1202 	smlad	r2, r3, r2, r1
 8004138:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800413c:	601a      	str	r2, [r3, #0]
  return(result);
 800413e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
                    opA = __SXTB16(__ROR(inA2, 8));
 8004148:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800414c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004150:	2308      	movs	r3, #8
 8004152:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  op2 %= 32U;
 8004156:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800415a:	f003 031f 	and.w	r3, r3, #31
 800415e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (op2 == 0U)
 8004162:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004166:	2b00      	cmp	r3, #0
 8004168:	d102      	bne.n	8004170 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x62c>
    return op1;
 800416a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800416e:	e005      	b.n	800417c <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x638>
  return (op1 >> op2) | (op1 << (32U - op2));
 8004170:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004174:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004178:	fa62 f303 	ror.w	r3, r2, r3
 800417c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8004180:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004184:	fa2f f383 	sxtb16	r3, r3
 8004188:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return(result);
 800418c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004190:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
                    opB = __SXTB16(__ROR(inB2, 8));
 8004194:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004198:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800419c:	2308      	movs	r3, #8
 800419e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  op2 %= 32U;
 80041a2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80041a6:	f003 031f 	and.w	r3, r3, #31
 80041aa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (op2 == 0U)
 80041ae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d102      	bne.n	80041bc <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x678>
    return op1;
 80041b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80041ba:	e005      	b.n	80041c8 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x684>
  return (op1 >> op2) | (op1 << (32U - op2));
 80041bc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80041c0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80041c4:	fa62 f303 	ror.w	r3, r2, r3
 80041c8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80041cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80041d0:	fa2f f383 	sxtb16	r3, r3
 80041d4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  return(result);
 80041d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80041dc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    sum4 = __SMLAD(opA, opB, sum4);
 80041e0:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 80041e4:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80041e8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80041ec:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 80041f0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80041f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80041f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80041fc:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8004200:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8004204:	fb23 1302 	smlad	r3, r3, r2, r1
 8004208:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  return(result);
 800420c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004210:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
                    colCnt--;
 8004214:	f8b7 317e 	ldrh.w	r3, [r7, #382]	; 0x17e
 8004218:	3b01      	subs	r3, #1
 800421a:	f8a7 317e 	strh.w	r3, [r7, #382]	; 0x17e
                while (colCnt)
 800421e:	f8b7 317e 	ldrh.w	r3, [r7, #382]	; 0x17e
 8004222:	2b00      	cmp	r3, #0
 8004224:	f47f add2 	bne.w	8003dcc <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x288>
                             : "r0", "r1", "r2", "r3", "r4", "r5");
#endif /*ARM_MATH_BIG_ENDIAN */

#endif /* USE_INTRINSIC */

                colCnt = (dim_kernel_x * dim_kernel_y) & 0x1;
 8004228:	f8b7 21c0 	ldrh.w	r2, [r7, #448]	; 0x1c0
 800422c:	f8b7 31c4 	ldrh.w	r3, [r7, #452]	; 0x1c4
 8004230:	fb12 f303 	smulbb	r3, r2, r3
 8004234:	b29b      	uxth	r3, r3
 8004236:	f003 0301 	and.w	r3, r3, #1
 800423a:	f8a7 317e 	strh.w	r3, [r7, #382]	; 0x17e
                while (colCnt)
 800423e:	e078      	b.n	8004332 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x7ee>
 8004240:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004244:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8004248:	601a      	str	r2, [r3, #0]
 800424a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 8004254:	f107 0318 	add.w	r3, r7, #24
 8004258:	601a      	str	r2, [r3, #0]
    return (val);
 800425a:	f107 0318 	add.w	r3, r7, #24
 800425e:	681a      	ldr	r2, [r3, #0]
                {
                    union arm_nnword inA, inB;
                    inA.word = arm_nn_read_q7x4(pA);
 8004260:	f107 0320 	add.w	r3, r7, #32
 8004264:	601a      	str	r2, [r3, #0]
                    pA += ch_im_in;
 8004266:	1dbb      	adds	r3, r7, #6
 8004268:	881b      	ldrh	r3, [r3, #0]
 800426a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800426e:	4413      	add	r3, r2
 8004270:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8004274:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004278:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800427c:	601a      	str	r2, [r3, #0]
 800427e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 8004288:	f107 0314 	add.w	r3, r7, #20
 800428c:	601a      	str	r2, [r3, #0]
    return (val);
 800428e:	f107 0314 	add.w	r3, r7, #20
 8004292:	681a      	ldr	r2, [r3, #0]
                    inB.word = arm_nn_read_q7x4(pB);
 8004294:	f107 031c 	add.w	r3, r7, #28
 8004298:	601a      	str	r2, [r3, #0]
                    pB += ch_im_in;
 800429a:	1dbb      	adds	r3, r7, #6
 800429c:	881b      	ldrh	r3, [r3, #0]
 800429e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80042a2:	4413      	add	r3, r2
 80042a4:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
                    sum += inA.bytes[0] * inB.bytes[0];
 80042a8:	f107 0320 	add.w	r3, r7, #32
 80042ac:	f993 3000 	ldrsb.w	r3, [r3]
 80042b0:	461a      	mov	r2, r3
 80042b2:	f107 031c 	add.w	r3, r7, #28
 80042b6:	f993 3000 	ldrsb.w	r3, [r3]
 80042ba:	fb03 f302 	mul.w	r3, r3, r2
 80042be:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 80042c2:	4413      	add	r3, r2
 80042c4:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
                    sum2 += inA.bytes[1] * inB.bytes[1];
 80042c8:	f107 0320 	add.w	r3, r7, #32
 80042cc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80042d0:	461a      	mov	r2, r3
 80042d2:	f107 031c 	add.w	r3, r7, #28
 80042d6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80042da:	fb03 f302 	mul.w	r3, r3, r2
 80042de:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 80042e2:	4413      	add	r3, r2
 80042e4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
                    sum3 += inA.bytes[2] * inB.bytes[2];
 80042e8:	f107 0320 	add.w	r3, r7, #32
 80042ec:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80042f0:	461a      	mov	r2, r3
 80042f2:	f107 031c 	add.w	r3, r7, #28
 80042f6:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80042fa:	fb03 f302 	mul.w	r3, r3, r2
 80042fe:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 8004302:	4413      	add	r3, r2
 8004304:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
                    sum4 += inA.bytes[3] * inB.bytes[3];
 8004308:	f107 0320 	add.w	r3, r7, #32
 800430c:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8004310:	461a      	mov	r2, r3
 8004312:	f107 031c 	add.w	r3, r7, #28
 8004316:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800431a:	fb03 f302 	mul.w	r3, r3, r2
 800431e:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8004322:	4413      	add	r3, r2
 8004324:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
                    colCnt--;
 8004328:	f8b7 317e 	ldrh.w	r3, [r7, #382]	; 0x17e
 800432c:	3b01      	subs	r3, #1
 800432e:	f8a7 317e 	strh.w	r3, [r7, #382]	; 0x17e
                while (colCnt)
 8004332:	f8b7 317e 	ldrh.w	r3, [r7, #382]	; 0x17e
 8004336:	2b00      	cmp	r3, #0
 8004338:	d182      	bne.n	8004240 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x6fc>
                }

                *pOut++ = (q7_t)__SSAT((sum >> out_shift), 8);
 800433a:	f8b7 31e0 	ldrh.w	r3, [r7, #480]	; 0x1e0
 800433e:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8004342:	fa42 f303 	asr.w	r3, r2, r3
 8004346:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800434a:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800434e:	f303 0307 	ssat	r3, #8, r3
 8004352:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004356:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 800435a:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800435e:	1c5a      	adds	r2, r3, #1
 8004360:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 8004364:	b24a      	sxtb	r2, r1
 8004366:	701a      	strb	r2, [r3, #0]
                *pOut++ = (q7_t)__SSAT((sum2 >> out_shift), 8);
 8004368:	f8b7 31e0 	ldrh.w	r3, [r7, #480]	; 0x1e0
 800436c:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 8004370:	fa42 f303 	asr.w	r3, r2, r3
 8004374:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8004378:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800437c:	f303 0307 	ssat	r3, #8, r3
 8004380:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8004384:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8004388:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800438c:	1c5a      	adds	r2, r3, #1
 800438e:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 8004392:	b24a      	sxtb	r2, r1
 8004394:	701a      	strb	r2, [r3, #0]
                *pOut++ = (q7_t)__SSAT((sum3 >> out_shift), 8);
 8004396:	f8b7 31e0 	ldrh.w	r3, [r7, #480]	; 0x1e0
 800439a:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 800439e:	fa42 f303 	asr.w	r3, r2, r3
 80043a2:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 80043a6:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80043aa:	f303 0307 	ssat	r3, #8, r3
 80043ae:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 80043b2:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80043b6:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80043ba:	1c5a      	adds	r2, r3, #1
 80043bc:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 80043c0:	b24a      	sxtb	r2, r1
 80043c2:	701a      	strb	r2, [r3, #0]
                *pOut++ = (q7_t)__SSAT((sum4 >> out_shift), 8);
 80043c4:	f8b7 31e0 	ldrh.w	r3, [r7, #480]	; 0x1e0
 80043c8:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 80043cc:	fa42 f303 	asr.w	r3, r2, r3
 80043d0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80043d4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80043d8:	f303 0307 	ssat	r3, #8, r3
 80043dc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80043e0:	f8d7 1134 	ldr.w	r1, [r7, #308]	; 0x134
 80043e4:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80043e8:	1c5a      	adds	r2, r3, #1
 80043ea:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 80043ee:	b24a      	sxtb	r2, r1
 80043f0:	701a      	strb	r2, [r3, #0]

                rowCnt--;
 80043f2:	f8b7 3192 	ldrh.w	r3, [r7, #402]	; 0x192
 80043f6:	3b01      	subs	r3, #1
 80043f8:	f8a7 3192 	strh.w	r3, [r7, #402]	; 0x192
            while (rowCnt)
 80043fc:	f8b7 3192 	ldrh.w	r3, [r7, #402]	; 0x192
 8004400:	2b00      	cmp	r3, #0
 8004402:	f47f ac6e 	bne.w	8003ce2 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x19e>
            }

            rowCnt = ch_im_out & 0x3;
 8004406:	f8b7 31bc 	ldrh.w	r3, [r7, #444]	; 0x1bc
 800440a:	f003 0303 	and.w	r3, r3, #3
 800440e:	f8a7 3192 	strh.w	r3, [r7, #402]	; 0x192
            while (rowCnt)
 8004412:	e079      	b.n	8004508 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x9c4>
            {
                q7_t *pB = colBuffer + row_shift;
 8004414:	f8b7 3190 	ldrh.w	r3, [r7, #400]	; 0x190
 8004418:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 800441c:	4413      	add	r3, r2
 800441e:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
                const q7_t *pA = wt + row_shift;
 8004422:	f8b7 3190 	ldrh.w	r3, [r7, #400]	; 0x190
 8004426:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800442a:	4413      	add	r3, r2
 800442c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
                q31_t sum = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 8004430:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8004434:	1c5a      	adds	r2, r3, #1
 8004436:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800443a:	f993 3000 	ldrsb.w	r3, [r3]
 800443e:	461a      	mov	r2, r3
 8004440:	f8b7 31dc 	ldrh.w	r3, [r7, #476]	; 0x1dc
 8004444:	fa02 f303 	lsl.w	r3, r2, r3
 8004448:	4619      	mov	r1, r3
 800444a:	f8b7 31e0 	ldrh.w	r3, [r7, #480]	; 0x1e0
 800444e:	2201      	movs	r2, #1
 8004450:	fa02 f303 	lsl.w	r3, r2, r3
 8004454:	085b      	lsrs	r3, r3, #1
 8004456:	440b      	add	r3, r1
 8004458:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
                uint16_t colCnt = (dim_kernel_x * dim_kernel_y);
 800445c:	f8b7 21c0 	ldrh.w	r2, [r7, #448]	; 0x1c0
 8004460:	f8b7 31c4 	ldrh.w	r3, [r7, #452]	; 0x1c4
 8004464:	fb12 f303 	smulbb	r3, r2, r3
 8004468:	f8a7 3166 	strh.w	r3, [r7, #358]	; 0x166

                row_shift += 1;
 800446c:	f8b7 3190 	ldrh.w	r3, [r7, #400]	; 0x190
 8004470:	3301      	adds	r3, #1
 8004472:	f8a7 3190 	strh.w	r3, [r7, #400]	; 0x190

                while (colCnt)
 8004476:	e027      	b.n	80044c8 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x984>
                {
                    q7_t A1 = *pA;
 8004478:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800447c:	781b      	ldrb	r3, [r3, #0]
 800447e:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
                    q7_t B1 = *pB;
 8004482:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	f887 3156 	strb.w	r3, [r7, #342]	; 0x156
                    pA += ch_im_in;
 800448c:	1dbb      	adds	r3, r7, #6
 800448e:	881b      	ldrh	r3, [r3, #0]
 8004490:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8004494:	4413      	add	r3, r2
 8004496:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
                    pB += ch_im_in;
 800449a:	1dbb      	adds	r3, r7, #6
 800449c:	881b      	ldrh	r3, [r3, #0]
 800449e:	f8d7 2170 	ldr.w	r2, [r7, #368]	; 0x170
 80044a2:	4413      	add	r3, r2
 80044a4:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
                    sum += A1 * B1;
 80044a8:	f997 3157 	ldrsb.w	r3, [r7, #343]	; 0x157
 80044ac:	f997 2156 	ldrsb.w	r2, [r7, #342]	; 0x156
 80044b0:	fb02 f303 	mul.w	r3, r2, r3
 80044b4:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 80044b8:	4413      	add	r3, r2
 80044ba:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168

                    colCnt--;
 80044be:	f8b7 3166 	ldrh.w	r3, [r7, #358]	; 0x166
 80044c2:	3b01      	subs	r3, #1
 80044c4:	f8a7 3166 	strh.w	r3, [r7, #358]	; 0x166
                while (colCnt)
 80044c8:	f8b7 3166 	ldrh.w	r3, [r7, #358]	; 0x166
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d1d3      	bne.n	8004478 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x934>
                }
                *pOut++ = (q7_t)__SSAT((sum >> out_shift), 8);
 80044d0:	f8b7 31e0 	ldrh.w	r3, [r7, #480]	; 0x1e0
 80044d4:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 80044d8:	fa42 f303 	asr.w	r3, r2, r3
 80044dc:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 80044e0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80044e4:	f303 0307 	ssat	r3, #8, r3
 80044e8:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80044ec:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 80044f0:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80044f4:	1c5a      	adds	r2, r3, #1
 80044f6:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 80044fa:	b24a      	sxtb	r2, r1
 80044fc:	701a      	strb	r2, [r3, #0]
                rowCnt--;
 80044fe:	f8b7 3192 	ldrh.w	r3, [r7, #402]	; 0x192
 8004502:	3b01      	subs	r3, #1
 8004504:	f8a7 3192 	strh.w	r3, [r7, #402]	; 0x192
            while (rowCnt)
 8004508:	f8b7 3192 	ldrh.w	r3, [r7, #402]	; 0x192
 800450c:	2b00      	cmp	r3, #0
 800450e:	d181      	bne.n	8004414 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x8d0>
            }

            // clear counter and pointers
            pBuffer = colBuffer;
 8004510:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004514:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
        for (i_out_x = 0; i_out_x < dim_im_out_x; i_out_x++)
 8004518:	f9b7 31a4 	ldrsh.w	r3, [r7, #420]	; 0x1a4
 800451c:	b29b      	uxth	r3, r3
 800451e:	3301      	adds	r3, #1
 8004520:	b29b      	uxth	r3, r3
 8004522:	f8a7 31a4 	strh.w	r3, [r7, #420]	; 0x1a4
 8004526:	f9b7 21a4 	ldrsh.w	r2, [r7, #420]	; 0x1a4
 800452a:	f8b7 31e8 	ldrh.w	r3, [r7, #488]	; 0x1e8
 800452e:	429a      	cmp	r2, r3
 8004530:	f6ff ab40 	blt.w	8003bb4 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x70>
    for (i_out_y = 0; i_out_y < dim_im_out_y; i_out_y++)
 8004534:	f9b7 31a6 	ldrsh.w	r3, [r7, #422]	; 0x1a6
 8004538:	b29b      	uxth	r3, r3
 800453a:	3301      	adds	r3, #1
 800453c:	b29b      	uxth	r3, r3
 800453e:	f8a7 31a6 	strh.w	r3, [r7, #422]	; 0x1a6
 8004542:	f9b7 21a6 	ldrsh.w	r2, [r7, #422]	; 0x1a6
 8004546:	f8b7 31ec 	ldrh.w	r3, [r7, #492]	; 0x1ec
 800454a:	429a      	cmp	r2, r3
 800454c:	f6ff ab2d 	blt.w	8003baa <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x66>
    }

#endif /* ARM_MATH_DSP */

    /* Return to application */
    return ARM_MATH_SUCCESS;
 8004550:	2300      	movs	r3, #0
}
 8004552:	4618      	mov	r0, r3
 8004554:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 8004558:	46bd      	mov	sp, r7
 800455a:	bd90      	pop	{r4, r7, pc}

0800455c <arm_nn_mat_mult_kernel_q7_q15>:
                                    const uint16_t numCol_A,
                                    const uint16_t bias_shift,
                                    const uint16_t out_shift,
                                    const q7_t *bias,
                                    q7_t *pOut)
{
 800455c:	b490      	push	{r4, r7}
 800455e:	f5ad 7d2a 	sub.w	sp, sp, #680	; 0x2a8
 8004562:	af00      	add	r7, sp, #0
 8004564:	f107 040c 	add.w	r4, r7, #12
 8004568:	6020      	str	r0, [r4, #0]
 800456a:	f107 0008 	add.w	r0, r7, #8
 800456e:	6001      	str	r1, [r0, #0]
 8004570:	4619      	mov	r1, r3
 8004572:	1dbb      	adds	r3, r7, #6
 8004574:	801a      	strh	r2, [r3, #0]
 8004576:	1d3b      	adds	r3, r7, #4
 8004578:	460a      	mov	r2, r1
 800457a:	801a      	strh	r2, [r3, #0]
#if defined(ARM_MATH_DSP)
    /* set up the second output pointers */
    q7_t *pOut2 = pOut + ch_im_out;
 800457c:	1dbb      	adds	r3, r7, #6
 800457e:	881b      	ldrh	r3, [r3, #0]
 8004580:	f8d7 22bc 	ldr.w	r2, [r7, #700]	; 0x2bc
 8004584:	4413      	add	r3, r2
 8004586:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
    const q7_t *pBias = bias;
 800458a:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 800458e:	f8c7 32a0 	str.w	r3, [r7, #672]	; 0x2a0

    uint16_t rowCnt = ch_im_out >> 1;
 8004592:	1dbb      	adds	r3, r7, #6
 8004594:	881b      	ldrh	r3, [r3, #0]
 8004596:	085b      	lsrs	r3, r3, #1
 8004598:	f8a7 329e 	strh.w	r3, [r7, #670]	; 0x29e
    /* this loop over rows in A */
    while (rowCnt)
 800459c:	f000 bc03 	b.w	8004da6 <arm_nn_mat_mult_kernel_q7_q15+0x84a>
    {
        /* setup pointers for B */
        const q15_t *pB = pInBuffer;
 80045a0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80045a4:	f107 0208 	add.w	r2, r7, #8
 80045a8:	6812      	ldr	r2, [r2, #0]
 80045aa:	601a      	str	r2, [r3, #0]
        const q15_t *pB2 = pB + numCol_A;
 80045ac:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	1d3b      	adds	r3, r7, #4
 80045b4:	881b      	ldrh	r3, [r3, #0]
 80045b6:	005b      	lsls	r3, r3, #1
 80045b8:	441a      	add	r2, r3
 80045ba:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80045be:	601a      	str	r2, [r3, #0]

        /* align the second pointer for A */
        const q7_t *pA2 = pA + numCol_A;
 80045c0:	1d3b      	adds	r3, r7, #4
 80045c2:	881b      	ldrh	r3, [r3, #0]
 80045c4:	f107 020c 	add.w	r2, r7, #12
 80045c8:	6812      	ldr	r2, [r2, #0]
 80045ca:	4413      	add	r3, r2
 80045cc:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298

        /* init the sum with bias */
        q31_t sum = ((q31_t)(*pBias) << bias_shift) + NN_ROUND(out_shift);
 80045d0:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 80045d4:	f993 3000 	ldrsb.w	r3, [r3]
 80045d8:	461a      	mov	r2, r3
 80045da:	f8b7 32b0 	ldrh.w	r3, [r7, #688]	; 0x2b0
 80045de:	fa02 f303 	lsl.w	r3, r2, r3
 80045e2:	4619      	mov	r1, r3
 80045e4:	f8b7 32b4 	ldrh.w	r3, [r7, #692]	; 0x2b4
 80045e8:	2201      	movs	r2, #1
 80045ea:	fa02 f303 	lsl.w	r3, r2, r3
 80045ee:	085b      	lsrs	r3, r3, #1
 80045f0:	440b      	add	r3, r1
 80045f2:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
        q31_t sum2 = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 80045f6:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 80045fa:	1c5a      	adds	r2, r3, #1
 80045fc:	f8c7 22a0 	str.w	r2, [r7, #672]	; 0x2a0
 8004600:	f993 3000 	ldrsb.w	r3, [r3]
 8004604:	461a      	mov	r2, r3
 8004606:	f8b7 32b0 	ldrh.w	r3, [r7, #688]	; 0x2b0
 800460a:	fa02 f303 	lsl.w	r3, r2, r3
 800460e:	4619      	mov	r1, r3
 8004610:	f8b7 32b4 	ldrh.w	r3, [r7, #692]	; 0x2b4
 8004614:	2201      	movs	r2, #1
 8004616:	fa02 f303 	lsl.w	r3, r2, r3
 800461a:	085b      	lsrs	r3, r3, #1
 800461c:	440b      	add	r3, r1
 800461e:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
        q31_t sum3 = ((q31_t)(*pBias) << bias_shift) + NN_ROUND(out_shift);
 8004622:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 8004626:	f993 3000 	ldrsb.w	r3, [r3]
 800462a:	461a      	mov	r2, r3
 800462c:	f8b7 32b0 	ldrh.w	r3, [r7, #688]	; 0x2b0
 8004630:	fa02 f303 	lsl.w	r3, r2, r3
 8004634:	4619      	mov	r1, r3
 8004636:	f8b7 32b4 	ldrh.w	r3, [r7, #692]	; 0x2b4
 800463a:	2201      	movs	r2, #1
 800463c:	fa02 f303 	lsl.w	r3, r2, r3
 8004640:	085b      	lsrs	r3, r3, #1
 8004642:	440b      	add	r3, r1
 8004644:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
        q31_t sum4 = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 8004648:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 800464c:	1c5a      	adds	r2, r3, #1
 800464e:	f8c7 22a0 	str.w	r2, [r7, #672]	; 0x2a0
 8004652:	f993 3000 	ldrsb.w	r3, [r3]
 8004656:	461a      	mov	r2, r3
 8004658:	f8b7 32b0 	ldrh.w	r3, [r7, #688]	; 0x2b0
 800465c:	fa02 f303 	lsl.w	r3, r2, r3
 8004660:	4619      	mov	r1, r3
 8004662:	f8b7 32b4 	ldrh.w	r3, [r7, #692]	; 0x2b4
 8004666:	2201      	movs	r2, #1
 8004668:	fa02 f303 	lsl.w	r3, r2, r3
 800466c:	085b      	lsrs	r3, r3, #1
 800466e:	440b      	add	r3, r1
 8004670:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288

        uint16_t colCnt = numCol_A >> 2;
 8004674:	1d3b      	adds	r3, r7, #4
 8004676:	881b      	ldrh	r3, [r3, #0]
 8004678:	089b      	lsrs	r3, r3, #2
 800467a:	f8a7 3286 	strh.w	r3, [r7, #646]	; 0x286
        /* accumulate over the vector */
        while (colCnt)
 800467e:	e2c1      	b.n	8004c04 <arm_nn_mat_mult_kernel_q7_q15+0x6a8>
 8004680:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004684:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8004688:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q15, 4);
 800468a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	461a      	mov	r2, r3
 8004696:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800469a:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 800469c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	1d1a      	adds	r2, r3, #4
 80046a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	601a      	str	r2, [r3, #0]
    return (val);
 80046ae:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80046b2:	681b      	ldr	r3, [r3, #0]
        {
            q31_t inA11, inA12, inA21, inA22;

            q31_t inB1 = arm_nn_read_q15x2_ia(&pB);
 80046b4:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 80046b8:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80046bc:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80046c0:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q15, 4);
 80046c2:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	461a      	mov	r2, r3
 80046ce:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80046d2:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 80046d4:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	1d1a      	adds	r2, r3, #4
 80046de:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	601a      	str	r2, [r3, #0]
    return (val);
 80046e6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80046ea:	681b      	ldr	r3, [r3, #0]
            q31_t inB2 = arm_nn_read_q15x2_ia(&pB2);
 80046ec:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
 80046f0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80046f4:	f107 020c 	add.w	r2, r7, #12
 80046f8:	6812      	ldr	r2, [r2, #0]
 80046fa:	601a      	str	r2, [r3, #0]
 80046fc:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8004700:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8004704:	601a      	str	r2, [r3, #0]
 8004706:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800470a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800470e:	601a      	str	r2, [r3, #0]
 8004710:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8004714:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8004718:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 800471a:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	461a      	mov	r2, r3
 8004726:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800472a:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800472c:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	1d1a      	adds	r2, r3, #4
 8004736:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	601a      	str	r2, [r3, #0]
    return (val);
 800473e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004742:	681a      	ldr	r2, [r3, #0]
    q31_t inA = arm_nn_read_q7x4_ia(&source);
 8004744:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8004748:	601a      	str	r2, [r3, #0]
    q31_t inAbuf1 = __SXTB16(__ROR((uint32_t)inA, 8));
 800474a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8004754:	601a      	str	r2, [r3, #0]
 8004756:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800475a:	2208      	movs	r2, #8
 800475c:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 800475e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8004762:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8004766:	6812      	ldr	r2, [r2, #0]
 8004768:	f002 021f 	and.w	r2, r2, #31
 800476c:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 800476e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d103      	bne.n	8004780 <arm_nn_mat_mult_kernel_q7_q15+0x224>
    return op1;
 8004778:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	e007      	b.n	8004790 <arm_nn_mat_mult_kernel_q7_q15+0x234>
  return (op1 >> op2) | (op1 << (32U - op2));
 8004780:	f507 72a2 	add.w	r2, r7, #324	; 0x144
 8004784:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8004788:	6812      	ldr	r2, [r2, #0]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	fa62 f303 	ror.w	r3, r2, r3
 8004790:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 8004794:	6013      	str	r3, [r2, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8004796:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	fa2f f283 	sxtb16	r2, r3
 80047a0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80047a4:	601a      	str	r2, [r3, #0]
  return(result);
 80047a6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	f507 739a 	add.w	r3, r7, #308	; 0x134
 80047b0:	601a      	str	r2, [r3, #0]
    q31_t inAbuf2 = __SXTB16(inA);
 80047b2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047bc:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80047be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	fa2f f283 	sxtb16	r2, r3
 80047c8:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 80047cc:	601a      	str	r2, [r3, #0]
  return(result);
 80047ce:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80047d8:	601a      	str	r2, [r3, #0]
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 80047da:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80047de:	f507 729a 	add.w	r2, r7, #308	; 0x134
 80047e2:	6812      	ldr	r2, [r2, #0]
 80047e4:	601a      	str	r2, [r3, #0]
 80047e6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80047ea:	f507 7294 	add.w	r2, r7, #296	; 0x128
 80047ee:	6812      	ldr	r2, [r2, #0]
 80047f0:	601a      	str	r2, [r3, #0]
 80047f2:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80047fc:	6812      	ldr	r2, [r2, #0]
 80047fe:	eac3 4222 	pkhtb	r2, r3, r2, asr #16
 8004802:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8004806:	601a      	str	r2, [r3, #0]
 8004808:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	461a      	mov	r2, r3
 8004810:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	601a      	str	r2, [r3, #0]
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 8004818:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800481c:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8004820:	6812      	ldr	r2, [r2, #0]
 8004822:	601a      	str	r2, [r3, #0]
 8004824:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8004828:	f507 729a 	add.w	r2, r7, #308	; 0x134
 800482c:	6812      	ldr	r2, [r2, #0]
 800482e:	601a      	str	r2, [r3, #0]
 8004830:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f507 728a 	add.w	r2, r7, #276	; 0x114
 800483a:	6812      	ldr	r2, [r2, #0]
 800483c:	eac3 4202 	pkhbt	r2, r3, r2, lsl #16
 8004840:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004844:	601a      	str	r2, [r3, #0]
 8004846:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	461a      	mov	r2, r3
 800484e:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	601a      	str	r2, [r3, #0]
    return source;
 8004856:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800485a:	681a      	ldr	r2, [r3, #0]

            pA = read_and_pad(pA, &inA11, &inA12);
 800485c:	f107 030c 	add.w	r3, r7, #12
 8004860:	601a      	str	r2, [r3, #0]
 8004862:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004866:	f8d7 2298 	ldr.w	r2, [r7, #664]	; 0x298
 800486a:	601a      	str	r2, [r3, #0]
 800486c:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8004870:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8004874:	601a      	str	r2, [r3, #0]
 8004876:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800487a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800487e:	601a      	str	r2, [r3, #0]
 8004880:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 8004884:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8004888:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 800488a:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	461a      	mov	r2, r3
 8004896:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800489a:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800489c:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	1d1a      	adds	r2, r3, #4
 80048a6:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	601a      	str	r2, [r3, #0]
    return (val);
 80048ae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80048b2:	681a      	ldr	r2, [r3, #0]
    q31_t inA = arm_nn_read_q7x4_ia(&source);
 80048b4:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80048b8:	601a      	str	r2, [r3, #0]
    q31_t inAbuf1 = __SXTB16(__ROR((uint32_t)inA, 8));
 80048ba:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 80048c4:	601a      	str	r2, [r3, #0]
 80048c6:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80048ca:	2208      	movs	r2, #8
 80048cc:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 80048ce:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80048d2:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 80048d6:	6812      	ldr	r2, [r2, #0]
 80048d8:	f002 021f 	and.w	r2, r2, #31
 80048dc:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 80048de:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d103      	bne.n	80048f0 <arm_nn_mat_mult_kernel_q7_q15+0x394>
    return op1;
 80048e8:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	e007      	b.n	8004900 <arm_nn_mat_mult_kernel_q7_q15+0x3a4>
  return (op1 >> op2) | (op1 << (32U - op2));
 80048f0:	f507 72c6 	add.w	r2, r7, #396	; 0x18c
 80048f4:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80048f8:	6812      	ldr	r2, [r2, #0]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	fa62 f303 	ror.w	r3, r2, r3
 8004900:	f507 72c2 	add.w	r2, r7, #388	; 0x184
 8004904:	6013      	str	r3, [r2, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8004906:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	fa2f f283 	sxtb16	r2, r3
 8004910:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8004914:	601a      	str	r2, [r3, #0]
  return(result);
 8004916:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8004920:	601a      	str	r2, [r3, #0]
    q31_t inAbuf2 = __SXTB16(inA);
 8004922:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800492c:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800492e:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	fa2f f283 	sxtb16	r2, r3
 8004938:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 800493c:	601a      	str	r2, [r3, #0]
  return(result);
 800493e:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8004948:	601a      	str	r2, [r3, #0]
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 800494a:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 800494e:	f507 72be 	add.w	r2, r7, #380	; 0x17c
 8004952:	6812      	ldr	r2, [r2, #0]
 8004954:	601a      	str	r2, [r3, #0]
 8004956:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800495a:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 800495e:	6812      	ldr	r2, [r2, #0]
 8004960:	601a      	str	r2, [r3, #0]
 8004962:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 800496c:	6812      	ldr	r2, [r2, #0]
 800496e:	eac3 4222 	pkhtb	r2, r3, r2, asr #16
 8004972:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8004976:	601a      	str	r2, [r3, #0]
 8004978:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	461a      	mov	r2, r3
 8004980:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	601a      	str	r2, [r3, #0]
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 8004988:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800498c:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8004990:	6812      	ldr	r2, [r2, #0]
 8004992:	601a      	str	r2, [r3, #0]
 8004994:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8004998:	f507 72be 	add.w	r2, r7, #380	; 0x17c
 800499c:	6812      	ldr	r2, [r2, #0]
 800499e:	601a      	str	r2, [r3, #0]
 80049a0:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f507 72ae 	add.w	r2, r7, #348	; 0x15c
 80049aa:	6812      	ldr	r2, [r2, #0]
 80049ac:	eac3 4202 	pkhbt	r2, r3, r2, lsl #16
 80049b0:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80049b4:	601a      	str	r2, [r3, #0]
 80049b6:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	461a      	mov	r2, r3
 80049be:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	601a      	str	r2, [r3, #0]
    return source;
 80049c6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80049ca:	681b      	ldr	r3, [r3, #0]
            pA2 = read_and_pad(pA2, &inA21, &inA22);
 80049cc:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298

            sum = __SMLAD(inA11, inB1, sum);
 80049d0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f8d7 122c 	ldr.w	r1, [r7, #556]	; 0x22c
 80049da:	f8d7 2294 	ldr.w	r2, [r7, #660]	; 0x294
 80049de:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 80049e2:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80049e6:	6019      	str	r1, [r3, #0]
 80049e8:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 80049ec:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80049ee:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80049f2:	f507 72d4 	add.w	r2, r7, #424	; 0x1a8
 80049f6:	6812      	ldr	r2, [r2, #0]
 80049f8:	f507 71d2 	add.w	r1, r7, #420	; 0x1a4
 80049fc:	6809      	ldr	r1, [r1, #0]
 80049fe:	fb23 1202 	smlad	r2, r3, r2, r1
 8004a02:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8004a06:	601a      	str	r2, [r3, #0]
  return(result);
 8004a08:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
            sum2 = __SMLAD(inA11, inB2, sum2);
 8004a12:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4619      	mov	r1, r3
 8004a1a:	f8d7 2228 	ldr.w	r2, [r7, #552]	; 0x228
 8004a1e:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8004a22:	f8c7 11bc 	str.w	r1, [r7, #444]	; 0x1bc
 8004a26:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8004a2a:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8004a2e:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8004a32:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004a36:	f8d7 11b4 	ldr.w	r1, [r7, #436]	; 0x1b4
 8004a3a:	fb23 1302 	smlad	r3, r3, r2, r1
 8004a3e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return(result);
 8004a42:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8004a46:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
            sum3 = __SMLAD(inA21, inB1, sum3);
 8004a4a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4619      	mov	r1, r3
 8004a52:	f8d7 222c 	ldr.w	r2, [r7, #556]	; 0x22c
 8004a56:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8004a5a:	f8c7 11cc 	str.w	r1, [r7, #460]	; 0x1cc
 8004a5e:	f8c7 21c8 	str.w	r2, [r7, #456]	; 0x1c8
 8004a62:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8004a66:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8004a6a:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
 8004a6e:	f8d7 11c4 	ldr.w	r1, [r7, #452]	; 0x1c4
 8004a72:	fb23 1302 	smlad	r3, r3, r2, r1
 8004a76:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
  return(result);
 8004a7a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8004a7e:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
            sum4 = __SMLAD(inA21, inB2, sum4);
 8004a82:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4619      	mov	r1, r3
 8004a8a:	f8d7 2228 	ldr.w	r2, [r7, #552]	; 0x228
 8004a8e:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 8004a92:	f8c7 11dc 	str.w	r1, [r7, #476]	; 0x1dc
 8004a96:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8004a9a:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8004a9e:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8004aa2:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004aa6:	f8d7 11d4 	ldr.w	r1, [r7, #468]	; 0x1d4
 8004aaa:	fb23 1302 	smlad	r3, r3, r2, r1
 8004aae:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return(result);
 8004ab2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8004ab6:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
 8004aba:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004abe:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
    memcpy(&val, *in_q15, 4);
 8004ac2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	461a      	mov	r2, r3
 8004acc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004ad0:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 8004ad2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	1d1a      	adds	r2, r3, #4
 8004ada:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8004ade:	601a      	str	r2, [r3, #0]
    return (val);
 8004ae0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004ae4:	681b      	ldr	r3, [r3, #0]

            inB1 = arm_nn_read_q15x2_ia(&pB);
 8004ae6:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 8004aea:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004aee:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
    memcpy(&val, *in_q15, 4);
 8004af2:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	461a      	mov	r2, r3
 8004afc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004b00:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 8004b02:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	1d1a      	adds	r2, r3, #4
 8004b0a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8004b0e:	601a      	str	r2, [r3, #0]
    return (val);
 8004b10:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004b14:	681b      	ldr	r3, [r3, #0]
            inB2 = arm_nn_read_q15x2_ia(&pB2);
 8004b16:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228

            sum = __SMLAD(inA12, inB1, sum);
 8004b1a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4619      	mov	r1, r3
 8004b22:	f8d7 222c 	ldr.w	r2, [r7, #556]	; 0x22c
 8004b26:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8004b2a:	f8c7 11f4 	str.w	r1, [r7, #500]	; 0x1f4
 8004b2e:	f8c7 21f0 	str.w	r2, [r7, #496]	; 0x1f0
 8004b32:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8004b36:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004b3a:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 8004b3e:	f8d7 11ec 	ldr.w	r1, [r7, #492]	; 0x1ec
 8004b42:	fb23 1302 	smlad	r3, r3, r2, r1
 8004b46:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
  return(result);
 8004b4a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8004b4e:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
            sum2 = __SMLAD(inA12, inB2, sum2);
 8004b52:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4619      	mov	r1, r3
 8004b5a:	f8d7 2228 	ldr.w	r2, [r7, #552]	; 0x228
 8004b5e:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8004b62:	f8c7 1204 	str.w	r1, [r7, #516]	; 0x204
 8004b66:	f8c7 2200 	str.w	r2, [r7, #512]	; 0x200
 8004b6a:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8004b6e:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8004b72:	f8d7 2200 	ldr.w	r2, [r7, #512]	; 0x200
 8004b76:	f8d7 11fc 	ldr.w	r1, [r7, #508]	; 0x1fc
 8004b7a:	fb23 1302 	smlad	r3, r3, r2, r1
 8004b7e:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
  return(result);
 8004b82:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004b86:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
            sum3 = __SMLAD(inA22, inB1, sum3);
 8004b8a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4619      	mov	r1, r3
 8004b92:	f8d7 222c 	ldr.w	r2, [r7, #556]	; 0x22c
 8004b96:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8004b9a:	f8c7 1214 	str.w	r1, [r7, #532]	; 0x214
 8004b9e:	f8c7 2210 	str.w	r2, [r7, #528]	; 0x210
 8004ba2:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8004ba6:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8004baa:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8004bae:	f8d7 120c 	ldr.w	r1, [r7, #524]	; 0x20c
 8004bb2:	fb23 1302 	smlad	r3, r3, r2, r1
 8004bb6:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
  return(result);
 8004bba:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8004bbe:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
            sum4 = __SMLAD(inA22, inB2, sum4);
 8004bc2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4619      	mov	r1, r3
 8004bca:	f8d7 2228 	ldr.w	r2, [r7, #552]	; 0x228
 8004bce:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 8004bd2:	f8c7 1224 	str.w	r1, [r7, #548]	; 0x224
 8004bd6:	f8c7 2220 	str.w	r2, [r7, #544]	; 0x220
 8004bda:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8004bde:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8004be2:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 8004be6:	f8d7 121c 	ldr.w	r1, [r7, #540]	; 0x21c
 8004bea:	fb23 1302 	smlad	r3, r3, r2, r1
 8004bee:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
  return(result);
 8004bf2:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8004bf6:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288

            colCnt--;
 8004bfa:	f8b7 3286 	ldrh.w	r3, [r7, #646]	; 0x286
 8004bfe:	3b01      	subs	r3, #1
 8004c00:	f8a7 3286 	strh.w	r3, [r7, #646]	; 0x286
        while (colCnt)
 8004c04:	f8b7 3286 	ldrh.w	r3, [r7, #646]	; 0x286
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	f47f ad39 	bne.w	8004680 <arm_nn_mat_mult_kernel_q7_q15+0x124>
        } /* while over colCnt */
        colCnt = numCol_A & 0x3;
 8004c0e:	1d3b      	adds	r3, r7, #4
 8004c10:	881b      	ldrh	r3, [r3, #0]
 8004c12:	f003 0303 	and.w	r3, r3, #3
 8004c16:	f8a7 3286 	strh.w	r3, [r7, #646]	; 0x286
        while (colCnt)
 8004c1a:	e056      	b.n	8004cca <arm_nn_mat_mult_kernel_q7_q15+0x76e>
        {
            q7_t inA1 = *pA++;
 8004c1c:	f107 030c 	add.w	r3, r7, #12
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f107 020c 	add.w	r2, r7, #12
 8004c26:	1c59      	adds	r1, r3, #1
 8004c28:	6011      	str	r1, [r2, #0]
 8004c2a:	781b      	ldrb	r3, [r3, #0]
 8004c2c:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
            q15_t inB1 = *pB++;
 8004c30:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	1c99      	adds	r1, r3, #2
 8004c38:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8004c3c:	6011      	str	r1, [r2, #0]
 8004c3e:	881b      	ldrh	r3, [r3, #0]
 8004c40:	f8a7 3234 	strh.w	r3, [r7, #564]	; 0x234
            q7_t inA2 = *pA2++;
 8004c44:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8004c48:	1c5a      	adds	r2, r3, #1
 8004c4a:	f8c7 2298 	str.w	r2, [r7, #664]	; 0x298
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	f887 3233 	strb.w	r3, [r7, #563]	; 0x233
            q15_t inB2 = *pB2++;
 8004c54:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	1c99      	adds	r1, r3, #2
 8004c5c:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8004c60:	6011      	str	r1, [r2, #0]
 8004c62:	881b      	ldrh	r3, [r3, #0]
 8004c64:	f8a7 3230 	strh.w	r3, [r7, #560]	; 0x230

            sum += inA1 * inB1;
 8004c68:	f997 3237 	ldrsb.w	r3, [r7, #567]	; 0x237
 8004c6c:	f9b7 2234 	ldrsh.w	r2, [r7, #564]	; 0x234
 8004c70:	fb02 f303 	mul.w	r3, r2, r3
 8004c74:	f8d7 2294 	ldr.w	r2, [r7, #660]	; 0x294
 8004c78:	4413      	add	r3, r2
 8004c7a:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
            sum2 += inA1 * inB2;
 8004c7e:	f997 3237 	ldrsb.w	r3, [r7, #567]	; 0x237
 8004c82:	f9b7 2230 	ldrsh.w	r2, [r7, #560]	; 0x230
 8004c86:	fb02 f303 	mul.w	r3, r2, r3
 8004c8a:	f8d7 2290 	ldr.w	r2, [r7, #656]	; 0x290
 8004c8e:	4413      	add	r3, r2
 8004c90:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
            sum3 += inA2 * inB1;
 8004c94:	f997 3233 	ldrsb.w	r3, [r7, #563]	; 0x233
 8004c98:	f9b7 2234 	ldrsh.w	r2, [r7, #564]	; 0x234
 8004c9c:	fb02 f303 	mul.w	r3, r2, r3
 8004ca0:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
 8004ca4:	4413      	add	r3, r2
 8004ca6:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
            sum4 += inA2 * inB2;
 8004caa:	f997 3233 	ldrsb.w	r3, [r7, #563]	; 0x233
 8004cae:	f9b7 2230 	ldrsh.w	r2, [r7, #560]	; 0x230
 8004cb2:	fb02 f303 	mul.w	r3, r2, r3
 8004cb6:	f8d7 2288 	ldr.w	r2, [r7, #648]	; 0x288
 8004cba:	4413      	add	r3, r2
 8004cbc:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
            colCnt--;
 8004cc0:	f8b7 3286 	ldrh.w	r3, [r7, #646]	; 0x286
 8004cc4:	3b01      	subs	r3, #1
 8004cc6:	f8a7 3286 	strh.w	r3, [r7, #646]	; 0x286
        while (colCnt)
 8004cca:	f8b7 3286 	ldrh.w	r3, [r7, #646]	; 0x286
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d1a4      	bne.n	8004c1c <arm_nn_mat_mult_kernel_q7_q15+0x6c0>
        } /* while over colCnt */
        *pOut++ = (q7_t)__SSAT((sum >> out_shift), 8);
 8004cd2:	f8b7 32b4 	ldrh.w	r3, [r7, #692]	; 0x2b4
 8004cd6:	f8d7 2294 	ldr.w	r2, [r7, #660]	; 0x294
 8004cda:	fa42 f303 	asr.w	r3, r2, r3
 8004cde:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 8004ce2:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8004ce6:	f303 0307 	ssat	r3, #8, r3
 8004cea:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8004cee:	f8d7 1250 	ldr.w	r1, [r7, #592]	; 0x250
 8004cf2:	f8d7 32bc 	ldr.w	r3, [r7, #700]	; 0x2bc
 8004cf6:	1c5a      	adds	r2, r3, #1
 8004cf8:	f8c7 22bc 	str.w	r2, [r7, #700]	; 0x2bc
 8004cfc:	b24a      	sxtb	r2, r1
 8004cfe:	701a      	strb	r2, [r3, #0]
        *pOut++ = (q7_t)__SSAT((sum3 >> out_shift), 8);
 8004d00:	f8b7 32b4 	ldrh.w	r3, [r7, #692]	; 0x2b4
 8004d04:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
 8004d08:	fa42 f303 	asr.w	r3, r2, r3
 8004d0c:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8004d10:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8004d14:	f303 0307 	ssat	r3, #8, r3
 8004d18:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8004d1c:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8004d20:	f8d7 32bc 	ldr.w	r3, [r7, #700]	; 0x2bc
 8004d24:	1c5a      	adds	r2, r3, #1
 8004d26:	f8c7 22bc 	str.w	r2, [r7, #700]	; 0x2bc
 8004d2a:	b24a      	sxtb	r2, r1
 8004d2c:	701a      	strb	r2, [r3, #0]
        *pOut2++ = (q7_t)__SSAT((sum2 >> out_shift), 8);
 8004d2e:	f8b7 32b4 	ldrh.w	r3, [r7, #692]	; 0x2b4
 8004d32:	f8d7 2290 	ldr.w	r2, [r7, #656]	; 0x290
 8004d36:	fa42 f303 	asr.w	r3, r2, r3
 8004d3a:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8004d3e:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8004d42:	f303 0307 	ssat	r3, #8, r3
 8004d46:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
 8004d4a:	f8d7 1240 	ldr.w	r1, [r7, #576]	; 0x240
 8004d4e:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 8004d52:	1c5a      	adds	r2, r3, #1
 8004d54:	f8c7 22a4 	str.w	r2, [r7, #676]	; 0x2a4
 8004d58:	b24a      	sxtb	r2, r1
 8004d5a:	701a      	strb	r2, [r3, #0]
        *pOut2++ = (q7_t)__SSAT((sum4 >> out_shift), 8);
 8004d5c:	f8b7 32b4 	ldrh.w	r3, [r7, #692]	; 0x2b4
 8004d60:	f8d7 2288 	ldr.w	r2, [r7, #648]	; 0x288
 8004d64:	fa42 f303 	asr.w	r3, r2, r3
 8004d68:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 8004d6c:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004d70:	f303 0307 	ssat	r3, #8, r3
 8004d74:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 8004d78:	f8d7 1238 	ldr.w	r1, [r7, #568]	; 0x238
 8004d7c:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 8004d80:	1c5a      	adds	r2, r3, #1
 8004d82:	f8c7 22a4 	str.w	r2, [r7, #676]	; 0x2a4
 8004d86:	b24a      	sxtb	r2, r1
 8004d88:	701a      	strb	r2, [r3, #0]

        /* skip the row computed with A2 */
        pA += numCol_A;
 8004d8a:	1d3b      	adds	r3, r7, #4
 8004d8c:	881a      	ldrh	r2, [r3, #0]
 8004d8e:	f107 030c 	add.w	r3, r7, #12
 8004d92:	f107 010c 	add.w	r1, r7, #12
 8004d96:	6809      	ldr	r1, [r1, #0]
 8004d98:	440a      	add	r2, r1
 8004d9a:	601a      	str	r2, [r3, #0]
        rowCnt--;
 8004d9c:	f8b7 329e 	ldrh.w	r3, [r7, #670]	; 0x29e
 8004da0:	3b01      	subs	r3, #1
 8004da2:	f8a7 329e 	strh.w	r3, [r7, #670]	; 0x29e
    while (rowCnt)
 8004da6:	f8b7 329e 	ldrh.w	r3, [r7, #670]	; 0x29e
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	f47f abf8 	bne.w	80045a0 <arm_nn_mat_mult_kernel_q7_q15+0x44>
    } /* for over ch_im_out */

    /* compute left-over row if any */
    if (ch_im_out & 0x1)
 8004db0:	1dbb      	adds	r3, r7, #6
 8004db2:	881b      	ldrh	r3, [r3, #0]
 8004db4:	f003 0301 	and.w	r3, r3, #1
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	f000 8274 	beq.w	80052a6 <arm_nn_mat_mult_kernel_q7_q15+0xd4a>
    {
        /* setup pointers for B */
        const q15_t *pB = pInBuffer;
 8004dbe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004dc2:	f107 0208 	add.w	r2, r7, #8
 8004dc6:	6812      	ldr	r2, [r2, #0]
 8004dc8:	601a      	str	r2, [r3, #0]
        const q15_t *pB2 = pB + numCol_A;
 8004dca:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	1d3b      	adds	r3, r7, #4
 8004dd2:	881b      	ldrh	r3, [r3, #0]
 8004dd4:	005b      	lsls	r3, r3, #1
 8004dd6:	441a      	add	r2, r3
 8004dd8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004ddc:	601a      	str	r2, [r3, #0]

        /* load the bias */
        q31_t sum = ((q31_t)(*pBias) << bias_shift) + NN_ROUND(out_shift);
 8004dde:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 8004de2:	f993 3000 	ldrsb.w	r3, [r3]
 8004de6:	461a      	mov	r2, r3
 8004de8:	f8b7 32b0 	ldrh.w	r3, [r7, #688]	; 0x2b0
 8004dec:	fa02 f303 	lsl.w	r3, r2, r3
 8004df0:	4619      	mov	r1, r3
 8004df2:	f8b7 32b4 	ldrh.w	r3, [r7, #692]	; 0x2b4
 8004df6:	2201      	movs	r2, #1
 8004df8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dfc:	085b      	lsrs	r3, r3, #1
 8004dfe:	440b      	add	r3, r1
 8004e00:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280
        q31_t sum2 = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 8004e04:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 8004e08:	1c5a      	adds	r2, r3, #1
 8004e0a:	f8c7 22a0 	str.w	r2, [r7, #672]	; 0x2a0
 8004e0e:	f993 3000 	ldrsb.w	r3, [r3]
 8004e12:	461a      	mov	r2, r3
 8004e14:	f8b7 32b0 	ldrh.w	r3, [r7, #688]	; 0x2b0
 8004e18:	fa02 f303 	lsl.w	r3, r2, r3
 8004e1c:	4619      	mov	r1, r3
 8004e1e:	f8b7 32b4 	ldrh.w	r3, [r7, #692]	; 0x2b4
 8004e22:	2201      	movs	r2, #1
 8004e24:	fa02 f303 	lsl.w	r3, r2, r3
 8004e28:	085b      	lsrs	r3, r3, #1
 8004e2a:	440b      	add	r3, r1
 8004e2c:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c

        uint16_t colCnt = numCol_A >> 2;
 8004e30:	1d3b      	adds	r3, r7, #4
 8004e32:	881b      	ldrh	r3, [r3, #0]
 8004e34:	089b      	lsrs	r3, r3, #2
 8004e36:	f8a7 327a 	strh.w	r3, [r7, #634]	; 0x27a
        while (colCnt)
 8004e3a:	e1bd      	b.n	80051b8 <arm_nn_mat_mult_kernel_q7_q15+0xc5c>
 8004e3c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004e40:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004e44:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q15, 4);
 8004e46:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	461a      	mov	r2, r3
 8004e52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e56:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 8004e58:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	1d1a      	adds	r2, r3, #4
 8004e62:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	601a      	str	r2, [r3, #0]
    return (val);
 8004e6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e6e:	681b      	ldr	r3, [r3, #0]
        {
            q31_t inA11, inA12;

            q31_t inB1 = arm_nn_read_q15x2_ia(&pB);
 8004e70:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 8004e74:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004e78:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004e7c:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q15, 4);
 8004e7e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	461a      	mov	r2, r3
 8004e8a:	f107 0320 	add.w	r3, r7, #32
 8004e8e:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 8004e90:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	1d1a      	adds	r2, r3, #4
 8004e9a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	601a      	str	r2, [r3, #0]
    return (val);
 8004ea2:	f107 0320 	add.w	r3, r7, #32
 8004ea6:	681b      	ldr	r3, [r3, #0]
            q31_t inB2 = arm_nn_read_q15x2_ia(&pB2);
 8004ea8:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
 8004eac:	f107 031c 	add.w	r3, r7, #28
 8004eb0:	f107 020c 	add.w	r2, r7, #12
 8004eb4:	6812      	ldr	r2, [r2, #0]
 8004eb6:	601a      	str	r2, [r3, #0]
 8004eb8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004ebc:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8004ec0:	601a      	str	r2, [r3, #0]
 8004ec2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004ec6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004eca:	601a      	str	r2, [r3, #0]
 8004ecc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004ed0:	f107 021c 	add.w	r2, r7, #28
 8004ed4:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 8004ed6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	461a      	mov	r2, r3
 8004ee2:	f107 0318 	add.w	r3, r7, #24
 8004ee6:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8004ee8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	1d1a      	adds	r2, r3, #4
 8004ef2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	601a      	str	r2, [r3, #0]
    return (val);
 8004efa:	f107 0318 	add.w	r3, r7, #24
 8004efe:	681a      	ldr	r2, [r3, #0]
    q31_t inA = arm_nn_read_q7x4_ia(&source);
 8004f00:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004f04:	601a      	str	r2, [r3, #0]
    q31_t inAbuf1 = __SXTB16(__ROR((uint32_t)inA, 8));
 8004f06:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004f10:	601a      	str	r2, [r3, #0]
 8004f12:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8004f16:	2208      	movs	r2, #8
 8004f18:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 8004f1a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8004f1e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8004f22:	6812      	ldr	r2, [r2, #0]
 8004f24:	f002 021f 	and.w	r2, r2, #31
 8004f28:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8004f2a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d103      	bne.n	8004f3c <arm_nn_mat_mult_kernel_q7_q15+0x9e0>
    return op1;
 8004f34:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	e007      	b.n	8004f4c <arm_nn_mat_mult_kernel_q7_q15+0x9f0>
  return (op1 >> op2) | (op1 << (32U - op2));
 8004f3c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8004f40:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8004f44:	6812      	ldr	r2, [r2, #0]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	fa62 f303 	ror.w	r3, r2, r3
 8004f4c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8004f50:	6013      	str	r3, [r2, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8004f52:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	fa2f f283 	sxtb16	r2, r3
 8004f5c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004f60:	601a      	str	r2, [r3, #0]
  return(result);
 8004f62:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004f6c:	601a      	str	r2, [r3, #0]
    q31_t inAbuf2 = __SXTB16(inA);
 8004f6e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004f78:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8004f7a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	fa2f f283 	sxtb16	r2, r3
 8004f84:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004f88:	601a      	str	r2, [r3, #0]
  return(result);
 8004f8a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004f94:	601a      	str	r2, [r3, #0]
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 8004f96:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004f9a:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8004f9e:	6812      	ldr	r2, [r2, #0]
 8004fa0:	601a      	str	r2, [r3, #0]
 8004fa2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8004fa6:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8004faa:	6812      	ldr	r2, [r2, #0]
 8004fac:	601a      	str	r2, [r3, #0]
 8004fae:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004fb8:	6812      	ldr	r2, [r2, #0]
 8004fba:	eac3 4222 	pkhtb	r2, r3, r2, asr #16
 8004fbe:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8004fc2:	601a      	str	r2, [r3, #0]
 8004fc4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	461a      	mov	r2, r3
 8004fcc:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	601a      	str	r2, [r3, #0]
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 8004fd4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004fd8:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8004fdc:	6812      	ldr	r2, [r2, #0]
 8004fde:	601a      	str	r2, [r3, #0]
 8004fe0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004fe4:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8004fe8:	6812      	ldr	r2, [r2, #0]
 8004fea:	601a      	str	r2, [r3, #0]
 8004fec:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8004ff6:	6812      	ldr	r2, [r2, #0]
 8004ff8:	eac3 4202 	pkhbt	r2, r3, r2, lsl #16
 8004ffc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005000:	601a      	str	r2, [r3, #0]
 8005002:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	461a      	mov	r2, r3
 800500a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	601a      	str	r2, [r3, #0]
    return source;
 8005012:	f107 031c 	add.w	r3, r7, #28
 8005016:	681a      	ldr	r2, [r3, #0]

            pA = read_and_pad(pA, &inA11, &inA12);
 8005018:	f107 030c 	add.w	r3, r7, #12
 800501c:	601a      	str	r2, [r3, #0]

            sum = __SMLAD(inA11, inB1, sum);
 800501e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4618      	mov	r0, r3
 8005026:	f8d7 125c 	ldr.w	r1, [r7, #604]	; 0x25c
 800502a:	f8d7 2280 	ldr.w	r2, [r7, #640]	; 0x280
 800502e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8005032:	6018      	str	r0, [r3, #0]
 8005034:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8005038:	6019      	str	r1, [r3, #0]
 800503a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800503e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8005040:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 800504a:	6812      	ldr	r2, [r2, #0]
 800504c:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 8005050:	6809      	ldr	r1, [r1, #0]
 8005052:	fb23 1202 	smlad	r2, r3, r2, r1
 8005056:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800505a:	601a      	str	r2, [r3, #0]
  return(result);
 800505c:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280
            sum2 = __SMLAD(inA11, inB2, sum2);
 8005066:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4618      	mov	r0, r3
 800506e:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8005072:	f8d7 227c 	ldr.w	r2, [r7, #636]	; 0x27c
 8005076:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800507a:	6018      	str	r0, [r3, #0]
 800507c:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8005080:	6019      	str	r1, [r3, #0]
 8005082:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8005086:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8005088:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8005092:	6812      	ldr	r2, [r2, #0]
 8005094:	f107 01d4 	add.w	r1, r7, #212	; 0xd4
 8005098:	6809      	ldr	r1, [r1, #0]
 800509a:	fb23 1202 	smlad	r2, r3, r2, r1
 800509e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80050a2:	601a      	str	r2, [r3, #0]
  return(result);
 80050a4:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
 80050ae:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80050b2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80050b6:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q15, 4);
 80050b8:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	461a      	mov	r2, r3
 80050c4:	f107 0314 	add.w	r3, r7, #20
 80050c8:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 80050ca:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	1d1a      	adds	r2, r3, #4
 80050d4:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	601a      	str	r2, [r3, #0]
    return (val);
 80050dc:	f107 0314 	add.w	r3, r7, #20
 80050e0:	681b      	ldr	r3, [r3, #0]

            inB1 = arm_nn_read_q15x2_ia(&pB);
 80050e2:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 80050e6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80050ea:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80050ee:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q15, 4);
 80050f0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	461a      	mov	r2, r3
 80050fc:	f107 0310 	add.w	r3, r7, #16
 8005100:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 8005102:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	1d1a      	adds	r2, r3, #4
 800510c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	601a      	str	r2, [r3, #0]
    return (val);
 8005114:	f107 0310 	add.w	r3, r7, #16
 8005118:	681b      	ldr	r3, [r3, #0]
            inB2 = arm_nn_read_q15x2_ia(&pB2);
 800511a:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258

            sum = __SMLAD(inA12, inB1, sum);
 800511e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4618      	mov	r0, r3
 8005126:	f8d7 125c 	ldr.w	r1, [r7, #604]	; 0x25c
 800512a:	f8d7 2280 	ldr.w	r2, [r7, #640]	; 0x280
 800512e:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8005132:	6018      	str	r0, [r3, #0]
 8005134:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8005138:	6019      	str	r1, [r3, #0]
 800513a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800513e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8005140:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800514a:	6812      	ldr	r2, [r2, #0]
 800514c:	f107 01ec 	add.w	r1, r7, #236	; 0xec
 8005150:	6809      	ldr	r1, [r1, #0]
 8005152:	fb23 1202 	smlad	r2, r3, r2, r1
 8005156:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800515a:	601a      	str	r2, [r3, #0]
  return(result);
 800515c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280
            sum2 = __SMLAD(inA12, inB2, sum2);
 8005166:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4618      	mov	r0, r3
 800516e:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8005172:	f8d7 227c 	ldr.w	r2, [r7, #636]	; 0x27c
 8005176:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800517a:	6018      	str	r0, [r3, #0]
 800517c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8005180:	6019      	str	r1, [r3, #0]
 8005182:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8005186:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8005188:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8005192:	6812      	ldr	r2, [r2, #0]
 8005194:	f107 01fc 	add.w	r1, r7, #252	; 0xfc
 8005198:	6809      	ldr	r1, [r1, #0]
 800519a:	fb23 1202 	smlad	r2, r3, r2, r1
 800519e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80051a2:	601a      	str	r2, [r3, #0]
  return(result);
 80051a4:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c

            colCnt--;
 80051ae:	f8b7 327a 	ldrh.w	r3, [r7, #634]	; 0x27a
 80051b2:	3b01      	subs	r3, #1
 80051b4:	f8a7 327a 	strh.w	r3, [r7, #634]	; 0x27a
        while (colCnt)
 80051b8:	f8b7 327a 	ldrh.w	r3, [r7, #634]	; 0x27a
 80051bc:	2b00      	cmp	r3, #0
 80051be:	f47f ae3d 	bne.w	8004e3c <arm_nn_mat_mult_kernel_q7_q15+0x8e0>
        }
        colCnt = numCol_A & 0x3;
 80051c2:	1d3b      	adds	r3, r7, #4
 80051c4:	881b      	ldrh	r3, [r3, #0]
 80051c6:	f003 0303 	and.w	r3, r3, #3
 80051ca:	f8a7 327a 	strh.w	r3, [r7, #634]	; 0x27a
        while (colCnt)
 80051ce:	e038      	b.n	8005242 <arm_nn_mat_mult_kernel_q7_q15+0xce6>
        {
            q7_t inA1 = *pA++;
 80051d0:	f107 030c 	add.w	r3, r7, #12
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f107 020c 	add.w	r2, r7, #12
 80051da:	1c59      	adds	r1, r3, #1
 80051dc:	6011      	str	r1, [r2, #0]
 80051de:	781b      	ldrb	r3, [r3, #0]
 80051e0:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
            q15_t inB1 = *pB++;
 80051e4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	1c99      	adds	r1, r3, #2
 80051ec:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80051f0:	6011      	str	r1, [r2, #0]
 80051f2:	881b      	ldrh	r3, [r3, #0]
 80051f4:	f8a7 3264 	strh.w	r3, [r7, #612]	; 0x264
            q15_t inB2 = *pB2++;
 80051f8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	1c99      	adds	r1, r3, #2
 8005200:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005204:	6011      	str	r1, [r2, #0]
 8005206:	881b      	ldrh	r3, [r3, #0]
 8005208:	f8a7 3262 	strh.w	r3, [r7, #610]	; 0x262

            sum += inA1 * inB1;
 800520c:	f997 3267 	ldrsb.w	r3, [r7, #615]	; 0x267
 8005210:	f9b7 2264 	ldrsh.w	r2, [r7, #612]	; 0x264
 8005214:	fb02 f303 	mul.w	r3, r2, r3
 8005218:	f8d7 2280 	ldr.w	r2, [r7, #640]	; 0x280
 800521c:	4413      	add	r3, r2
 800521e:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280
            sum2 += inA1 * inB2;
 8005222:	f997 3267 	ldrsb.w	r3, [r7, #615]	; 0x267
 8005226:	f9b7 2262 	ldrsh.w	r2, [r7, #610]	; 0x262
 800522a:	fb02 f303 	mul.w	r3, r2, r3
 800522e:	f8d7 227c 	ldr.w	r2, [r7, #636]	; 0x27c
 8005232:	4413      	add	r3, r2
 8005234:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
            colCnt--;
 8005238:	f8b7 327a 	ldrh.w	r3, [r7, #634]	; 0x27a
 800523c:	3b01      	subs	r3, #1
 800523e:	f8a7 327a 	strh.w	r3, [r7, #634]	; 0x27a
        while (colCnt)
 8005242:	f8b7 327a 	ldrh.w	r3, [r7, #634]	; 0x27a
 8005246:	2b00      	cmp	r3, #0
 8005248:	d1c2      	bne.n	80051d0 <arm_nn_mat_mult_kernel_q7_q15+0xc74>
        }

        *pOut++ = (q7_t)__SSAT((sum >> out_shift), 8);
 800524a:	f8b7 32b4 	ldrh.w	r3, [r7, #692]	; 0x2b4
 800524e:	f8d7 2280 	ldr.w	r2, [r7, #640]	; 0x280
 8005252:	fa42 f303 	asr.w	r3, r2, r3
 8005256:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
 800525a:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 800525e:	f303 0307 	ssat	r3, #8, r3
 8005262:	f8c7 3270 	str.w	r3, [r7, #624]	; 0x270
 8005266:	f8d7 1270 	ldr.w	r1, [r7, #624]	; 0x270
 800526a:	f8d7 32bc 	ldr.w	r3, [r7, #700]	; 0x2bc
 800526e:	1c5a      	adds	r2, r3, #1
 8005270:	f8c7 22bc 	str.w	r2, [r7, #700]	; 0x2bc
 8005274:	b24a      	sxtb	r2, r1
 8005276:	701a      	strb	r2, [r3, #0]
        *pOut2++ = (q7_t)__SSAT((sum2 >> out_shift), 8);
 8005278:	f8b7 32b4 	ldrh.w	r3, [r7, #692]	; 0x2b4
 800527c:	f8d7 227c 	ldr.w	r2, [r7, #636]	; 0x27c
 8005280:	fa42 f303 	asr.w	r3, r2, r3
 8005284:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
 8005288:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 800528c:	f303 0307 	ssat	r3, #8, r3
 8005290:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
 8005294:	f8d7 1268 	ldr.w	r1, [r7, #616]	; 0x268
 8005298:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 800529c:	1c5a      	adds	r2, r3, #1
 800529e:	f8c7 22a4 	str.w	r2, [r7, #676]	; 0x2a4
 80052a2:	b24a      	sxtb	r2, r1
 80052a4:	701a      	strb	r2, [r3, #0]
    }

    pOut += ch_im_out;
 80052a6:	1dbb      	adds	r3, r7, #6
 80052a8:	881b      	ldrh	r3, [r3, #0]
 80052aa:	f8d7 22bc 	ldr.w	r2, [r7, #700]	; 0x2bc
 80052ae:	4413      	add	r3, r2
 80052b0:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc

    /* return the new output pointer with offset */
    return pOut;
 80052b4:	f8d7 32bc 	ldr.w	r3, [r7, #700]	; 0x2bc
    (void)bias;
    (void)pOut;
    /* To be completed */
    return NULL;
#endif /* ARM_MATH_DSP */
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	f507 772a 	add.w	r7, r7, #680	; 0x2a8
 80052be:	46bd      	mov	sp, r7
 80052c0:	bc90      	pop	{r4, r7}
 80052c2:	4770      	bx	lr

080052c4 <arm_nn_mat_mult_kernel_q7_q15_reordered>:
                                              const uint16_t numCol_A,
                                              const uint16_t bias_shift,
                                              const uint16_t out_shift,
                                              const q7_t *bias,
                                              q7_t *pOut)
{
 80052c4:	b490      	push	{r4, r7}
 80052c6:	b0de      	sub	sp, #376	; 0x178
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	f107 040c 	add.w	r4, r7, #12
 80052ce:	6020      	str	r0, [r4, #0]
 80052d0:	f107 0008 	add.w	r0, r7, #8
 80052d4:	6001      	str	r1, [r0, #0]
 80052d6:	4619      	mov	r1, r3
 80052d8:	1dbb      	adds	r3, r7, #6
 80052da:	801a      	strh	r2, [r3, #0]
 80052dc:	1d3b      	adds	r3, r7, #4
 80052de:	460a      	mov	r2, r1
 80052e0:	801a      	strh	r2, [r3, #0]

#if defined(ARM_MATH_DSP)
    /* set up the second output pointers */
    q7_t *pOut2 = pOut + ch_im_out;
 80052e2:	1dbb      	adds	r3, r7, #6
 80052e4:	881b      	ldrh	r3, [r3, #0]
 80052e6:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 80052ea:	4413      	add	r3, r2
 80052ec:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
    int i;

    /* this loop over rows in A */
    for (i = 0; i < ch_im_out; i += 2)
 80052f0:	2300      	movs	r3, #0
 80052f2:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 80052f6:	e376      	b.n	80059e6 <arm_nn_mat_mult_kernel_q7_q15_reordered+0x722>
    {
        /* setup pointers for B */
        const q15_t *pB = pInBuffer;
 80052f8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80052fc:	f107 0208 	add.w	r2, r7, #8
 8005300:	6812      	ldr	r2, [r2, #0]
 8005302:	601a      	str	r2, [r3, #0]
        const q15_t *pB2 = pB + numCol_A;
 8005304:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	1d3b      	adds	r3, r7, #4
 800530c:	881b      	ldrh	r3, [r3, #0]
 800530e:	005b      	lsls	r3, r3, #1
 8005310:	441a      	add	r2, r3
 8005312:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005316:	601a      	str	r2, [r3, #0]

        /* align the second pointer for A */
        const q7_t *pA2 = pA + numCol_A;
 8005318:	1d3b      	adds	r3, r7, #4
 800531a:	881b      	ldrh	r3, [r3, #0]
 800531c:	f107 020c 	add.w	r2, r7, #12
 8005320:	6812      	ldr	r2, [r2, #0]
 8005322:	4413      	add	r3, r2
 8005324:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c

        /* init the sum with bias */
        q31_t sum = ((q31_t)(bias[i]) << bias_shift) + NN_ROUND(out_shift);
 8005328:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800532c:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 8005330:	4413      	add	r3, r2
 8005332:	f993 3000 	ldrsb.w	r3, [r3]
 8005336:	461a      	mov	r2, r3
 8005338:	f8b7 3180 	ldrh.w	r3, [r7, #384]	; 0x180
 800533c:	fa02 f303 	lsl.w	r3, r2, r3
 8005340:	4619      	mov	r1, r3
 8005342:	f8b7 3184 	ldrh.w	r3, [r7, #388]	; 0x184
 8005346:	2201      	movs	r2, #1
 8005348:	fa02 f303 	lsl.w	r3, r2, r3
 800534c:	085b      	lsrs	r3, r3, #1
 800534e:	440b      	add	r3, r1
 8005350:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
        q31_t sum2 = ((q31_t)(bias[i]) << bias_shift) + NN_ROUND(out_shift);
 8005354:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8005358:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 800535c:	4413      	add	r3, r2
 800535e:	f993 3000 	ldrsb.w	r3, [r3]
 8005362:	461a      	mov	r2, r3
 8005364:	f8b7 3180 	ldrh.w	r3, [r7, #384]	; 0x180
 8005368:	fa02 f303 	lsl.w	r3, r2, r3
 800536c:	4619      	mov	r1, r3
 800536e:	f8b7 3184 	ldrh.w	r3, [r7, #388]	; 0x184
 8005372:	2201      	movs	r2, #1
 8005374:	fa02 f303 	lsl.w	r3, r2, r3
 8005378:	085b      	lsrs	r3, r3, #1
 800537a:	440b      	add	r3, r1
 800537c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
        q31_t sum3 = ((q31_t)(bias[i + 1]) << bias_shift) + NN_ROUND(out_shift);
 8005380:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8005384:	3301      	adds	r3, #1
 8005386:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 800538a:	4413      	add	r3, r2
 800538c:	f993 3000 	ldrsb.w	r3, [r3]
 8005390:	461a      	mov	r2, r3
 8005392:	f8b7 3180 	ldrh.w	r3, [r7, #384]	; 0x180
 8005396:	fa02 f303 	lsl.w	r3, r2, r3
 800539a:	4619      	mov	r1, r3
 800539c:	f8b7 3184 	ldrh.w	r3, [r7, #388]	; 0x184
 80053a0:	2201      	movs	r2, #1
 80053a2:	fa02 f303 	lsl.w	r3, r2, r3
 80053a6:	085b      	lsrs	r3, r3, #1
 80053a8:	440b      	add	r3, r1
 80053aa:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
        q31_t sum4 = ((q31_t)(bias[i + 1]) << bias_shift) + NN_ROUND(out_shift);
 80053ae:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80053b2:	3301      	adds	r3, #1
 80053b4:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 80053b8:	4413      	add	r3, r2
 80053ba:	f993 3000 	ldrsb.w	r3, [r3]
 80053be:	461a      	mov	r2, r3
 80053c0:	f8b7 3180 	ldrh.w	r3, [r7, #384]	; 0x180
 80053c4:	fa02 f303 	lsl.w	r3, r2, r3
 80053c8:	4619      	mov	r1, r3
 80053ca:	f8b7 3184 	ldrh.w	r3, [r7, #388]	; 0x184
 80053ce:	2201      	movs	r2, #1
 80053d0:	fa02 f303 	lsl.w	r3, r2, r3
 80053d4:	085b      	lsrs	r3, r3, #1
 80053d6:	440b      	add	r3, r1
 80053d8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

        uint16_t colCnt = numCol_A >> 2;
 80053dc:	1d3b      	adds	r3, r7, #4
 80053de:	881b      	ldrh	r3, [r3, #0]
 80053e0:	089b      	lsrs	r3, r3, #2
 80053e2:	f8a7 315a 	strh.w	r3, [r7, #346]	; 0x15a
        /* accumulate over the vector */
        while (colCnt)
 80053e6:	e22d      	b.n	8005844 <arm_nn_mat_mult_kernel_q7_q15_reordered+0x580>
 80053e8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80053ec:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80053f0:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q15, 4);
 80053f2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	461a      	mov	r2, r3
 80053fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005402:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 8005404:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	1d1a      	adds	r2, r3, #4
 800540e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	601a      	str	r2, [r3, #0]
    return (val);
 8005416:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800541a:	681b      	ldr	r3, [r3, #0]
        {
            q31_t inA11, inA12, inA21, inA22;

            q31_t inB1 = arm_nn_read_q15x2_ia(&pB);
 800541c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8005420:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005424:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8005428:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q15, 4);
 800542a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	461a      	mov	r2, r3
 8005436:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800543a:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 800543c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	1d1a      	adds	r2, r3, #4
 8005446:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	601a      	str	r2, [r3, #0]
    return (val);
 800544e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005452:	681b      	ldr	r3, [r3, #0]
            q31_t inB2 = arm_nn_read_q15x2_ia(&pB2);
 8005454:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005458:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800545c:	f107 020c 	add.w	r2, r7, #12
 8005460:	6812      	ldr	r2, [r2, #0]
 8005462:	601a      	str	r2, [r3, #0]
 8005464:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005468:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800546c:	601a      	str	r2, [r3, #0]
 800546e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005472:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005476:	601a      	str	r2, [r3, #0]
 8005478:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800547c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8005480:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 8005482:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	461a      	mov	r2, r3
 800548e:	f107 0320 	add.w	r3, r7, #32
 8005492:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8005494:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	1d1a      	adds	r2, r3, #4
 800549e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	601a      	str	r2, [r3, #0]
    return (val);
 80054a6:	f107 0320 	add.w	r3, r7, #32
 80054aa:	681a      	ldr	r2, [r3, #0]
    q31_t inA = arm_nn_read_q7x4_ia(&source);
 80054ac:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80054b0:	601a      	str	r2, [r3, #0]
    *out2 = __SXTB16(__ROR((uint32_t)inA, 8));
 80054b2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80054bc:	601a      	str	r2, [r3, #0]
 80054be:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80054c2:	2208      	movs	r2, #8
 80054c4:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 80054c6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80054ca:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80054ce:	6812      	ldr	r2, [r2, #0]
 80054d0:	f002 021f 	and.w	r2, r2, #31
 80054d4:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 80054d6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d103      	bne.n	80054e8 <arm_nn_mat_mult_kernel_q7_q15_reordered+0x224>
    return op1;
 80054e0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	e007      	b.n	80054f8 <arm_nn_mat_mult_kernel_q7_q15_reordered+0x234>
  return (op1 >> op2) | (op1 << (32U - op2));
 80054e8:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80054ec:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80054f0:	6812      	ldr	r2, [r2, #0]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	fa62 f303 	ror.w	r3, r2, r3
 80054f8:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80054fc:	6013      	str	r3, [r2, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80054fe:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	fa2f f283 	sxtb16	r2, r3
 8005508:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800550c:	601a      	str	r2, [r3, #0]
  return(result);
 800550e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	461a      	mov	r2, r3
 8005516:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	601a      	str	r2, [r3, #0]
    *out1 = __SXTB16(inA);
 800551e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005528:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800552a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	fa2f f283 	sxtb16	r2, r3
 8005534:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005538:	601a      	str	r2, [r3, #0]
  return(result);
 800553a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	461a      	mov	r2, r3
 8005542:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	601a      	str	r2, [r3, #0]
    return source;
 800554a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800554e:	681a      	ldr	r2, [r3, #0]

            pA = read_and_pad_reordered(pA, &inA11, &inA12);
 8005550:	f107 030c 	add.w	r3, r7, #12
 8005554:	601a      	str	r2, [r3, #0]
 8005556:	f107 031c 	add.w	r3, r7, #28
 800555a:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 800555e:	601a      	str	r2, [r3, #0]
 8005560:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005564:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005568:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800556c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005570:	f107 031c 	add.w	r3, r7, #28
 8005574:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    memcpy(&val, *in_q7, 4);
 8005578:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	461a      	mov	r2, r3
 8005582:	f107 0318 	add.w	r3, r7, #24
 8005586:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8005588:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	1d1a      	adds	r2, r3, #4
 8005590:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005594:	601a      	str	r2, [r3, #0]
    return (val);
 8005596:	f107 0318 	add.w	r3, r7, #24
 800559a:	681b      	ldr	r3, [r3, #0]
    q31_t inA = arm_nn_read_q7x4_ia(&source);
 800559c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    *out2 = __SXTB16(__ROR((uint32_t)inA, 8));
 80055a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80055a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80055a8:	2308      	movs	r3, #8
 80055aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  op2 %= 32U;
 80055ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80055b2:	f003 031f 	and.w	r3, r3, #31
 80055b6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (op2 == 0U)
 80055ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d102      	bne.n	80055c8 <arm_nn_mat_mult_kernel_q7_q15_reordered+0x304>
    return op1;
 80055c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80055c6:	e005      	b.n	80055d4 <arm_nn_mat_mult_kernel_q7_q15_reordered+0x310>
  return (op1 >> op2) | (op1 << (32U - op2));
 80055c8:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80055cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80055d0:	fa62 f303 	ror.w	r3, r2, r3
 80055d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80055d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80055dc:	fa2f f383 	sxtb16	r3, r3
 80055e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  return(result);
 80055e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80055e8:	461a      	mov	r2, r3
 80055ea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80055ee:	601a      	str	r2, [r3, #0]
    *out1 = __SXTB16(inA);
 80055f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80055f4:	67fb      	str	r3, [r7, #124]	; 0x7c
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80055f6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80055f8:	fa2f f283 	sxtb16	r2, r3
 80055fc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005600:	601a      	str	r2, [r3, #0]
  return(result);
 8005602:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	461a      	mov	r2, r3
 800560a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800560e:	601a      	str	r2, [r3, #0]
    return source;
 8005610:	f107 031c 	add.w	r3, r7, #28
 8005614:	681b      	ldr	r3, [r3, #0]
            pA2 = read_and_pad_reordered(pA2, &inA21, &inA22);
 8005616:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c

            sum = __SMLAD(inA11, inB1, sum);
 800561a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4619      	mov	r1, r3
 8005622:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8005626:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800562a:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
 800562e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005632:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8005636:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800563a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800563e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005642:	fb23 1302 	smlad	r3, r3, r2, r1
 8005646:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return(result);
 800564a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800564e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
            sum2 = __SMLAD(inA11, inB2, sum2);
 8005652:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4619      	mov	r1, r3
 800565a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800565e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005662:	f8c7 10bc 	str.w	r1, [r7, #188]	; 0xbc
 8005666:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 800566a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800566e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005672:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005676:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800567a:	fb23 1302 	smlad	r3, r3, r2, r1
 800567e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  return(result);
 8005682:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005686:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
            sum3 = __SMLAD(inA21, inB1, sum3);
 800568a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4619      	mov	r1, r3
 8005692:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8005696:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800569a:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
 800569e:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 80056a2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80056a6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80056aa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80056ae:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 80056b2:	fb23 1302 	smlad	r3, r3, r2, r1
 80056b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  return(result);
 80056ba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80056be:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
            sum4 = __SMLAD(inA21, inB2, sum4);
 80056c2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4619      	mov	r1, r3
 80056ca:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80056ce:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80056d2:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 80056d6:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 80056da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80056de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056e2:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80056e6:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 80056ea:	fb23 1302 	smlad	r3, r3, r2, r1
 80056ee:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  return(result);
 80056f2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80056f6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 80056fa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80056fe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    memcpy(&val, *in_q15, 4);
 8005702:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	461a      	mov	r2, r3
 800570c:	f107 0314 	add.w	r3, r7, #20
 8005710:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 8005712:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	1d1a      	adds	r2, r3, #4
 800571a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800571e:	601a      	str	r2, [r3, #0]
    return (val);
 8005720:	f107 0314 	add.w	r3, r7, #20
 8005724:	681b      	ldr	r3, [r3, #0]

            inB1 = arm_nn_read_q15x2_ia(&pB);
 8005726:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800572a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800572e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    memcpy(&val, *in_q15, 4);
 8005732:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	461a      	mov	r2, r3
 800573c:	f107 0310 	add.w	r3, r7, #16
 8005740:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 8005742:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	1d1a      	adds	r2, r3, #4
 800574a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800574e:	601a      	str	r2, [r3, #0]
    return (val);
 8005750:	f107 0310 	add.w	r3, r7, #16
 8005754:	681b      	ldr	r3, [r3, #0]
            inB2 = arm_nn_read_q15x2_ia(&pB2);
 8005756:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

            sum = __SMLAD(inA12, inB1, sum);
 800575a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4619      	mov	r1, r3
 8005762:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8005766:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800576a:	f8c7 10f4 	str.w	r1, [r7, #244]	; 0xf4
 800576e:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8005772:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8005776:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800577a:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 800577e:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8005782:	fb23 1302 	smlad	r3, r3, r2, r1
 8005786:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  return(result);
 800578a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800578e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
            sum2 = __SMLAD(inA12, inB2, sum2);
 8005792:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4619      	mov	r1, r3
 800579a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800579e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80057a2:	f8c7 1104 	str.w	r1, [r7, #260]	; 0x104
 80057a6:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
 80057aa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80057ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057b2:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 80057b6:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 80057ba:	fb23 1302 	smlad	r3, r3, r2, r1
 80057be:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  return(result);
 80057c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80057c6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
            sum3 = __SMLAD(inA22, inB1, sum3);
 80057ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4619      	mov	r1, r3
 80057d2:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80057d6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80057da:	f8c7 1114 	str.w	r1, [r7, #276]	; 0x114
 80057de:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
 80057e2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80057e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057ea:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80057ee:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 80057f2:	fb23 1302 	smlad	r3, r3, r2, r1
 80057f6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  return(result);
 80057fa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80057fe:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
            sum4 = __SMLAD(inA22, inB2, sum4);
 8005802:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4619      	mov	r1, r3
 800580a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800580e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8005812:	f8c7 1124 	str.w	r1, [r7, #292]	; 0x124
 8005816:	f8c7 2120 	str.w	r2, [r7, #288]	; 0x120
 800581a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800581e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005822:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8005826:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800582a:	fb23 1302 	smlad	r3, r3, r2, r1
 800582e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  return(result);
 8005832:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005836:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

            colCnt--;
 800583a:	f8b7 315a 	ldrh.w	r3, [r7, #346]	; 0x15a
 800583e:	3b01      	subs	r3, #1
 8005840:	f8a7 315a 	strh.w	r3, [r7, #346]	; 0x15a
        while (colCnt)
 8005844:	f8b7 315a 	ldrh.w	r3, [r7, #346]	; 0x15a
 8005848:	2b00      	cmp	r3, #0
 800584a:	f47f adcd 	bne.w	80053e8 <arm_nn_mat_mult_kernel_q7_q15_reordered+0x124>
        } /* while over colCnt */
        colCnt = numCol_A & 0x3;
 800584e:	1d3b      	adds	r3, r7, #4
 8005850:	881b      	ldrh	r3, [r3, #0]
 8005852:	f003 0303 	and.w	r3, r3, #3
 8005856:	f8a7 315a 	strh.w	r3, [r7, #346]	; 0x15a
        while (colCnt)
 800585a:	e056      	b.n	800590a <arm_nn_mat_mult_kernel_q7_q15_reordered+0x646>
        {
            q7_t inA1 = *pA++;
 800585c:	f107 030c 	add.w	r3, r7, #12
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f107 020c 	add.w	r2, r7, #12
 8005866:	1c59      	adds	r1, r3, #1
 8005868:	6011      	str	r1, [r2, #0]
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
            q15_t inB1 = *pB++;
 8005870:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	1c99      	adds	r1, r3, #2
 8005878:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800587c:	6011      	str	r1, [r2, #0]
 800587e:	881b      	ldrh	r3, [r3, #0]
 8005880:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
            q7_t inA2 = *pA2++;
 8005884:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005888:	1c5a      	adds	r2, r3, #1
 800588a:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
            q15_t inB2 = *pB2++;
 8005894:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	1c99      	adds	r1, r3, #2
 800589c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80058a0:	6011      	str	r1, [r2, #0]
 80058a2:	881b      	ldrh	r3, [r3, #0]
 80058a4:	f8a7 3130 	strh.w	r3, [r7, #304]	; 0x130

            sum += inA1 * inB1;
 80058a8:	f997 3137 	ldrsb.w	r3, [r7, #311]	; 0x137
 80058ac:	f9b7 2134 	ldrsh.w	r2, [r7, #308]	; 0x134
 80058b0:	fb02 f303 	mul.w	r3, r2, r3
 80058b4:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 80058b8:	4413      	add	r3, r2
 80058ba:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
            sum2 += inA1 * inB2;
 80058be:	f997 3137 	ldrsb.w	r3, [r7, #311]	; 0x137
 80058c2:	f9b7 2130 	ldrsh.w	r2, [r7, #304]	; 0x130
 80058c6:	fb02 f303 	mul.w	r3, r2, r3
 80058ca:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 80058ce:	4413      	add	r3, r2
 80058d0:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
            sum3 += inA2 * inB1;
 80058d4:	f997 3133 	ldrsb.w	r3, [r7, #307]	; 0x133
 80058d8:	f9b7 2134 	ldrsh.w	r2, [r7, #308]	; 0x134
 80058dc:	fb02 f303 	mul.w	r3, r2, r3
 80058e0:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 80058e4:	4413      	add	r3, r2
 80058e6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
            sum4 += inA2 * inB2;
 80058ea:	f997 3133 	ldrsb.w	r3, [r7, #307]	; 0x133
 80058ee:	f9b7 2130 	ldrsh.w	r2, [r7, #304]	; 0x130
 80058f2:	fb02 f303 	mul.w	r3, r2, r3
 80058f6:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 80058fa:	4413      	add	r3, r2
 80058fc:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
            colCnt--;
 8005900:	f8b7 315a 	ldrh.w	r3, [r7, #346]	; 0x15a
 8005904:	3b01      	subs	r3, #1
 8005906:	f8a7 315a 	strh.w	r3, [r7, #346]	; 0x15a
        while (colCnt)
 800590a:	f8b7 315a 	ldrh.w	r3, [r7, #346]	; 0x15a
 800590e:	2b00      	cmp	r3, #0
 8005910:	d1a4      	bne.n	800585c <arm_nn_mat_mult_kernel_q7_q15_reordered+0x598>
        } /* while over colCnt */
        *pOut++ = (q7_t)__SSAT((sum >> out_shift), 8);
 8005912:	f8b7 3184 	ldrh.w	r3, [r7, #388]	; 0x184
 8005916:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 800591a:	fa42 f303 	asr.w	r3, r2, r3
 800591e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8005922:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8005926:	f303 0307 	ssat	r3, #8, r3
 800592a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800592e:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8005932:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8005936:	1c5a      	adds	r2, r3, #1
 8005938:	f8c7 218c 	str.w	r2, [r7, #396]	; 0x18c
 800593c:	b24a      	sxtb	r2, r1
 800593e:	701a      	strb	r2, [r3, #0]
        *pOut++ = (q7_t)__SSAT((sum3 >> out_shift), 8);
 8005940:	f8b7 3184 	ldrh.w	r3, [r7, #388]	; 0x184
 8005944:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8005948:	fa42 f303 	asr.w	r3, r2, r3
 800594c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8005950:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005954:	f303 0307 	ssat	r3, #8, r3
 8005958:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800595c:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 8005960:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8005964:	1c5a      	adds	r2, r3, #1
 8005966:	f8c7 218c 	str.w	r2, [r7, #396]	; 0x18c
 800596a:	b24a      	sxtb	r2, r1
 800596c:	701a      	strb	r2, [r3, #0]
        *pOut2++ = (q7_t)__SSAT((sum2 >> out_shift), 8);
 800596e:	f8b7 3184 	ldrh.w	r3, [r7, #388]	; 0x184
 8005972:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8005976:	fa42 f303 	asr.w	r3, r2, r3
 800597a:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 800597e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8005982:	f303 0307 	ssat	r3, #8, r3
 8005986:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 800598a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800598e:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8005992:	1c5a      	adds	r2, r3, #1
 8005994:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 8005998:	b24a      	sxtb	r2, r1
 800599a:	701a      	strb	r2, [r3, #0]
        *pOut2++ = (q7_t)__SSAT((sum4 >> out_shift), 8);
 800599c:	f8b7 3184 	ldrh.w	r3, [r7, #388]	; 0x184
 80059a0:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 80059a4:	fa42 f303 	asr.w	r3, r2, r3
 80059a8:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 80059ac:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80059b0:	f303 0307 	ssat	r3, #8, r3
 80059b4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80059b8:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 80059bc:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80059c0:	1c5a      	adds	r2, r3, #1
 80059c2:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 80059c6:	b24a      	sxtb	r2, r1
 80059c8:	701a      	strb	r2, [r3, #0]

        /* skip the row computed with A2 */
        pA += numCol_A;
 80059ca:	1d3b      	adds	r3, r7, #4
 80059cc:	881a      	ldrh	r2, [r3, #0]
 80059ce:	f107 030c 	add.w	r3, r7, #12
 80059d2:	f107 010c 	add.w	r1, r7, #12
 80059d6:	6809      	ldr	r1, [r1, #0]
 80059d8:	440a      	add	r2, r1
 80059da:	601a      	str	r2, [r3, #0]
    for (i = 0; i < ch_im_out; i += 2)
 80059dc:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80059e0:	3302      	adds	r3, #2
 80059e2:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 80059e6:	1dbb      	adds	r3, r7, #6
 80059e8:	881b      	ldrh	r3, [r3, #0]
 80059ea:	f8d7 2170 	ldr.w	r2, [r7, #368]	; 0x170
 80059ee:	429a      	cmp	r2, r3
 80059f0:	f6ff ac82 	blt.w	80052f8 <arm_nn_mat_mult_kernel_q7_q15_reordered+0x34>
    } /* for over ch_im_out */

    pOut += ch_im_out;
 80059f4:	1dbb      	adds	r3, r7, #6
 80059f6:	881b      	ldrh	r3, [r3, #0]
 80059f8:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 80059fc:	4413      	add	r3, r2
 80059fe:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c

    /* return the new output pointer with offset */
    return pOut;
 8005a02:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    (void)bias;
    (void)pOut;
    /* To be completed */
    return NULL;
#endif /* ARM_MATH_DSP */
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	f507 77bc 	add.w	r7, r7, #376	; 0x178
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bc90      	pop	{r4, r7}
 8005a10:	4770      	bx	lr

08005a12 <arm_fully_connected_q7>:
                                  const uint16_t bias_shift,
                                  const uint16_t out_shift,
                                  const q7_t *bias,
                                  q7_t *pOut,
                                  q15_t *vec_buffer)
{
 8005a12:	b590      	push	{r4, r7, lr}
 8005a14:	b0e5      	sub	sp, #404	; 0x194
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	f107 040c 	add.w	r4, r7, #12
 8005a1c:	6020      	str	r0, [r4, #0]
 8005a1e:	f107 0008 	add.w	r0, r7, #8
 8005a22:	6001      	str	r1, [r0, #0]
 8005a24:	4619      	mov	r1, r3
 8005a26:	1dbb      	adds	r3, r7, #6
 8005a28:	801a      	strh	r2, [r3, #0]
 8005a2a:	1d3b      	adds	r3, r7, #4
 8005a2c:	460a      	mov	r2, r1
 8005a2e:	801a      	strh	r2, [r3, #0]

#if defined(ARM_MATH_DSP)
    /* Run the following code for Cortex-M4 and Cortex-M7 */

    const q7_t *pB = pM;
 8005a30:	f107 0308 	add.w	r3, r7, #8
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
    const q7_t *pB2;
    q7_t *pO = pOut;
 8005a3a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8005a3e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
    const q7_t *pBias = bias;
 8005a42:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8005a46:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
    const q15_t *pA;
    uint16_t rowCnt = num_of_rows >> 1;
 8005a4a:	1d3b      	adds	r3, r7, #4
 8005a4c:	881b      	ldrh	r3, [r3, #0]
 8005a4e:	085b      	lsrs	r3, r3, #1
 8005a50:	f8a7 317e 	strh.w	r3, [r7, #382]	; 0x17e

    /* expand the vector into the buffer */
    arm_q7_to_q15_reordered_no_shift(pV, vec_buffer, dim_vec);
 8005a54:	1dbb      	adds	r3, r7, #6
 8005a56:	881a      	ldrh	r2, [r3, #0]
 8005a58:	f107 030c 	add.w	r3, r7, #12
 8005a5c:	f8d7 11b0 	ldr.w	r1, [r7, #432]	; 0x1b0
 8005a60:	6818      	ldr	r0, [r3, #0]
 8005a62:	f000 fc40 	bl	80062e6 <arm_q7_to_q15_reordered_no_shift>

    while (rowCnt)
 8005a66:	e228      	b.n	8005eba <arm_fully_connected_q7+0x4a8>
    {
        q31_t sum = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 8005a68:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005a6c:	1c5a      	adds	r2, r3, #1
 8005a6e:	f8c7 2180 	str.w	r2, [r7, #384]	; 0x180
 8005a72:	f993 3000 	ldrsb.w	r3, [r3]
 8005a76:	461a      	mov	r2, r3
 8005a78:	f8b7 31a0 	ldrh.w	r3, [r7, #416]	; 0x1a0
 8005a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a80:	4619      	mov	r1, r3
 8005a82:	f8b7 31a4 	ldrh.w	r3, [r7, #420]	; 0x1a4
 8005a86:	2201      	movs	r2, #1
 8005a88:	fa02 f303 	lsl.w	r3, r2, r3
 8005a8c:	085b      	lsrs	r3, r3, #1
 8005a8e:	440b      	add	r3, r1
 8005a90:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
        q31_t sum2 = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 8005a94:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005a98:	1c5a      	adds	r2, r3, #1
 8005a9a:	f8c7 2180 	str.w	r2, [r7, #384]	; 0x180
 8005a9e:	f993 3000 	ldrsb.w	r3, [r3]
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	f8b7 31a0 	ldrh.w	r3, [r7, #416]	; 0x1a0
 8005aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8005aac:	4619      	mov	r1, r3
 8005aae:	f8b7 31a4 	ldrh.w	r3, [r7, #420]	; 0x1a4
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab8:	085b      	lsrs	r3, r3, #1
 8005aba:	440b      	add	r3, r1
 8005abc:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
        uint16_t colCnt = dim_vec >> 2;
 8005ac0:	1dbb      	adds	r3, r7, #6
 8005ac2:	881b      	ldrh	r3, [r3, #0]
 8005ac4:	089b      	lsrs	r3, r3, #2
 8005ac6:	f8a7 3172 	strh.w	r3, [r7, #370]	; 0x172

        pA = vec_buffer;
 8005aca:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005ace:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 8005ad2:	601a      	str	r2, [r3, #0]
        pB2 = pB + dim_vec;
 8005ad4:	1dbb      	adds	r3, r7, #6
 8005ad6:	881b      	ldrh	r3, [r3, #0]
 8005ad8:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8005adc:	4413      	add	r3, r2
 8005ade:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188

        while (colCnt)
 8005ae2:	e168      	b.n	8005db6 <arm_fully_connected_q7+0x3a4>
 8005ae4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005ae8:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8005aec:	601a      	str	r2, [r3, #0]
 8005aee:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005af2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005af6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005afa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005afe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005b02:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    memcpy(&val, *in_q7, 4);
 8005b06:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	461a      	mov	r2, r3
 8005b10:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005b14:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8005b16:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	1d1a      	adds	r2, r3, #4
 8005b1e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005b22:	601a      	str	r2, [r3, #0]
    return (val);
 8005b24:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005b28:	681b      	ldr	r3, [r3, #0]
    q31_t inA = arm_nn_read_q7x4_ia(&source);
 8005b2a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    *out2 = __SXTB16(__ROR((uint32_t)inA, 8));
 8005b2e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005b32:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005b36:	2308      	movs	r3, #8
 8005b38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  op2 %= 32U;
 8005b3c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005b40:	f003 031f 	and.w	r3, r3, #31
 8005b44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (op2 == 0U)
 8005b48:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d102      	bne.n	8005b56 <arm_fully_connected_q7+0x144>
    return op1;
 8005b50:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005b54:	e005      	b.n	8005b62 <arm_fully_connected_q7+0x150>
  return (op1 >> op2) | (op1 << (32U - op2));
 8005b56:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005b5a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005b5e:	fa62 f303 	ror.w	r3, r2, r3
 8005b62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8005b66:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005b6a:	fa2f f383 	sxtb16	r3, r3
 8005b6e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return(result);
 8005b72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005b76:	461a      	mov	r2, r3
 8005b78:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005b7c:	601a      	str	r2, [r3, #0]
    *out1 = __SXTB16(inA);
 8005b7e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005b82:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8005b86:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005b8a:	fa2f f383 	sxtb16	r3, r3
 8005b8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  return(result);
 8005b92:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005b96:	461a      	mov	r2, r3
 8005b98:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005b9c:	601a      	str	r2, [r3, #0]
    return source;
 8005b9e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005ba2:	681b      	ldr	r3, [r3, #0]
        {
            q31_t inV, inM11, inM12, inM21, inM22;
            pB = read_and_pad_reordered(pB, &inM11, &inM12);
 8005ba4:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8005ba8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005bac:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 8005bb0:	601a      	str	r2, [r3, #0]
 8005bb2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005bb6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005bba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005bbe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005bc2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005bc6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    memcpy(&val, *in_q7, 4);
 8005bca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005bd8:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8005bda:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	1d1a      	adds	r2, r3, #4
 8005be2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005be6:	601a      	str	r2, [r3, #0]
    return (val);
 8005be8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005bec:	681b      	ldr	r3, [r3, #0]
    q31_t inA = arm_nn_read_q7x4_ia(&source);
 8005bee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    *out2 = __SXTB16(__ROR((uint32_t)inA, 8));
 8005bf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bf6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005bfa:	2308      	movs	r3, #8
 8005bfc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  op2 %= 32U;
 8005c00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c04:	f003 031f 	and.w	r3, r3, #31
 8005c08:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (op2 == 0U)
 8005c0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d102      	bne.n	8005c1a <arm_fully_connected_q7+0x208>
    return op1;
 8005c14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c18:	e005      	b.n	8005c26 <arm_fully_connected_q7+0x214>
  return (op1 >> op2) | (op1 << (32U - op2));
 8005c1a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005c1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c22:	fa62 f303 	ror.w	r3, r2, r3
 8005c26:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8005c2a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c2e:	fa2f f383 	sxtb16	r3, r3
 8005c32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  return(result);
 8005c36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005c40:	601a      	str	r2, [r3, #0]
    *out1 = __SXTB16(inA);
 8005c42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c46:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8005c4a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005c4e:	fa2f f383 	sxtb16	r3, r3
 8005c52:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  return(result);
 8005c56:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005c5a:	461a      	mov	r2, r3
 8005c5c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005c60:	601a      	str	r2, [r3, #0]
    return source;
 8005c62:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005c66:	681b      	ldr	r3, [r3, #0]
            pB2 = read_and_pad_reordered(pB2, &inM21, &inM22);
 8005c68:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8005c6c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005c70:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    memcpy(&val, *in_q15, 4);
 8005c74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	461a      	mov	r2, r3
 8005c7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005c82:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 8005c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	1d1a      	adds	r2, r3, #4
 8005c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c90:	601a      	str	r2, [r3, #0]
    return (val);
 8005c92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005c96:	681b      	ldr	r3, [r3, #0]

            inV = arm_nn_read_q15x2_ia(&pA);
 8005c98:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

            sum = __SMLAD(inV, inM11, sum);
 8005c9c:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8005ca0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4619      	mov	r1, r3
 8005ca8:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8005cac:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8005cb0:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 8005cb4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8005cb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cbc:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8005cc0:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 8005cc4:	fb23 1302 	smlad	r3, r3, r2, r1
 8005cc8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  return(result);
 8005ccc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005cd0:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
            sum2 = __SMLAD(inV, inM21, sum2);
 8005cd4:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8005cd8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4619      	mov	r1, r3
 8005ce0:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8005ce4:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 8005ce8:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 8005cec:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8005cf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cf4:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8005cf8:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 8005cfc:	fb23 1302 	smlad	r3, r3, r2, r1
 8005d00:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  return(result);
 8005d04:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005d08:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8005d0c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005d10:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    memcpy(&val, *in_q15, 4);
 8005d14:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	461a      	mov	r2, r3
 8005d1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005d22:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 8005d24:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	1d1a      	adds	r2, r3, #4
 8005d2c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005d30:	601a      	str	r2, [r3, #0]
    return (val);
 8005d32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005d36:	681b      	ldr	r3, [r3, #0]

            inV = arm_nn_read_q15x2_ia(&pA);
 8005d38:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

            sum = __SMLAD(inV, inM12, sum);
 8005d3c:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8005d40:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4619      	mov	r1, r3
 8005d48:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8005d4c:	f8c7 2128 	str.w	r2, [r7, #296]	; 0x128
 8005d50:	f8c7 1124 	str.w	r1, [r7, #292]	; 0x124
 8005d54:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8005d58:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005d5c:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8005d60:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8005d64:	fb23 1302 	smlad	r3, r3, r2, r1
 8005d68:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  return(result);
 8005d6c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005d70:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
            sum2 = __SMLAD(inV, inM22, sum2);
 8005d74:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8005d78:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4619      	mov	r1, r3
 8005d80:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8005d84:	f8c7 2138 	str.w	r2, [r7, #312]	; 0x138
 8005d88:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 8005d8c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8005d90:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005d94:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8005d98:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8005d9c:	fb23 1302 	smlad	r3, r3, r2, r1
 8005da0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return(result);
 8005da4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005da8:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174

            colCnt--;
 8005dac:	f8b7 3172 	ldrh.w	r3, [r7, #370]	; 0x172
 8005db0:	3b01      	subs	r3, #1
 8005db2:	f8a7 3172 	strh.w	r3, [r7, #370]	; 0x172
        while (colCnt)
 8005db6:	f8b7 3172 	ldrh.w	r3, [r7, #370]	; 0x172
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	f47f ae92 	bne.w	8005ae4 <arm_fully_connected_q7+0xd2>
        }
        colCnt = dim_vec & 0x3;
 8005dc0:	1dbb      	adds	r3, r7, #6
 8005dc2:	881b      	ldrh	r3, [r3, #0]
 8005dc4:	f003 0303 	and.w	r3, r3, #3
 8005dc8:	f8a7 3172 	strh.w	r3, [r7, #370]	; 0x172
        while (colCnt)
 8005dcc:	e037      	b.n	8005e3e <arm_fully_connected_q7+0x42c>
        {
            q7_t inV = *pA++;
 8005dce:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	1c99      	adds	r1, r3, #2
 8005dd6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8005dda:	6011      	str	r1, [r2, #0]
 8005ddc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005de0:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
            q15_t inM = *pB++;
 8005de4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8005de8:	1c5a      	adds	r2, r3, #1
 8005dea:	f8c7 218c 	str.w	r2, [r7, #396]	; 0x18c
 8005dee:	f993 3000 	ldrsb.w	r3, [r3]
 8005df2:	f8a7 3144 	strh.w	r3, [r7, #324]	; 0x144
            q15_t inM2 = *pB2++;
 8005df6:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8005dfa:	1c5a      	adds	r2, r3, #1
 8005dfc:	f8c7 2188 	str.w	r2, [r7, #392]	; 0x188
 8005e00:	f993 3000 	ldrsb.w	r3, [r3]
 8005e04:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

            sum += inV * inM;
 8005e08:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8005e0c:	f9b7 2144 	ldrsh.w	r2, [r7, #324]	; 0x144
 8005e10:	fb02 f303 	mul.w	r3, r2, r3
 8005e14:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8005e18:	4413      	add	r3, r2
 8005e1a:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
            sum2 += inV * inM2;
 8005e1e:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8005e22:	f9b7 2142 	ldrsh.w	r2, [r7, #322]	; 0x142
 8005e26:	fb02 f303 	mul.w	r3, r2, r3
 8005e2a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8005e2e:	4413      	add	r3, r2
 8005e30:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
            colCnt--;
 8005e34:	f8b7 3172 	ldrh.w	r3, [r7, #370]	; 0x172
 8005e38:	3b01      	subs	r3, #1
 8005e3a:	f8a7 3172 	strh.w	r3, [r7, #370]	; 0x172
        while (colCnt)
 8005e3e:	f8b7 3172 	ldrh.w	r3, [r7, #370]	; 0x172
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d1c3      	bne.n	8005dce <arm_fully_connected_q7+0x3bc>
        } /* while over colCnt */
        *pO++ = (q7_t)(__SSAT((sum >> out_shift), 8));
 8005e46:	f8b7 31a4 	ldrh.w	r3, [r7, #420]	; 0x1a4
 8005e4a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8005e4e:	fa42 f303 	asr.w	r3, r2, r3
 8005e52:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8005e56:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8005e5a:	f303 0307 	ssat	r3, #8, r3
 8005e5e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8005e62:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8005e66:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8005e6a:	1c5a      	adds	r2, r3, #1
 8005e6c:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 8005e70:	b24a      	sxtb	r2, r1
 8005e72:	701a      	strb	r2, [r3, #0]
        *pO++ = (q7_t)(__SSAT((sum2 >> out_shift), 8));
 8005e74:	f8b7 31a4 	ldrh.w	r3, [r7, #420]	; 0x1a4
 8005e78:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8005e7c:	fa42 f303 	asr.w	r3, r2, r3
 8005e80:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8005e84:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005e88:	f303 0307 	ssat	r3, #8, r3
 8005e8c:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8005e90:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 8005e94:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8005e98:	1c5a      	adds	r2, r3, #1
 8005e9a:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 8005e9e:	b24a      	sxtb	r2, r1
 8005ea0:	701a      	strb	r2, [r3, #0]

        /* adjust the pointers and counters */
        pB += dim_vec;
 8005ea2:	1dbb      	adds	r3, r7, #6
 8005ea4:	881b      	ldrh	r3, [r3, #0]
 8005ea6:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8005eaa:	4413      	add	r3, r2
 8005eac:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
        rowCnt--;
 8005eb0:	f8b7 317e 	ldrh.w	r3, [r7, #382]	; 0x17e
 8005eb4:	3b01      	subs	r3, #1
 8005eb6:	f8a7 317e 	strh.w	r3, [r7, #382]	; 0x17e
    while (rowCnt)
 8005eba:	f8b7 317e 	ldrh.w	r3, [r7, #382]	; 0x17e
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	f47f add2 	bne.w	8005a68 <arm_fully_connected_q7+0x56>
    }

    /* left-over part of the rows */
    rowCnt = num_of_rows & 0x1;
 8005ec4:	1d3b      	adds	r3, r7, #4
 8005ec6:	881b      	ldrh	r3, [r3, #0]
 8005ec8:	f003 0301 	and.w	r3, r3, #1
 8005ecc:	f8a7 317e 	strh.w	r3, [r7, #382]	; 0x17e

    while (rowCnt)
 8005ed0:	e16a      	b.n	80061a8 <arm_fully_connected_q7+0x796>
    {
        uint16_t colCnt = dim_vec >> 2;
 8005ed2:	1dbb      	adds	r3, r7, #6
 8005ed4:	881b      	ldrh	r3, [r3, #0]
 8005ed6:	089b      	lsrs	r3, r3, #2
 8005ed8:	f8a7 3170 	strh.w	r3, [r7, #368]	; 0x170
        q31_t sum = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 8005edc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005ee0:	1c5a      	adds	r2, r3, #1
 8005ee2:	f8c7 2180 	str.w	r2, [r7, #384]	; 0x180
 8005ee6:	f993 3000 	ldrsb.w	r3, [r3]
 8005eea:	461a      	mov	r2, r3
 8005eec:	f8b7 31a0 	ldrh.w	r3, [r7, #416]	; 0x1a0
 8005ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ef4:	4619      	mov	r1, r3
 8005ef6:	f8b7 31a4 	ldrh.w	r3, [r7, #420]	; 0x1a4
 8005efa:	2201      	movs	r2, #1
 8005efc:	fa02 f303 	lsl.w	r3, r2, r3
 8005f00:	085b      	lsrs	r3, r3, #1
 8005f02:	440b      	add	r3, r1
 8005f04:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c

        pA = vec_buffer;
 8005f08:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005f0c:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 8005f10:	601a      	str	r2, [r3, #0]

        while (colCnt)
 8005f12:	e0f9      	b.n	8006108 <arm_fully_connected_q7+0x6f6>
 8005f14:	f107 031c 	add.w	r3, r7, #28
 8005f18:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8005f1c:	601a      	str	r2, [r3, #0]
 8005f1e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005f22:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8005f26:	601a      	str	r2, [r3, #0]
 8005f28:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005f2c:	f107 0220 	add.w	r2, r7, #32
 8005f30:	601a      	str	r2, [r3, #0]
 8005f32:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005f36:	f107 021c 	add.w	r2, r7, #28
 8005f3a:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 8005f3c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	461a      	mov	r2, r3
 8005f48:	f107 0318 	add.w	r3, r7, #24
 8005f4c:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8005f4e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	1d1a      	adds	r2, r3, #4
 8005f58:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	601a      	str	r2, [r3, #0]
    return (val);
 8005f60:	f107 0318 	add.w	r3, r7, #24
 8005f64:	681a      	ldr	r2, [r3, #0]
    q31_t inA = arm_nn_read_q7x4_ia(&source);
 8005f66:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005f6a:	601a      	str	r2, [r3, #0]
    *out2 = __SXTB16(__ROR((uint32_t)inA, 8));
 8005f6c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005f70:	681a      	ldr	r2, [r3, #0]
 8005f72:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005f76:	601a      	str	r2, [r3, #0]
 8005f78:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005f7c:	2208      	movs	r2, #8
 8005f7e:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 8005f80:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005f84:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8005f88:	6812      	ldr	r2, [r2, #0]
 8005f8a:	f002 021f 	and.w	r2, r2, #31
 8005f8e:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8005f90:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d103      	bne.n	8005fa2 <arm_fully_connected_q7+0x590>
    return op1;
 8005f9a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	e007      	b.n	8005fb2 <arm_fully_connected_q7+0x5a0>
  return (op1 >> op2) | (op1 << (32U - op2));
 8005fa2:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8005fa6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005faa:	6812      	ldr	r2, [r2, #0]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	fa62 f303 	ror.w	r3, r2, r3
 8005fb2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005fb6:	6013      	str	r3, [r2, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8005fb8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	fa2f f283 	sxtb16	r2, r3
 8005fc2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005fc6:	601a      	str	r2, [r3, #0]
  return(result);
 8005fc8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	461a      	mov	r2, r3
 8005fd0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	601a      	str	r2, [r3, #0]
    *out1 = __SXTB16(inA);
 8005fd8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005fe2:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8005fe4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	fa2f f283 	sxtb16	r2, r3
 8005fee:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005ff2:	601a      	str	r2, [r3, #0]
  return(result);
 8005ff4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	461a      	mov	r2, r3
 8005ffc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	601a      	str	r2, [r3, #0]
    return source;
 8006004:	f107 031c 	add.w	r3, r7, #28
 8006008:	681b      	ldr	r3, [r3, #0]
        {
            q31_t inV1, inV2, inM11, inM12;

            pB = read_and_pad_reordered(pB, &inM11, &inM12);
 800600a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 800600e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006012:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006016:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q15, 4);
 8006018:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	461a      	mov	r2, r3
 8006024:	f107 0314 	add.w	r3, r7, #20
 8006028:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 800602a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	1d1a      	adds	r2, r3, #4
 8006034:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	601a      	str	r2, [r3, #0]
    return (val);
 800603c:	f107 0314 	add.w	r3, r7, #20
 8006040:	681b      	ldr	r3, [r3, #0]

            inV1 = arm_nn_read_q15x2_ia(&pA);
 8006042:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
            sum = __SMLAD(inV1, inM11, sum);
 8006046:	f8d7 115c 	ldr.w	r1, [r7, #348]	; 0x15c
 800604a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4618      	mov	r0, r3
 8006052:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8006056:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800605a:	6019      	str	r1, [r3, #0]
 800605c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8006060:	6018      	str	r0, [r3, #0]
 8006062:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8006066:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8006068:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8006072:	6812      	ldr	r2, [r2, #0]
 8006074:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8006078:	6809      	ldr	r1, [r1, #0]
 800607a:	fb23 1202 	smlad	r2, r3, r2, r1
 800607e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006082:	601a      	str	r2, [r3, #0]
  return(result);
 8006084:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 800608e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8006092:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006096:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q15, 4);
 8006098:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	461a      	mov	r2, r3
 80060a4:	f107 0310 	add.w	r3, r7, #16
 80060a8:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 80060aa:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	1d1a      	adds	r2, r3, #4
 80060b4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	601a      	str	r2, [r3, #0]
    return (val);
 80060bc:	f107 0310 	add.w	r3, r7, #16
 80060c0:	681b      	ldr	r3, [r3, #0]

            inV2 = arm_nn_read_q15x2_ia(&pA);
 80060c2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
            sum = __SMLAD(inV2, inM12, sum);
 80060c6:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 80060ca:	f107 0320 	add.w	r3, r7, #32
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4619      	mov	r1, r3
 80060d2:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80060d6:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 80060da:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
 80060de:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80060e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80060e6:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80060ea:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 80060ee:	fb23 1302 	smlad	r3, r3, r2, r1
 80060f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return(result);
 80060f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80060fa:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c

            colCnt--;
 80060fe:	f8b7 3170 	ldrh.w	r3, [r7, #368]	; 0x170
 8006102:	3b01      	subs	r3, #1
 8006104:	f8a7 3170 	strh.w	r3, [r7, #368]	; 0x170
        while (colCnt)
 8006108:	f8b7 3170 	ldrh.w	r3, [r7, #368]	; 0x170
 800610c:	2b00      	cmp	r3, #0
 800610e:	f47f af01 	bne.w	8005f14 <arm_fully_connected_q7+0x502>
        }

        /* left-over of the vector */
        colCnt = dim_vec & 0x3;
 8006112:	1dbb      	adds	r3, r7, #6
 8006114:	881b      	ldrh	r3, [r3, #0]
 8006116:	f003 0303 	and.w	r3, r3, #3
 800611a:	f8a7 3170 	strh.w	r3, [r7, #368]	; 0x170
        while (colCnt)
 800611e:	e023      	b.n	8006168 <arm_fully_connected_q7+0x756>
        {
            q7_t inV = *pA++;
 8006120:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	1c99      	adds	r1, r3, #2
 8006128:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800612c:	6011      	str	r1, [r2, #0]
 800612e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006132:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
            q15_t inM = *pB++;
 8006136:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800613a:	1c5a      	adds	r2, r3, #1
 800613c:	f8c7 218c 	str.w	r2, [r7, #396]	; 0x18c
 8006140:	f993 3000 	ldrsb.w	r3, [r3]
 8006144:	f8a7 3160 	strh.w	r3, [r7, #352]	; 0x160
            sum += inV * inM;
 8006148:	f997 3163 	ldrsb.w	r3, [r7, #355]	; 0x163
 800614c:	f9b7 2160 	ldrsh.w	r2, [r7, #352]	; 0x160
 8006150:	fb02 f303 	mul.w	r3, r2, r3
 8006154:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8006158:	4413      	add	r3, r2
 800615a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
            colCnt--;
 800615e:	f8b7 3170 	ldrh.w	r3, [r7, #368]	; 0x170
 8006162:	3b01      	subs	r3, #1
 8006164:	f8a7 3170 	strh.w	r3, [r7, #368]	; 0x170
        while (colCnt)
 8006168:	f8b7 3170 	ldrh.w	r3, [r7, #368]	; 0x170
 800616c:	2b00      	cmp	r3, #0
 800616e:	d1d7      	bne.n	8006120 <arm_fully_connected_q7+0x70e>
        }

        *pO++ = (q7_t)(__SSAT((sum >> out_shift), 8));
 8006170:	f8b7 31a4 	ldrh.w	r3, [r7, #420]	; 0x1a4
 8006174:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8006178:	fa42 f303 	asr.w	r3, r2, r3
 800617c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8006180:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8006184:	f303 0307 	ssat	r3, #8, r3
 8006188:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 800618c:	f8d7 1164 	ldr.w	r1, [r7, #356]	; 0x164
 8006190:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8006194:	1c5a      	adds	r2, r3, #1
 8006196:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 800619a:	b24a      	sxtb	r2, r1
 800619c:	701a      	strb	r2, [r3, #0]

        rowCnt--;
 800619e:	f8b7 317e 	ldrh.w	r3, [r7, #382]	; 0x17e
 80061a2:	3b01      	subs	r3, #1
 80061a4:	f8a7 317e 	strh.w	r3, [r7, #382]	; 0x17e
    while (rowCnt)
 80061a8:	f8b7 317e 	ldrh.w	r3, [r7, #382]	; 0x17e
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	f47f ae90 	bne.w	8005ed2 <arm_fully_connected_q7+0x4c0>
    }

#endif /* ARM_MATH_DSP */

    /* Return to ARM_MATH_SUCCESS */
    return (ARM_MATH_SUCCESS);
 80061b2:	2300      	movs	r3, #0
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd90      	pop	{r4, r7, pc}

080061be <arm_q7_to_q15_no_shift>:
 * </pre>
 *
 */

void arm_q7_to_q15_no_shift(const q7_t *pSrc, q15_t *pDst, uint32_t blockSize)
{
 80061be:	b480      	push	{r7}
 80061c0:	b0a1      	sub	sp, #132	; 0x84
 80061c2:	af00      	add	r7, sp, #0
 80061c4:	60f8      	str	r0, [r7, #12]
 80061c6:	60b9      	str	r1, [r7, #8]
 80061c8:	607a      	str	r2, [r7, #4]
    const q7_t *pIn = pSrc;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	623b      	str	r3, [r7, #32]
    q31_t in;
    q31_t in1, in2;
    q31_t out1, out2;

    /*loop Unrolling */
    blkCnt = blockSize >> 2u;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	089b      	lsrs	r3, r3, #2
 80061d2:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* First part of the processing with loop unrolling.  Compute 4 outputs at a time. */
    while (blkCnt > 0u)
 80061d4:	e068      	b.n	80062a8 <arm_q7_to_q15_no_shift+0xea>
 80061d6:	f107 0320 	add.w	r3, r7, #32
 80061da:	637b      	str	r3, [r7, #52]	; 0x34
    memcpy(&val, *in_q7, 4);
 80061dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	617b      	str	r3, [r7, #20]
    *in_q7 += 4;
 80061e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	1d1a      	adds	r2, r3, #4
 80061ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061ec:	601a      	str	r2, [r3, #0]
    return (val);
 80061ee:	697b      	ldr	r3, [r7, #20]
    {
        in = arm_nn_read_q7x4_ia(&pIn);
 80061f0:	67bb      	str	r3, [r7, #120]	; 0x78

        /* rotatate in by 8 and extend two q7_t values to q15_t values */
        in1 = __SXTB16(__ROR((uint32_t)in, 8));
 80061f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061f6:	2308      	movs	r3, #8
 80061f8:	63bb      	str	r3, [r7, #56]	; 0x38
  op2 %= 32U;
 80061fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061fc:	f003 031f 	and.w	r3, r3, #31
 8006200:	63bb      	str	r3, [r7, #56]	; 0x38
  if (op2 == 0U)
 8006202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006204:	2b00      	cmp	r3, #0
 8006206:	d101      	bne.n	800620c <arm_q7_to_q15_no_shift+0x4e>
    return op1;
 8006208:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800620a:	e003      	b.n	8006214 <arm_q7_to_q15_no_shift+0x56>
  return (op1 >> op2) | (op1 << (32U - op2));
 800620c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800620e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006210:	fa62 f303 	ror.w	r3, r2, r3
 8006214:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8006216:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006218:	fa2f f383 	sxtb16	r3, r3
 800621c:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 800621e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006220:	677b      	str	r3, [r7, #116]	; 0x74

        /* extend remaining two q7_t values to q15_t values */
        in2 = __SXTB16(in);
 8006222:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006224:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8006226:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006228:	fa2f f383 	sxtb16	r3, r3
 800622c:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 800622e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006230:	673b      	str	r3, [r7, #112]	; 0x70

#ifndef ARM_MATH_BIG_ENDIAN
        out2 = (int32_t)__PKHTB(in1, in2, 16);
 8006232:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006234:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006236:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006238:	66bb      	str	r3, [r7, #104]	; 0x68
 800623a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800623c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800623e:	eac3 4322 	pkhtb	r3, r3, r2, asr #16
 8006242:	667b      	str	r3, [r7, #100]	; 0x64
 8006244:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006246:	663b      	str	r3, [r7, #96]	; 0x60
        out1 = (int32_t)__PKHBT(in2, in1, 16);
 8006248:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800624a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800624c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800624e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006250:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006252:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006254:	eac3 4302 	pkhbt	r3, r3, r2, lsl #16
 8006258:	657b      	str	r3, [r7, #84]	; 0x54
 800625a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800625c:	653b      	str	r3, [r7, #80]	; 0x50
 800625e:	f107 0308 	add.w	r3, r7, #8
 8006262:	62bb      	str	r3, [r7, #40]	; 0x28
 8006264:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006266:	627b      	str	r3, [r7, #36]	; 0x24
  @param[in]     src_q31   Input value to be written.
  @return        none
 */
__STATIC_FORCEINLINE void arm_nn_write_q15x2_ia(q15_t **dest_q15, q31_t src_q31)
{
    q31_t val = src_q31;
 8006268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800626a:	61fb      	str	r3, [r7, #28]

    memcpy(*dest_q15, &val, 4);
 800626c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	69fa      	ldr	r2, [r7, #28]
 8006272:	601a      	str	r2, [r3, #0]
    *dest_q15 += 2;
 8006274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	1d1a      	adds	r2, r3, #4
 800627a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800627c:	601a      	str	r2, [r3, #0]
}
 800627e:	bf00      	nop
 8006280:	f107 0308 	add.w	r3, r7, #8
 8006284:	633b      	str	r3, [r7, #48]	; 0x30
 8006286:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006288:	62fb      	str	r3, [r7, #44]	; 0x2c
    q31_t val = src_q31;
 800628a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800628c:	61bb      	str	r3, [r7, #24]
    memcpy(*dest_q15, &val, 4);
 800628e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	69ba      	ldr	r2, [r7, #24]
 8006294:	601a      	str	r2, [r3, #0]
    *dest_q15 += 2;
 8006296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	1d1a      	adds	r2, r3, #4
 800629c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800629e:	601a      	str	r2, [r3, #0]
}
 80062a0:	bf00      	nop
#endif
        arm_nn_write_q15x2_ia(&pDst, out1);
        arm_nn_write_q15x2_ia(&pDst, out2);

        /* Decrement the loop counter */
        blkCnt--;
 80062a2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80062a4:	3b01      	subs	r3, #1
 80062a6:	67fb      	str	r3, [r7, #124]	; 0x7c
    while (blkCnt > 0u)
 80062a8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d193      	bne.n	80061d6 <arm_q7_to_q15_no_shift+0x18>
    }

    /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
     ** No loop unrolling is used. */
    blkCnt = blockSize % 0x4u;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f003 0303 	and.w	r3, r3, #3
 80062b4:	67fb      	str	r3, [r7, #124]	; 0x7c
    /* Loop over blockSize number of values */
    blkCnt = blockSize;

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

    while (blkCnt > 0u)
 80062b6:	e00c      	b.n	80062d2 <arm_q7_to_q15_no_shift+0x114>
    {
        /* convert from q7 to q15 and then store the results in the destination buffer */
        *pDst++ = (q15_t)*pIn++;
 80062b8:	6a3b      	ldr	r3, [r7, #32]
 80062ba:	1c5a      	adds	r2, r3, #1
 80062bc:	623a      	str	r2, [r7, #32]
 80062be:	f993 1000 	ldrsb.w	r1, [r3]
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	1c9a      	adds	r2, r3, #2
 80062c6:	60ba      	str	r2, [r7, #8]
 80062c8:	b20a      	sxth	r2, r1
 80062ca:	801a      	strh	r2, [r3, #0]

        /* Decrement the loop counter */
        blkCnt--;
 80062cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80062ce:	3b01      	subs	r3, #1
 80062d0:	67fb      	str	r3, [r7, #124]	; 0x7c
    while (blkCnt > 0u)
 80062d2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d1ef      	bne.n	80062b8 <arm_q7_to_q15_no_shift+0xfa>
    }
}
 80062d8:	bf00      	nop
 80062da:	bf00      	nop
 80062dc:	3784      	adds	r7, #132	; 0x84
 80062de:	46bd      	mov	sp, r7
 80062e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e4:	4770      	bx	lr

080062e6 <arm_q7_to_q15_reordered_no_shift>:
 * The tail (i.e., last (N % 4) elements) will still be in original order.
 *
 */

void arm_q7_to_q15_reordered_no_shift(const q7_t *pSrc, q15_t *pDst, uint32_t blockSize)
{
 80062e6:	b480      	push	{r7}
 80062e8:	b093      	sub	sp, #76	; 0x4c
 80062ea:	af00      	add	r7, sp, #0
 80062ec:	60f8      	str	r0, [r7, #12]
 80062ee:	60b9      	str	r1, [r7, #8]
 80062f0:	607a      	str	r2, [r7, #4]
    const q7_t *pIn = pSrc; /* Src pointer */
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	61bb      	str	r3, [r7, #24]
    q31_t in1, in2;

    /* Run the below code for Cortex-M4 and Cortex-M3 */

    /*loop Unrolling */
    blkCnt = blockSize >> 2u;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	089b      	lsrs	r3, r3, #2
 80062fa:	647b      	str	r3, [r7, #68]	; 0x44

    /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
     ** a second loop below computes the remaining 1 to 3 samples. */
    while (blkCnt > 0u)
 80062fc:	e03e      	b.n	800637c <arm_q7_to_q15_reordered_no_shift+0x96>
 80062fe:	f107 0318 	add.w	r3, r7, #24
 8006302:	61fb      	str	r3, [r7, #28]
    memcpy(&val, *in_q7, 4);
 8006304:	69fb      	ldr	r3, [r7, #28]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	617b      	str	r3, [r7, #20]
    *in_q7 += 4;
 800630c:	69fb      	ldr	r3, [r7, #28]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	1d1a      	adds	r2, r3, #4
 8006312:	69fb      	ldr	r3, [r7, #28]
 8006314:	601a      	str	r2, [r3, #0]
    return (val);
 8006316:	697b      	ldr	r3, [r7, #20]
    {
        /* C = (q15_t) A << 8 */
        /* convert from q7 to q15 and then store the results in the destination buffer */
        in = arm_nn_read_q7x4_ia(&pIn);
 8006318:	643b      	str	r3, [r7, #64]	; 0x40

        /* rotatate in by 8 and extend two q7_t values to q15_t values */
        in1 = __SXTB16(__ROR((uint32_t)in, 8));
 800631a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800631c:	627b      	str	r3, [r7, #36]	; 0x24
 800631e:	2308      	movs	r3, #8
 8006320:	623b      	str	r3, [r7, #32]
  op2 %= 32U;
 8006322:	6a3b      	ldr	r3, [r7, #32]
 8006324:	f003 031f 	and.w	r3, r3, #31
 8006328:	623b      	str	r3, [r7, #32]
  if (op2 == 0U)
 800632a:	6a3b      	ldr	r3, [r7, #32]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d101      	bne.n	8006334 <arm_q7_to_q15_reordered_no_shift+0x4e>
    return op1;
 8006330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006332:	e003      	b.n	800633c <arm_q7_to_q15_reordered_no_shift+0x56>
  return (op1 >> op2) | (op1 << (32U - op2));
 8006334:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006336:	6a3b      	ldr	r3, [r7, #32]
 8006338:	fa62 f303 	ror.w	r3, r2, r3
 800633c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800633e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006340:	fa2f f383 	sxtb16	r3, r3
 8006344:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8006346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006348:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* extend remainig two q7_t values to q15_t values */
        in2 = __SXTB16(in);
 800634a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800634c:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800634e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006350:	fa2f f383 	sxtb16	r3, r3
 8006354:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8006356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006358:	63bb      	str	r3, [r7, #56]	; 0x38

#ifndef ARM_MATH_BIG_ENDIAN
        *__SIMD32(pDst)++ = in2;
 800635a:	f107 0208 	add.w	r2, r7, #8
 800635e:	6813      	ldr	r3, [r2, #0]
 8006360:	1d19      	adds	r1, r3, #4
 8006362:	6011      	str	r1, [r2, #0]
 8006364:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006366:	601a      	str	r2, [r3, #0]
        *__SIMD32(pDst)++ = in1;
 8006368:	f107 0208 	add.w	r2, r7, #8
 800636c:	6813      	ldr	r3, [r2, #0]
 800636e:	1d19      	adds	r1, r3, #4
 8006370:	6011      	str	r1, [r2, #0]
 8006372:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006374:	601a      	str	r2, [r3, #0]
        *__SIMD32(pDst)++ = in1;
        *__SIMD32(pDst)++ = in2;
#endif

        /* Decrement the loop counter */
        blkCnt--;
 8006376:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006378:	3b01      	subs	r3, #1
 800637a:	647b      	str	r3, [r7, #68]	; 0x44
    while (blkCnt > 0u)
 800637c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800637e:	2b00      	cmp	r3, #0
 8006380:	d1bd      	bne.n	80062fe <arm_q7_to_q15_reordered_no_shift+0x18>
    }

    /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
     ** No loop unrolling is used. */
    blkCnt = blockSize % 0x4u;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f003 0303 	and.w	r3, r3, #3
 8006388:	647b      	str	r3, [r7, #68]	; 0x44
    /* Loop over blockSize number of values */
    blkCnt = blockSize;

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

    while (blkCnt > 0u)
 800638a:	e00c      	b.n	80063a6 <arm_q7_to_q15_reordered_no_shift+0xc0>
    {
        /* C = (q15_t) A << 8 */
        /* convert from q7 to q15 and then store the results in the destination buffer */
        *pDst++ = (q15_t)*pIn++;
 800638c:	69bb      	ldr	r3, [r7, #24]
 800638e:	1c5a      	adds	r2, r3, #1
 8006390:	61ba      	str	r2, [r7, #24]
 8006392:	f993 1000 	ldrsb.w	r1, [r3]
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	1c9a      	adds	r2, r3, #2
 800639a:	60ba      	str	r2, [r7, #8]
 800639c:	b20a      	sxth	r2, r1
 800639e:	801a      	strh	r2, [r3, #0]

        /* Decrement the loop counter */
        blkCnt--;
 80063a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063a2:	3b01      	subs	r3, #1
 80063a4:	647b      	str	r3, [r7, #68]	; 0x44
    while (blkCnt > 0u)
 80063a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d1ef      	bne.n	800638c <arm_q7_to_q15_reordered_no_shift+0xa6>
    }
}
 80063ac:	bf00      	nop
 80063ae:	bf00      	nop
 80063b0:	374c      	adds	r7, #76	; 0x4c
 80063b2:	46bd      	mov	sp, r7
 80063b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b8:	4770      	bx	lr

080063ba <arm_softmax_q7>:
 *  with a log(2) scaling factor.
 *
 */

void arm_softmax_q7(const q7_t *vec_in, const uint16_t dim_vec, q7_t *p_out)
{
 80063ba:	b480      	push	{r7}
 80063bc:	b08f      	sub	sp, #60	; 0x3c
 80063be:	af00      	add	r7, sp, #0
 80063c0:	60f8      	str	r0, [r7, #12]
 80063c2:	460b      	mov	r3, r1
 80063c4:	607a      	str	r2, [r7, #4]
 80063c6:	817b      	strh	r3, [r7, #10]
    q31_t sum;
    int16_t i;
    uint8_t shift;
    q15_t base;
    base = -128;
 80063c8:	f64f 7380 	movw	r3, #65408	; 0xff80
 80063cc:	863b      	strh	r3, [r7, #48]	; 0x30

    /* We first search for the maximum */
    for (i = 0; i < dim_vec; i++)
 80063ce:	2300      	movs	r3, #0
 80063d0:	867b      	strh	r3, [r7, #50]	; 0x32
 80063d2:	e017      	b.n	8006404 <arm_softmax_q7+0x4a>
    {
        if (vec_in[i] > base)
 80063d4:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80063d8:	68fa      	ldr	r2, [r7, #12]
 80063da:	4413      	add	r3, r2
 80063dc:	f993 3000 	ldrsb.w	r3, [r3]
 80063e0:	b21b      	sxth	r3, r3
 80063e2:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 80063e6:	429a      	cmp	r2, r3
 80063e8:	da06      	bge.n	80063f8 <arm_softmax_q7+0x3e>
        {
            base = vec_in[i];
 80063ea:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80063ee:	68fa      	ldr	r2, [r7, #12]
 80063f0:	4413      	add	r3, r2
 80063f2:	f993 3000 	ldrsb.w	r3, [r3]
 80063f6:	863b      	strh	r3, [r7, #48]	; 0x30
    for (i = 0; i < dim_vec; i++)
 80063f8:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80063fc:	b29b      	uxth	r3, r3
 80063fe:	3301      	adds	r3, #1
 8006400:	b29b      	uxth	r3, r3
 8006402:	867b      	strh	r3, [r7, #50]	; 0x32
 8006404:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8006408:	897b      	ldrh	r3, [r7, #10]
 800640a:	429a      	cmp	r2, r3
 800640c:	dbe2      	blt.n	80063d4 <arm_softmax_q7+0x1a>
    /*
     * So the base is set to max-8, meaning
     * that we ignore really small values.
     * anyway, they will be 0 after shrinking to q7_t.
     */
    base = base - (1 << 3);
 800640e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006410:	3b08      	subs	r3, #8
 8006412:	b29b      	uxth	r3, r3
 8006414:	863b      	strh	r3, [r7, #48]	; 0x30

    sum = 0;
 8006416:	2300      	movs	r3, #0
 8006418:	637b      	str	r3, [r7, #52]	; 0x34

    for (i = 0; i < dim_vec; i++)
 800641a:	2300      	movs	r3, #0
 800641c:	867b      	strh	r3, [r7, #50]	; 0x32
 800641e:	e01f      	b.n	8006460 <arm_softmax_q7+0xa6>
    {
        shift = (uint8_t)__USAT(vec_in[i] - base, 3);
 8006420:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8006424:	68fa      	ldr	r2, [r7, #12]
 8006426:	4413      	add	r3, r2
 8006428:	f993 3000 	ldrsb.w	r3, [r3]
 800642c:	461a      	mov	r2, r3
 800642e:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8006432:	1ad3      	subs	r3, r2, r3
 8006434:	617b      	str	r3, [r7, #20]
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	f383 0303 	usat	r3, #3, r3
 800643c:	613b      	str	r3, [r7, #16]
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        sum += 0x1 << shift;
 8006444:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006448:	2201      	movs	r2, #1
 800644a:	fa02 f303 	lsl.w	r3, r2, r3
 800644e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006450:	4413      	add	r3, r2
 8006452:	637b      	str	r3, [r7, #52]	; 0x34
    for (i = 0; i < dim_vec; i++)
 8006454:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8006458:	b29b      	uxth	r3, r3
 800645a:	3301      	adds	r3, #1
 800645c:	b29b      	uxth	r3, r3
 800645e:	867b      	strh	r3, [r7, #50]	; 0x32
 8006460:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8006464:	897b      	ldrh	r3, [r7, #10]
 8006466:	429a      	cmp	r2, r3
 8006468:	dbda      	blt.n	8006420 <arm_softmax_q7+0x66>
    }

    /* This is effectively (0x1 << 20) / sum */
    int output_base = (1 << 20) / sum;
 800646a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800646e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006470:	fb92 f3f3 	sdiv	r3, r2, r3
 8006474:	62fb      	str	r3, [r7, #44]	; 0x2c

    for (i = 0; i < dim_vec; i++)
 8006476:	2300      	movs	r3, #0
 8006478:	867b      	strh	r3, [r7, #50]	; 0x32
 800647a:	e028      	b.n	80064ce <arm_softmax_q7+0x114>
    {

        /* Here minimum value of 13+base-vec_in[i] will be 5 */
        shift = (uint8_t)__USAT(13 + base - vec_in[i], 5);
 800647c:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8006480:	330d      	adds	r3, #13
 8006482:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8006486:	68f9      	ldr	r1, [r7, #12]
 8006488:	440a      	add	r2, r1
 800648a:	f992 2000 	ldrsb.w	r2, [r2]
 800648e:	1a9b      	subs	r3, r3, r2
 8006490:	62bb      	str	r3, [r7, #40]	; 0x28
 8006492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006494:	f383 0305 	usat	r3, #5, r3
 8006498:	627b      	str	r3, [r7, #36]	; 0x24
 800649a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        p_out[i] = (q7_t)__SSAT((output_base >> shift), 8);
 80064a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80064a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064a6:	fa42 f303 	asr.w	r3, r2, r3
 80064aa:	61fb      	str	r3, [r7, #28]
 80064ac:	69fb      	ldr	r3, [r7, #28]
 80064ae:	f303 0307 	ssat	r3, #8, r3
 80064b2:	61bb      	str	r3, [r7, #24]
 80064b4:	69b9      	ldr	r1, [r7, #24]
 80064b6:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80064ba:	687a      	ldr	r2, [r7, #4]
 80064bc:	4413      	add	r3, r2
 80064be:	b24a      	sxtb	r2, r1
 80064c0:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < dim_vec; i++)
 80064c2:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80064c6:	b29b      	uxth	r3, r3
 80064c8:	3301      	adds	r3, #1
 80064ca:	b29b      	uxth	r3, r3
 80064cc:	867b      	strh	r3, [r7, #50]	; 0x32
 80064ce:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 80064d2:	897b      	ldrh	r3, [r7, #10]
 80064d4:	429a      	cmp	r2, r3
 80064d6:	dbd1      	blt.n	800647c <arm_softmax_q7+0xc2>
    }
}
 80064d8:	bf00      	nop
 80064da:	bf00      	nop
 80064dc:	373c      	adds	r7, #60	; 0x3c
 80064de:	46bd      	mov	sp, r7
 80064e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e4:	4770      	bx	lr

080064e6 <arm_bitreversal_32>:

void arm_bitreversal_32(
        uint32_t *pSrc,
  const uint16_t bitRevLen,
  const uint16_t *pBitRevTab)
{
 80064e6:	b480      	push	{r7}
 80064e8:	b089      	sub	sp, #36	; 0x24
 80064ea:	af00      	add	r7, sp, #0
 80064ec:	60f8      	str	r0, [r7, #12]
 80064ee:	460b      	mov	r3, r1
 80064f0:	607a      	str	r2, [r7, #4]
 80064f2:	817b      	strh	r3, [r7, #10]
  uint32_t a, b, i, tmp;

  for (i = 0; i < bitRevLen; )
 80064f4:	2300      	movs	r3, #0
 80064f6:	61fb      	str	r3, [r7, #28]
 80064f8:	e043      	b.n	8006582 <arm_bitreversal_32+0x9c>
  {
     a = pBitRevTab[i    ] >> 2;
 80064fa:	69fb      	ldr	r3, [r7, #28]
 80064fc:	005b      	lsls	r3, r3, #1
 80064fe:	687a      	ldr	r2, [r7, #4]
 8006500:	4413      	add	r3, r2
 8006502:	881b      	ldrh	r3, [r3, #0]
 8006504:	089b      	lsrs	r3, r3, #2
 8006506:	b29b      	uxth	r3, r3
 8006508:	61bb      	str	r3, [r7, #24]
     b = pBitRevTab[i + 1] >> 2;
 800650a:	69fb      	ldr	r3, [r7, #28]
 800650c:	3301      	adds	r3, #1
 800650e:	005b      	lsls	r3, r3, #1
 8006510:	687a      	ldr	r2, [r7, #4]
 8006512:	4413      	add	r3, r2
 8006514:	881b      	ldrh	r3, [r3, #0]
 8006516:	089b      	lsrs	r3, r3, #2
 8006518:	b29b      	uxth	r3, r3
 800651a:	617b      	str	r3, [r7, #20]

     //real
     tmp = pSrc[a];
 800651c:	69bb      	ldr	r3, [r7, #24]
 800651e:	009b      	lsls	r3, r3, #2
 8006520:	68fa      	ldr	r2, [r7, #12]
 8006522:	4413      	add	r3, r2
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	613b      	str	r3, [r7, #16]
     pSrc[a] = pSrc[b];
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	009b      	lsls	r3, r3, #2
 800652c:	68fa      	ldr	r2, [r7, #12]
 800652e:	441a      	add	r2, r3
 8006530:	69bb      	ldr	r3, [r7, #24]
 8006532:	009b      	lsls	r3, r3, #2
 8006534:	68f9      	ldr	r1, [r7, #12]
 8006536:	440b      	add	r3, r1
 8006538:	6812      	ldr	r2, [r2, #0]
 800653a:	601a      	str	r2, [r3, #0]
     pSrc[b] = tmp;
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	009b      	lsls	r3, r3, #2
 8006540:	68fa      	ldr	r2, [r7, #12]
 8006542:	4413      	add	r3, r2
 8006544:	693a      	ldr	r2, [r7, #16]
 8006546:	601a      	str	r2, [r3, #0]

     //complex
     tmp = pSrc[a+1];
 8006548:	69bb      	ldr	r3, [r7, #24]
 800654a:	3301      	adds	r3, #1
 800654c:	009b      	lsls	r3, r3, #2
 800654e:	68fa      	ldr	r2, [r7, #12]
 8006550:	4413      	add	r3, r2
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	613b      	str	r3, [r7, #16]
     pSrc[a+1] = pSrc[b+1];
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	3301      	adds	r3, #1
 800655a:	009b      	lsls	r3, r3, #2
 800655c:	68fa      	ldr	r2, [r7, #12]
 800655e:	441a      	add	r2, r3
 8006560:	69bb      	ldr	r3, [r7, #24]
 8006562:	3301      	adds	r3, #1
 8006564:	009b      	lsls	r3, r3, #2
 8006566:	68f9      	ldr	r1, [r7, #12]
 8006568:	440b      	add	r3, r1
 800656a:	6812      	ldr	r2, [r2, #0]
 800656c:	601a      	str	r2, [r3, #0]
     pSrc[b+1] = tmp;
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	3301      	adds	r3, #1
 8006572:	009b      	lsls	r3, r3, #2
 8006574:	68fa      	ldr	r2, [r7, #12]
 8006576:	4413      	add	r3, r2
 8006578:	693a      	ldr	r2, [r7, #16]
 800657a:	601a      	str	r2, [r3, #0]

    i += 2;
 800657c:	69fb      	ldr	r3, [r7, #28]
 800657e:	3302      	adds	r3, #2
 8006580:	61fb      	str	r3, [r7, #28]
  for (i = 0; i < bitRevLen; )
 8006582:	897b      	ldrh	r3, [r7, #10]
 8006584:	69fa      	ldr	r2, [r7, #28]
 8006586:	429a      	cmp	r2, r3
 8006588:	d3b7      	bcc.n	80064fa <arm_bitreversal_32+0x14>
  }
}
 800658a:	bf00      	nop
 800658c:	bf00      	nop
 800658e:	3724      	adds	r7, #36	; 0x24
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr

08006598 <arm_cfft_radix8by2_f32>:
  @endcode

 */

void arm_cfft_radix8by2_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b0a0      	sub	sp, #128	; 0x80
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	6039      	str	r1, [r7, #0]
  uint32_t    L  = S->fftLen;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	881b      	ldrh	r3, [r3, #0]
 80065a6:	66bb      	str	r3, [r7, #104]	; 0x68
  float32_t * pCol1, * pCol2, * pMid1, * pMid2;
  float32_t * p2 = p1 + L;
 80065a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80065aa:	009b      	lsls	r3, r3, #2
 80065ac:	683a      	ldr	r2, [r7, #0]
 80065ae:	4413      	add	r3, r2
 80065b0:	677b      	str	r3, [r7, #116]	; 0x74
  const float32_t * tw = (float32_t *) S->pTwiddle;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	673b      	str	r3, [r7, #112]	; 0x70
  float32_t t1[4], t2[4], t3[4], t4[4], twR, twI;
  float32_t m0, m1, m2, m3;
  uint32_t l;

  pCol1 = p1;
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	667b      	str	r3, [r7, #100]	; 0x64
  pCol2 = p2;
 80065bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80065be:	663b      	str	r3, [r7, #96]	; 0x60

  /* Define new length */
  L >>= 1;
 80065c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80065c2:	085b      	lsrs	r3, r3, #1
 80065c4:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Initialize mid pointers */
  pMid1 = p1 + L;
 80065c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80065c8:	009b      	lsls	r3, r3, #2
 80065ca:	683a      	ldr	r2, [r7, #0]
 80065cc:	4413      	add	r3, r2
 80065ce:	67fb      	str	r3, [r7, #124]	; 0x7c
  pMid2 = p2 + L;
 80065d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80065d2:	009b      	lsls	r3, r3, #2
 80065d4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80065d6:	4413      	add	r3, r2
 80065d8:	67bb      	str	r3, [r7, #120]	; 0x78

  /* do two dot Fourier transform */
  for (l = L >> 2; l > 0; l-- )
 80065da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80065dc:	089b      	lsrs	r3, r3, #2
 80065de:	66fb      	str	r3, [r7, #108]	; 0x6c
 80065e0:	e1b6      	b.n	8006950 <arm_cfft_radix8by2_f32+0x3b8>
  {
    t1[0] = p1[0];
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	63bb      	str	r3, [r7, #56]	; 0x38
    t1[1] = p1[1];
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	63fb      	str	r3, [r7, #60]	; 0x3c
    t1[2] = p1[2];
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	689b      	ldr	r3, [r3, #8]
 80065f2:	643b      	str	r3, [r7, #64]	; 0x40
    t1[3] = p1[3];
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	68db      	ldr	r3, [r3, #12]
 80065f8:	647b      	str	r3, [r7, #68]	; 0x44

    t2[0] = p2[0];
 80065fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	62bb      	str	r3, [r7, #40]	; 0x28
    t2[1] = p2[1];
 8006600:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	62fb      	str	r3, [r7, #44]	; 0x2c
    t2[2] = p2[2];
 8006606:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	633b      	str	r3, [r7, #48]	; 0x30
    t2[3] = p2[3];
 800660c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800660e:	68db      	ldr	r3, [r3, #12]
 8006610:	637b      	str	r3, [r7, #52]	; 0x34

    t3[0] = pMid1[0];
 8006612:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	61bb      	str	r3, [r7, #24]
    t3[1] = pMid1[1];
 8006618:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	61fb      	str	r3, [r7, #28]
    t3[2] = pMid1[2];
 800661e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	623b      	str	r3, [r7, #32]
    t3[3] = pMid1[3];
 8006624:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006626:	68db      	ldr	r3, [r3, #12]
 8006628:	627b      	str	r3, [r7, #36]	; 0x24

    t4[0] = pMid2[0];
 800662a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	60bb      	str	r3, [r7, #8]
    t4[1] = pMid2[1];
 8006630:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	60fb      	str	r3, [r7, #12]
    t4[2] = pMid2[2];
 8006636:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006638:	689b      	ldr	r3, [r3, #8]
 800663a:	613b      	str	r3, [r7, #16]
    t4[3] = pMid2[3];
 800663c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800663e:	68db      	ldr	r3, [r3, #12]
 8006640:	617b      	str	r3, [r7, #20]

    *p1++ = t1[0] + t2[0];
 8006642:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8006646:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	1d1a      	adds	r2, r3, #4
 800664e:	603a      	str	r2, [r7, #0]
 8006650:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006654:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[1] + t2[1];
 8006658:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800665c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	1d1a      	adds	r2, r3, #4
 8006664:	603a      	str	r2, [r7, #0]
 8006666:	ee77 7a27 	vadd.f32	s15, s14, s15
 800666a:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[2] + t2[2];
 800666e:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8006672:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	1d1a      	adds	r2, r3, #4
 800667a:	603a      	str	r2, [r7, #0]
 800667c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006680:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[3] + t2[3];    /* col 1 */
 8006684:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8006688:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	1d1a      	adds	r2, r3, #4
 8006690:	603a      	str	r2, [r7, #0]
 8006692:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006696:	edc3 7a00 	vstr	s15, [r3]

    t2[0] = t1[0] - t2[0];
 800669a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800669e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80066a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80066a6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    t2[1] = t1[1] - t2[1];
 80066aa:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80066ae:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80066b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80066b6:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[2] = t1[2] - t2[2];
 80066ba:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80066be:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80066c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80066c6:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    t2[3] = t1[3] - t2[3];    /* for col 2 */
 80066ca:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80066ce:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80066d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80066d6:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

    *pMid1++ = t3[0] + t4[0];
 80066da:	ed97 7a06 	vldr	s14, [r7, #24]
 80066de:	edd7 7a02 	vldr	s15, [r7, #8]
 80066e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80066e4:	1d1a      	adds	r2, r3, #4
 80066e6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80066e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80066ec:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[1] + t4[1];
 80066f0:	ed97 7a07 	vldr	s14, [r7, #28]
 80066f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80066f8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80066fa:	1d1a      	adds	r2, r3, #4
 80066fc:	67fa      	str	r2, [r7, #124]	; 0x7c
 80066fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006702:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[2] + t4[2];
 8006706:	ed97 7a08 	vldr	s14, [r7, #32]
 800670a:	edd7 7a04 	vldr	s15, [r7, #16]
 800670e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006710:	1d1a      	adds	r2, r3, #4
 8006712:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006714:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006718:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[3] + t4[3]; /* col 1 */
 800671c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8006720:	edd7 7a05 	vldr	s15, [r7, #20]
 8006724:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006726:	1d1a      	adds	r2, r3, #4
 8006728:	67fa      	str	r2, [r7, #124]	; 0x7c
 800672a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800672e:	edc3 7a00 	vstr	s15, [r3]

    t4[0] = t4[0] - t3[0];
 8006732:	ed97 7a02 	vldr	s14, [r7, #8]
 8006736:	edd7 7a06 	vldr	s15, [r7, #24]
 800673a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800673e:	edc7 7a02 	vstr	s15, [r7, #8]
    t4[1] = t4[1] - t3[1];
 8006742:	ed97 7a03 	vldr	s14, [r7, #12]
 8006746:	edd7 7a07 	vldr	s15, [r7, #28]
 800674a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800674e:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[2] = t4[2] - t3[2];
 8006752:	ed97 7a04 	vldr	s14, [r7, #16]
 8006756:	edd7 7a08 	vldr	s15, [r7, #32]
 800675a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800675e:	edc7 7a04 	vstr	s15, [r7, #16]
    t4[3] = t4[3] - t3[3];    /* for col 2 */
 8006762:	ed97 7a05 	vldr	s14, [r7, #20]
 8006766:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800676a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800676e:	edc7 7a05 	vstr	s15, [r7, #20]

    twR = *tw++;
 8006772:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006774:	1d1a      	adds	r2, r3, #4
 8006776:	673a      	str	r2, [r7, #112]	; 0x70
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	65fb      	str	r3, [r7, #92]	; 0x5c
    twI = *tw++;
 800677c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800677e:	1d1a      	adds	r2, r3, #4
 8006780:	673a      	str	r2, [r7, #112]	; 0x70
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	65bb      	str	r3, [r7, #88]	; 0x58

    /* multiply by twiddle factors */
    m0 = t2[0] * twR;
 8006786:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800678a:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800678e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006792:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t2[1] * twI;
 8006796:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800679a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800679e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067a2:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t2[1] * twR;
 80067a6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80067aa:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80067ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067b2:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t2[0] * twI;
 80067b6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80067ba:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80067be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067c2:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    /* R  =  R  *  Tr - I * Ti */
    *p2++ = m0 + m1;
 80067c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067c8:	1d1a      	adds	r2, r3, #4
 80067ca:	677a      	str	r2, [r7, #116]	; 0x74
 80067cc:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80067d0:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80067d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80067d8:	edc3 7a00 	vstr	s15, [r3]
    /* I  =  I  *  Tr + R * Ti */
    *p2++ = m2 - m3;
 80067dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067de:	1d1a      	adds	r2, r3, #4
 80067e0:	677a      	str	r2, [r7, #116]	; 0x74
 80067e2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80067e6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80067ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80067ee:	edc3 7a00 	vstr	s15, [r3]

    /* use vertical symmetry */
    /*  0.9988 - 0.0491i <==> -0.0491 - 0.9988i */
    m0 = t4[0] * twI;
 80067f2:	edd7 7a02 	vldr	s15, [r7, #8]
 80067f6:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80067fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067fe:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t4[1] * twR;
 8006802:	edd7 7a03 	vldr	s15, [r7, #12]
 8006806:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800680a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800680e:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t4[1] * twI;
 8006812:	edd7 7a03 	vldr	s15, [r7, #12]
 8006816:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800681a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800681e:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t4[0] * twR;
 8006822:	edd7 7a02 	vldr	s15, [r7, #8]
 8006826:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800682a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800682e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *pMid2++ = m0 - m1;
 8006832:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006834:	1d1a      	adds	r2, r3, #4
 8006836:	67ba      	str	r2, [r7, #120]	; 0x78
 8006838:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800683c:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8006840:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006844:	edc3 7a00 	vstr	s15, [r3]
    *pMid2++ = m2 + m3;
 8006848:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800684a:	1d1a      	adds	r2, r3, #4
 800684c:	67ba      	str	r2, [r7, #120]	; 0x78
 800684e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8006852:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8006856:	ee77 7a27 	vadd.f32	s15, s14, s15
 800685a:	edc3 7a00 	vstr	s15, [r3]

    twR = *tw++;
 800685e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006860:	1d1a      	adds	r2, r3, #4
 8006862:	673a      	str	r2, [r7, #112]	; 0x70
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	65fb      	str	r3, [r7, #92]	; 0x5c
    twI = *tw++;
 8006868:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800686a:	1d1a      	adds	r2, r3, #4
 800686c:	673a      	str	r2, [r7, #112]	; 0x70
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	65bb      	str	r3, [r7, #88]	; 0x58

    m0 = t2[2] * twR;
 8006872:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8006876:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800687a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800687e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t2[3] * twI;
 8006882:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8006886:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800688a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800688e:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t2[3] * twR;
 8006892:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8006896:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800689a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800689e:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t2[2] * twI;
 80068a2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80068a6:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80068aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068ae:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *p2++ = m0 + m1;
 80068b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068b4:	1d1a      	adds	r2, r3, #4
 80068b6:	677a      	str	r2, [r7, #116]	; 0x74
 80068b8:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80068bc:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80068c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80068c4:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 80068c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068ca:	1d1a      	adds	r2, r3, #4
 80068cc:	677a      	str	r2, [r7, #116]	; 0x74
 80068ce:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80068d2:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80068d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80068da:	edc3 7a00 	vstr	s15, [r3]

    m0 = t4[2] * twI;
 80068de:	edd7 7a04 	vldr	s15, [r7, #16]
 80068e2:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80068e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068ea:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t4[3] * twR;
 80068ee:	edd7 7a05 	vldr	s15, [r7, #20]
 80068f2:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80068f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068fa:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t4[3] * twI;
 80068fe:	edd7 7a05 	vldr	s15, [r7, #20]
 8006902:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8006906:	ee67 7a27 	vmul.f32	s15, s14, s15
 800690a:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t4[2] * twR;
 800690e:	edd7 7a04 	vldr	s15, [r7, #16]
 8006912:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8006916:	ee67 7a27 	vmul.f32	s15, s14, s15
 800691a:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *pMid2++ = m0 - m1;
 800691e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006920:	1d1a      	adds	r2, r3, #4
 8006922:	67ba      	str	r2, [r7, #120]	; 0x78
 8006924:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8006928:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800692c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006930:	edc3 7a00 	vstr	s15, [r3]
    *pMid2++ = m2 + m3;
 8006934:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006936:	1d1a      	adds	r2, r3, #4
 8006938:	67ba      	str	r2, [r7, #120]	; 0x78
 800693a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800693e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8006942:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006946:	edc3 7a00 	vstr	s15, [r3]
  for (l = L >> 2; l > 0; l-- )
 800694a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800694c:	3b01      	subs	r3, #1
 800694e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006950:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006952:	2b00      	cmp	r3, #0
 8006954:	f47f ae45 	bne.w	80065e2 <arm_cfft_radix8by2_f32+0x4a>
  }

  /* first col */
  arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 2U);
 8006958:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800695a:	b299      	uxth	r1, r3
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	685a      	ldr	r2, [r3, #4]
 8006960:	2302      	movs	r3, #2
 8006962:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8006964:	f000 ffc4 	bl	80078f0 <arm_radix8_butterfly_f32>

  /* second col */
  arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 2U);
 8006968:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800696a:	b299      	uxth	r1, r3
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	685a      	ldr	r2, [r3, #4]
 8006970:	2302      	movs	r3, #2
 8006972:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8006974:	f000 ffbc 	bl	80078f0 <arm_radix8_butterfly_f32>
}
 8006978:	bf00      	nop
 800697a:	3780      	adds	r7, #128	; 0x80
 800697c:	46bd      	mov	sp, r7
 800697e:	bd80      	pop	{r7, pc}

08006980 <arm_cfft_radix8by4_f32>:

void arm_cfft_radix8by4_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b0ac      	sub	sp, #176	; 0xb0
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
 8006988:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen >> 1;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	881b      	ldrh	r3, [r3, #0]
 800698e:	085b      	lsrs	r3, r3, #1
 8006990:	b29b      	uxth	r3, r3
 8006992:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    float32_t * pCol1, *pCol2, *pCol3, *pCol4, *pEnd1, *pEnd2, *pEnd3, *pEnd4;
    const float32_t *tw2, *tw3, *tw4;
    float32_t * p2 = p1 + L;
 8006996:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800699a:	009b      	lsls	r3, r3, #2
 800699c:	683a      	ldr	r2, [r7, #0]
 800699e:	4413      	add	r3, r2
 80069a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    float32_t * p3 = p2 + L;
 80069a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80069a8:	009b      	lsls	r3, r3, #2
 80069aa:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80069ae:	4413      	add	r3, r2
 80069b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    float32_t * p4 = p3 + L;
 80069b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80069b8:	009b      	lsls	r3, r3, #2
 80069ba:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80069be:	4413      	add	r3, r2
 80069c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    float32_t t2[4], t3[4], t4[4], twR, twI;
    float32_t p1ap3_0, p1sp3_0, p1ap3_1, p1sp3_1;
    float32_t m0, m1, m2, m3;
    uint32_t l, twMod2, twMod3, twMod4;

    pCol1 = p1;         /* points to real values by default */
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	67fb      	str	r3, [r7, #124]	; 0x7c
    pCol2 = p2;
 80069c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80069cc:	67bb      	str	r3, [r7, #120]	; 0x78
    pCol3 = p3;
 80069ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80069d2:	677b      	str	r3, [r7, #116]	; 0x74
    pCol4 = p4;
 80069d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80069d8:	673b      	str	r3, [r7, #112]	; 0x70
    pEnd1 = p2 - 1;     /* points to imaginary values by default */
 80069da:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80069de:	3b04      	subs	r3, #4
 80069e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    pEnd2 = p3 - 1;
 80069e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80069e8:	3b04      	subs	r3, #4
 80069ea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    pEnd3 = p4 - 1;
 80069ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80069f2:	3b04      	subs	r3, #4
 80069f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    pEnd4 = pEnd3 + L;
 80069f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80069fc:	009b      	lsls	r3, r3, #2
 80069fe:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8006a02:	4413      	add	r3, r2
 8006a04:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006a10:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006a14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006a18:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006a1c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    L >>= 1;
 8006a20:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006a24:	085b      	lsrs	r3, r3, #1
 8006a26:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    /* do four dot Fourier transform */

    twMod2 = 2;
 8006a2a:	2302      	movs	r3, #2
 8006a2c:	66fb      	str	r3, [r7, #108]	; 0x6c
    twMod3 = 4;
 8006a2e:	2304      	movs	r3, #4
 8006a30:	66bb      	str	r3, [r7, #104]	; 0x68
    twMod4 = 6;
 8006a32:	2306      	movs	r3, #6
 8006a34:	667b      	str	r3, [r7, #100]	; 0x64

    /* TOP */
    p1ap3_0 = p1[0] + p3[0];
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	ed93 7a00 	vldr	s14, [r3]
 8006a3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a40:	edd3 7a00 	vldr	s15, [r3]
 8006a44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006a48:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	ed93 7a00 	vldr	s14, [r3]
 8006a52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a56:	edd3 7a00 	vldr	s15, [r3]
 8006a5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006a5e:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	3304      	adds	r3, #4
 8006a66:	ed93 7a00 	vldr	s14, [r3]
 8006a6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a6e:	3304      	adds	r3, #4
 8006a70:	edd3 7a00 	vldr	s15, [r3]
 8006a74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006a78:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	3304      	adds	r3, #4
 8006a80:	ed93 7a00 	vldr	s14, [r3]
 8006a84:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a88:	3304      	adds	r3, #4
 8006a8a:	edd3 7a00 	vldr	s15, [r3]
 8006a8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006a92:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8006a96:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006a9a:	3304      	adds	r3, #4
 8006a9c:	ed93 7a00 	vldr	s14, [r3]
 8006aa0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8006aa4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006aa8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006aac:	3304      	adds	r3, #4
 8006aae:	edd3 7a00 	vldr	s15, [r3]
 8006ab2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006ab6:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8006aba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006abe:	edd3 7a00 	vldr	s15, [r3]
 8006ac2:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8006ac6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006aca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006ace:	edd3 7a00 	vldr	s15, [r3]
 8006ad2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006ad6:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    /* col 3 */
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8006ada:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006ade:	edd3 7a00 	vldr	s15, [r3]
 8006ae2:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8006ae6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006aea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006aee:	edd3 7a00 	vldr	s15, [r3]
 8006af2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006af6:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8006afa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006afe:	3304      	adds	r3, #4
 8006b00:	edd3 7a00 	vldr	s15, [r3]
 8006b04:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8006b08:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006b0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006b10:	3304      	adds	r3, #4
 8006b12:	edd3 7a00 	vldr	s15, [r3]
 8006b16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006b1a:	edc7 7a08 	vstr	s15, [r7, #32]
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8006b1e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006b22:	3304      	adds	r3, #4
 8006b24:	edd3 7a00 	vldr	s15, [r3]
 8006b28:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8006b2c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006b30:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006b34:	3304      	adds	r3, #4
 8006b36:	edd3 7a00 	vldr	s15, [r3]
 8006b3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006b3e:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8006b42:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006b46:	ed93 7a00 	vldr	s14, [r3]
 8006b4a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8006b4e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006b52:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006b56:	edd3 7a00 	vldr	s15, [r3]
 8006b5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006b5e:	edc7 7a04 	vstr	s15, [r7, #16]
    /* col 1 */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8006b62:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006b66:	ed93 7a00 	vldr	s14, [r3]
 8006b6a:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8006b6e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006b72:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006b76:	edd3 7a00 	vldr	s15, [r3]
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	1d1a      	adds	r2, r3, #4
 8006b7e:	603a      	str	r2, [r7, #0]
 8006b80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006b84:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8006b88:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006b8c:	3304      	adds	r3, #4
 8006b8e:	ed93 7a00 	vldr	s14, [r3]
 8006b92:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8006b96:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006b9a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006b9e:	3304      	adds	r3, #4
 8006ba0:	edd3 7a00 	vldr	s15, [r3]
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	1d1a      	adds	r2, r3, #4
 8006ba8:	603a      	str	r2, [r7, #0]
 8006baa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006bae:	edc3 7a00 	vstr	s15, [r3]

    /* Twiddle factors are ones */
    *p2++ = t2[0];
 8006bb2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006bb6:	1d1a      	adds	r2, r3, #4
 8006bb8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8006bbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006bbe:	601a      	str	r2, [r3, #0]
    *p2++ = t2[1];
 8006bc0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006bc4:	1d1a      	adds	r2, r3, #4
 8006bc6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8006bca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bcc:	601a      	str	r2, [r3, #0]
    *p3++ = t3[0];
 8006bce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006bd2:	1d1a      	adds	r2, r3, #4
 8006bd4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006bd8:	69fa      	ldr	r2, [r7, #28]
 8006bda:	601a      	str	r2, [r3, #0]
    *p3++ = t3[1];
 8006bdc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006be0:	1d1a      	adds	r2, r3, #4
 8006be2:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006be6:	6a3a      	ldr	r2, [r7, #32]
 8006be8:	601a      	str	r2, [r3, #0]
    *p4++ = t4[0];
 8006bea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006bee:	1d1a      	adds	r2, r3, #4
 8006bf0:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8006bf4:	68fa      	ldr	r2, [r7, #12]
 8006bf6:	601a      	str	r2, [r3, #0]
    *p4++ = t4[1];
 8006bf8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006bfc:	1d1a      	adds	r2, r3, #4
 8006bfe:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8006c02:	693a      	ldr	r2, [r7, #16]
 8006c04:	601a      	str	r2, [r3, #0]

    tw2 += twMod2;
 8006c06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c08:	009b      	lsls	r3, r3, #2
 8006c0a:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8006c0e:	4413      	add	r3, r2
 8006c10:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    tw3 += twMod3;
 8006c14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006c16:	009b      	lsls	r3, r3, #2
 8006c18:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8006c1c:	4413      	add	r3, r2
 8006c1e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    tw4 += twMod4;
 8006c22:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c24:	009b      	lsls	r3, r3, #2
 8006c26:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006c2a:	4413      	add	r3, r2
 8006c2c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    for (l = (L - 2) >> 1; l > 0; l-- )
 8006c30:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006c34:	3b02      	subs	r3, #2
 8006c36:	085b      	lsrs	r3, r3, #1
 8006c38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006c3c:	e31a      	b.n	8007274 <arm_cfft_radix8by4_f32+0x8f4>
    {
      /* TOP */
      p1ap3_0 = p1[0] + p3[0];
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	ed93 7a00 	vldr	s14, [r3]
 8006c44:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006c48:	edd3 7a00 	vldr	s15, [r3]
 8006c4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006c50:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
      p1sp3_0 = p1[0] - p3[0];
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	ed93 7a00 	vldr	s14, [r3]
 8006c5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006c5e:	edd3 7a00 	vldr	s15, [r3]
 8006c62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006c66:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
      p1ap3_1 = p1[1] + p3[1];
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	3304      	adds	r3, #4
 8006c6e:	ed93 7a00 	vldr	s14, [r3]
 8006c72:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006c76:	3304      	adds	r3, #4
 8006c78:	edd3 7a00 	vldr	s15, [r3]
 8006c7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006c80:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
      p1sp3_1 = p1[1] - p3[1];
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	3304      	adds	r3, #4
 8006c88:	ed93 7a00 	vldr	s14, [r3]
 8006c8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006c90:	3304      	adds	r3, #4
 8006c92:	edd3 7a00 	vldr	s15, [r3]
 8006c96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006c9a:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
      /* col 2 */
      t2[0] = p1sp3_0 + p2[1] - p4[1];
 8006c9e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006ca2:	3304      	adds	r3, #4
 8006ca4:	ed93 7a00 	vldr	s14, [r3]
 8006ca8:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8006cac:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006cb0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006cb4:	3304      	adds	r3, #4
 8006cb6:	edd3 7a00 	vldr	s15, [r3]
 8006cba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006cbe:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
      t2[1] = p1sp3_1 - p2[0] + p4[0];
 8006cc2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006cc6:	edd3 7a00 	vldr	s15, [r3]
 8006cca:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8006cce:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006cd2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006cd6:	edd3 7a00 	vldr	s15, [r3]
 8006cda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006cde:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
      /* col 3 */
      t3[0] = p1ap3_0 - p2[0] - p4[0];
 8006ce2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006ce6:	edd3 7a00 	vldr	s15, [r3]
 8006cea:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8006cee:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006cf2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006cf6:	edd3 7a00 	vldr	s15, [r3]
 8006cfa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006cfe:	edc7 7a07 	vstr	s15, [r7, #28]
      t3[1] = p1ap3_1 - p2[1] - p4[1];
 8006d02:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006d06:	3304      	adds	r3, #4
 8006d08:	edd3 7a00 	vldr	s15, [r3]
 8006d0c:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8006d10:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006d14:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006d18:	3304      	adds	r3, #4
 8006d1a:	edd3 7a00 	vldr	s15, [r3]
 8006d1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006d22:	edc7 7a08 	vstr	s15, [r7, #32]
      /* col 4 */
      t4[0] = p1sp3_0 - p2[1] + p4[1];
 8006d26:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006d2a:	3304      	adds	r3, #4
 8006d2c:	edd3 7a00 	vldr	s15, [r3]
 8006d30:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8006d34:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006d38:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006d3c:	3304      	adds	r3, #4
 8006d3e:	edd3 7a00 	vldr	s15, [r3]
 8006d42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006d46:	edc7 7a03 	vstr	s15, [r7, #12]
      t4[1] = p1sp3_1 + p2[0] - p4[0];
 8006d4a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006d4e:	ed93 7a00 	vldr	s14, [r3]
 8006d52:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8006d56:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006d5a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006d5e:	edd3 7a00 	vldr	s15, [r3]
 8006d62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006d66:	edc7 7a04 	vstr	s15, [r7, #16]
      /* col 1 - top */
      *p1++ = p1ap3_0 + p2[0] + p4[0];
 8006d6a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006d6e:	ed93 7a00 	vldr	s14, [r3]
 8006d72:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8006d76:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006d7a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006d7e:	edd3 7a00 	vldr	s15, [r3]
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	1d1a      	adds	r2, r3, #4
 8006d86:	603a      	str	r2, [r7, #0]
 8006d88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006d8c:	edc3 7a00 	vstr	s15, [r3]
      *p1++ = p1ap3_1 + p2[1] + p4[1];
 8006d90:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006d94:	3304      	adds	r3, #4
 8006d96:	ed93 7a00 	vldr	s14, [r3]
 8006d9a:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8006d9e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006da2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006da6:	3304      	adds	r3, #4
 8006da8:	edd3 7a00 	vldr	s15, [r3]
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	1d1a      	adds	r2, r3, #4
 8006db0:	603a      	str	r2, [r7, #0]
 8006db2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006db6:	edc3 7a00 	vstr	s15, [r3]

      /* BOTTOM */
      p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 8006dba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006dbe:	3b04      	subs	r3, #4
 8006dc0:	ed93 7a00 	vldr	s14, [r3]
 8006dc4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006dc8:	3b04      	subs	r3, #4
 8006dca:	edd3 7a00 	vldr	s15, [r3]
 8006dce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006dd2:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
      p1sp3_1 = pEnd1[-1] - pEnd3[-1];
 8006dd6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006dda:	3b04      	subs	r3, #4
 8006ddc:	ed93 7a00 	vldr	s14, [r3]
 8006de0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006de4:	3b04      	subs	r3, #4
 8006de6:	edd3 7a00 	vldr	s15, [r3]
 8006dea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006dee:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
      p1ap3_0 = pEnd1[ 0] + pEnd3[0];
 8006df2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006df6:	ed93 7a00 	vldr	s14, [r3]
 8006dfa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006dfe:	edd3 7a00 	vldr	s15, [r3]
 8006e02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006e06:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
      p1sp3_0 = pEnd1[ 0] - pEnd3[0];
 8006e0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006e0e:	ed93 7a00 	vldr	s14, [r3]
 8006e12:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006e16:	edd3 7a00 	vldr	s15, [r3]
 8006e1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006e1e:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
      /* col 2 */
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
 8006e22:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006e26:	ed93 7a00 	vldr	s14, [r3]
 8006e2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006e2e:	edd3 7a00 	vldr	s15, [r3]
 8006e32:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006e36:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8006e3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006e3e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 8006e42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006e46:	ed93 7a00 	vldr	s14, [r3]
 8006e4a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006e4e:	edd3 7a00 	vldr	s15, [r3]
 8006e52:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006e56:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006e5a:	3b04      	subs	r3, #4
 8006e5c:	edd3 7a00 	vldr	s15, [r3]
 8006e60:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006e64:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006e68:	3b04      	subs	r3, #4
 8006e6a:	edd3 7a00 	vldr	s15, [r3]
 8006e6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006e72:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
      /* col 3 */
      t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 8006e76:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006e7a:	3b04      	subs	r3, #4
 8006e7c:	edd3 7a00 	vldr	s15, [r3]
 8006e80:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8006e84:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006e88:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006e8c:	3b04      	subs	r3, #4
 8006e8e:	edd3 7a00 	vldr	s15, [r3]
 8006e92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006e96:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t3[3] = p1ap3_0 - pEnd2[ 0] - pEnd4[ 0];
 8006e9a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006e9e:	edd3 7a00 	vldr	s15, [r3]
 8006ea2:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8006ea6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006eaa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006eae:	edd3 7a00 	vldr	s15, [r3]
 8006eb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006eb6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
      /* col 4 */
      t4[2] = pEnd2[ 0] - pEnd4[ 0] - p1sp3_1;
 8006eba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006ebe:	ed93 7a00 	vldr	s14, [r3]
 8006ec2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006ec6:	edd3 7a00 	vldr	s15, [r3]
 8006eca:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006ece:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8006ed2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006ed6:	edc7 7a05 	vstr	s15, [r7, #20]
      t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 8006eda:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006ede:	3b04      	subs	r3, #4
 8006ee0:	ed93 7a00 	vldr	s14, [r3]
 8006ee4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006ee8:	3b04      	subs	r3, #4
 8006eea:	edd3 7a00 	vldr	s15, [r3]
 8006eee:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006ef2:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8006ef6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006efa:	edc7 7a06 	vstr	s15, [r7, #24]
      /* col 1 - Bottom */
      *pEnd1-- = p1ap3_0 + pEnd2[ 0] + pEnd4[ 0];
 8006efe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006f02:	ed93 7a00 	vldr	s14, [r3]
 8006f06:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8006f0a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006f0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006f12:	edd3 7a00 	vldr	s15, [r3]
 8006f16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f1a:	1f1a      	subs	r2, r3, #4
 8006f1c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006f20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006f24:	edc3 7a00 	vstr	s15, [r3]
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 8006f28:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006f2c:	3b04      	subs	r3, #4
 8006f2e:	ed93 7a00 	vldr	s14, [r3]
 8006f32:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8006f36:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006f3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006f3e:	3b04      	subs	r3, #4
 8006f40:	edd3 7a00 	vldr	s15, [r3]
 8006f44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f48:	1f1a      	subs	r2, r3, #4
 8006f4a:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006f4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006f52:	edc3 7a00 	vstr	s15, [r3]

      /* COL 2 */
      /* read twiddle factors */
      twR = *tw2++;
 8006f56:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006f5a:	1d1a      	adds	r2, r3, #4
 8006f5c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	653b      	str	r3, [r7, #80]	; 0x50
      twI = *tw2++;
 8006f64:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006f68:	1d1a      	adds	r2, r3, #4
 8006f6a:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	64fb      	str	r3, [r7, #76]	; 0x4c
      /* multiply by twiddle factors */
      /*  let    Z1 = a + i(b),   Z2 = c + i(d) */
      /*   =>  Z1 * Z2  =  (a*c - b*d) + i(b*c + a*d) */

      /* Top */
      m0 = t2[0] * twR;
 8006f72:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8006f76:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8006f7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f7e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t2[1] * twI;
 8006f82:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8006f86:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8006f8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f8e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t2[1] * twR;
 8006f92:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8006f96:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8006f9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f9e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t2[0] * twI;
 8006fa2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8006fa6:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8006faa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fae:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p2++ = m0 + m1;
 8006fb2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006fb6:	1d1a      	adds	r2, r3, #4
 8006fb8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8006fbc:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8006fc0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8006fc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006fc8:	edc3 7a00 	vstr	s15, [r3]
      *p2++ = m2 - m3;
 8006fcc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006fd0:	1d1a      	adds	r2, r3, #4
 8006fd2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8006fd6:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8006fda:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8006fde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006fe2:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 2 */
      /* 0.9997 - 0.0245i  <==>  0.0245 - 0.9997i */
      /* Bottom */
      m0 = t2[3] * twI;
 8006fe6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8006fea:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8006fee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ff2:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t2[2] * twR;
 8006ff6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8006ffa:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8006ffe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007002:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t2[2] * twI;
 8007006:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800700a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800700e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007012:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t2[3] * twR;
 8007016:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800701a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800701e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007022:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd2-- = m0 - m1;
 8007026:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800702a:	1f1a      	subs	r2, r3, #4
 800702c:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007030:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8007034:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8007038:	ee77 7a67 	vsub.f32	s15, s14, s15
 800703c:	edc3 7a00 	vstr	s15, [r3]
      *pEnd2-- = m2 + m3;
 8007040:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007044:	1f1a      	subs	r2, r3, #4
 8007046:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800704a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800704e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8007052:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007056:	edc3 7a00 	vstr	s15, [r3]

      /* COL 3 */
      twR = tw3[0];
 800705a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	653b      	str	r3, [r7, #80]	; 0x50
      twI = tw3[1];
 8007062:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	64fb      	str	r3, [r7, #76]	; 0x4c
      tw3 += twMod3;
 800706a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800706c:	009b      	lsls	r3, r3, #2
 800706e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8007072:	4413      	add	r3, r2
 8007074:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
      /* Top */
      m0 = t3[0] * twR;
 8007078:	edd7 7a07 	vldr	s15, [r7, #28]
 800707c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8007080:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007084:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t3[1] * twI;
 8007088:	edd7 7a08 	vldr	s15, [r7, #32]
 800708c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8007090:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007094:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t3[1] * twR;
 8007098:	edd7 7a08 	vldr	s15, [r7, #32]
 800709c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80070a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070a4:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t3[0] * twI;
 80070a8:	edd7 7a07 	vldr	s15, [r7, #28]
 80070ac:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80070b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070b4:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p3++ = m0 + m1;
 80070b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80070bc:	1d1a      	adds	r2, r3, #4
 80070be:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80070c2:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80070c6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80070ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80070ce:	edc3 7a00 	vstr	s15, [r3]
      *p3++ = m2 - m3;
 80070d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80070d6:	1d1a      	adds	r2, r3, #4
 80070d8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80070dc:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80070e0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80070e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80070e8:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 3 */
      /* 0.9988 - 0.0491i  <==>  -0.9988 - 0.0491i */
      /* Bottom */
      m0 = -t3[3] * twR;
 80070ec:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80070f0:	eef1 7a67 	vneg.f32	s15, s15
 80070f4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80070f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070fc:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 =  t3[2] * twI;
 8007100:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8007104:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8007108:	ee67 7a27 	vmul.f32	s15, s14, s15
 800710c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 =  t3[2] * twR;
 8007110:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8007114:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8007118:	ee67 7a27 	vmul.f32	s15, s14, s15
 800711c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 =  t3[3] * twI;
 8007120:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8007124:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8007128:	ee67 7a27 	vmul.f32	s15, s14, s15
 800712c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd3-- = m0 - m1;
 8007130:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007134:	1f1a      	subs	r2, r3, #4
 8007136:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800713a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800713e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8007142:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007146:	edc3 7a00 	vstr	s15, [r3]
      *pEnd3-- = m3 - m2;
 800714a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800714e:	1f1a      	subs	r2, r3, #4
 8007150:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007154:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8007158:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800715c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007160:	edc3 7a00 	vstr	s15, [r3]

      /* COL 4 */
      twR = tw4[0];
 8007164:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	653b      	str	r3, [r7, #80]	; 0x50
      twI = tw4[1];
 800716c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	64fb      	str	r3, [r7, #76]	; 0x4c
      tw4 += twMod4;
 8007174:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007176:	009b      	lsls	r3, r3, #2
 8007178:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800717c:	4413      	add	r3, r2
 800717e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      /* Top */
      m0 = t4[0] * twR;
 8007182:	edd7 7a03 	vldr	s15, [r7, #12]
 8007186:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800718a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800718e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t4[1] * twI;
 8007192:	edd7 7a04 	vldr	s15, [r7, #16]
 8007196:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800719a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800719e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t4[1] * twR;
 80071a2:	edd7 7a04 	vldr	s15, [r7, #16]
 80071a6:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80071aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071ae:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t4[0] * twI;
 80071b2:	edd7 7a03 	vldr	s15, [r7, #12]
 80071b6:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80071ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071be:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p4++ = m0 + m1;
 80071c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80071c6:	1d1a      	adds	r2, r3, #4
 80071c8:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80071cc:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80071d0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80071d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80071d8:	edc3 7a00 	vstr	s15, [r3]
      *p4++ = m2 - m3;
 80071dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80071e0:	1d1a      	adds	r2, r3, #4
 80071e2:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80071e6:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80071ea:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80071ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80071f2:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 4 */
      /* 0.9973 - 0.0736i  <==>  -0.0736 + 0.9973i */
      /* Bottom */
      m0 = t4[3] * twI;
 80071f6:	edd7 7a06 	vldr	s15, [r7, #24]
 80071fa:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80071fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007202:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t4[2] * twR;
 8007206:	edd7 7a05 	vldr	s15, [r7, #20]
 800720a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800720e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007212:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t4[2] * twI;
 8007216:	edd7 7a05 	vldr	s15, [r7, #20]
 800721a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800721e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007222:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t4[3] * twR;
 8007226:	edd7 7a06 	vldr	s15, [r7, #24]
 800722a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800722e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007232:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd4-- = m0 - m1;
 8007236:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800723a:	1f1a      	subs	r2, r3, #4
 800723c:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8007240:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8007244:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8007248:	ee77 7a67 	vsub.f32	s15, s14, s15
 800724c:	edc3 7a00 	vstr	s15, [r3]
      *pEnd4-- = m2 + m3;
 8007250:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007254:	1f1a      	subs	r2, r3, #4
 8007256:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 800725a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800725e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8007262:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007266:	edc3 7a00 	vstr	s15, [r3]
    for (l = (L - 2) >> 1; l > 0; l-- )
 800726a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800726e:	3b01      	subs	r3, #1
 8007270:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007274:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007278:	2b00      	cmp	r3, #0
 800727a:	f47f ace0 	bne.w	8006c3e <arm_cfft_radix8by4_f32+0x2be>
    }

    /* MIDDLE */
    /* Twiddle factors are */
    /*  1.0000  0.7071-0.7071i  -1.0000i  -0.7071-0.7071i */
    p1ap3_0 = p1[0] + p3[0];
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	ed93 7a00 	vldr	s14, [r3]
 8007284:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007288:	edd3 7a00 	vldr	s15, [r3]
 800728c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007290:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	ed93 7a00 	vldr	s14, [r3]
 800729a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800729e:	edd3 7a00 	vldr	s15, [r3]
 80072a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80072a6:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	3304      	adds	r3, #4
 80072ae:	ed93 7a00 	vldr	s14, [r3]
 80072b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80072b6:	3304      	adds	r3, #4
 80072b8:	edd3 7a00 	vldr	s15, [r3]
 80072bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80072c0:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	3304      	adds	r3, #4
 80072c8:	ed93 7a00 	vldr	s14, [r3]
 80072cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80072d0:	3304      	adds	r3, #4
 80072d2:	edd3 7a00 	vldr	s15, [r3]
 80072d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80072da:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 80072de:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80072e2:	3304      	adds	r3, #4
 80072e4:	ed93 7a00 	vldr	s14, [r3]
 80072e8:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80072ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80072f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80072f4:	3304      	adds	r3, #4
 80072f6:	edd3 7a00 	vldr	s15, [r3]
 80072fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80072fe:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8007302:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007306:	edd3 7a00 	vldr	s15, [r3]
 800730a:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800730e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007312:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007316:	edd3 7a00 	vldr	s15, [r3]
 800731a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800731e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    /* col 3 */
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8007322:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007326:	edd3 7a00 	vldr	s15, [r3]
 800732a:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800732e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007332:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007336:	edd3 7a00 	vldr	s15, [r3]
 800733a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800733e:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8007342:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007346:	3304      	adds	r3, #4
 8007348:	edd3 7a00 	vldr	s15, [r3]
 800734c:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8007350:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007354:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007358:	3304      	adds	r3, #4
 800735a:	edd3 7a00 	vldr	s15, [r3]
 800735e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007362:	edc7 7a08 	vstr	s15, [r7, #32]
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8007366:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800736a:	3304      	adds	r3, #4
 800736c:	edd3 7a00 	vldr	s15, [r3]
 8007370:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8007374:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007378:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800737c:	3304      	adds	r3, #4
 800737e:	edd3 7a00 	vldr	s15, [r3]
 8007382:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007386:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 800738a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800738e:	ed93 7a00 	vldr	s14, [r3]
 8007392:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8007396:	ee37 7a27 	vadd.f32	s14, s14, s15
 800739a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800739e:	edd3 7a00 	vldr	s15, [r3]
 80073a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80073a6:	edc7 7a04 	vstr	s15, [r7, #16]
    /* col 1 - Top */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 80073aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80073ae:	ed93 7a00 	vldr	s14, [r3]
 80073b2:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80073b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80073ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80073be:	edd3 7a00 	vldr	s15, [r3]
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	1d1a      	adds	r2, r3, #4
 80073c6:	603a      	str	r2, [r7, #0]
 80073c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80073cc:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 80073d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80073d4:	3304      	adds	r3, #4
 80073d6:	ed93 7a00 	vldr	s14, [r3]
 80073da:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80073de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80073e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80073e6:	3304      	adds	r3, #4
 80073e8:	edd3 7a00 	vldr	s15, [r3]
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	1d1a      	adds	r2, r3, #4
 80073f0:	603a      	str	r2, [r7, #0]
 80073f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80073f6:	edc3 7a00 	vstr	s15, [r3]

    /* COL 2 */
    twR = tw2[0];
 80073fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw2[1];
 8007402:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007406:	685b      	ldr	r3, [r3, #4]
 8007408:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t2[0] * twR;
 800740a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800740e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8007412:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007416:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t2[1] * twI;
 800741a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800741e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8007422:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007426:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t2[1] * twR;
 800742a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800742e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8007432:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007436:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t2[0] * twI;
 800743a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800743e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8007442:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007446:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p2++ = m0 + m1;
 800744a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800744e:	1d1a      	adds	r2, r3, #4
 8007450:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8007454:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8007458:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800745c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007460:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 8007464:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007468:	1d1a      	adds	r2, r3, #4
 800746a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800746e:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8007472:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8007476:	ee77 7a67 	vsub.f32	s15, s14, s15
 800747a:	edc3 7a00 	vstr	s15, [r3]
    /* COL 3 */
    twR = tw3[0];
 800747e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw3[1];
 8007486:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800748a:	685b      	ldr	r3, [r3, #4]
 800748c:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t3[0] * twR;
 800748e:	edd7 7a07 	vldr	s15, [r7, #28]
 8007492:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8007496:	ee67 7a27 	vmul.f32	s15, s14, s15
 800749a:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t3[1] * twI;
 800749e:	edd7 7a08 	vldr	s15, [r7, #32]
 80074a2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80074a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074aa:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t3[1] * twR;
 80074ae:	edd7 7a08 	vldr	s15, [r7, #32]
 80074b2:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80074b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074ba:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t3[0] * twI;
 80074be:	edd7 7a07 	vldr	s15, [r7, #28]
 80074c2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80074c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074ca:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p3++ = m0 + m1;
 80074ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80074d2:	1d1a      	adds	r2, r3, #4
 80074d4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80074d8:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80074dc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80074e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80074e4:	edc3 7a00 	vstr	s15, [r3]
    *p3++ = m2 - m3;
 80074e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80074ec:	1d1a      	adds	r2, r3, #4
 80074ee:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80074f2:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80074f6:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80074fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80074fe:	edc3 7a00 	vstr	s15, [r3]
    /* COL 4 */
    twR = tw4[0];
 8007502:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw4[1];
 800750a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t4[0] * twR;
 8007512:	edd7 7a03 	vldr	s15, [r7, #12]
 8007516:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800751a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800751e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t4[1] * twI;
 8007522:	edd7 7a04 	vldr	s15, [r7, #16]
 8007526:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800752a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800752e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t4[1] * twR;
 8007532:	edd7 7a04 	vldr	s15, [r7, #16]
 8007536:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800753a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800753e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t4[0] * twI;
 8007542:	edd7 7a03 	vldr	s15, [r7, #12]
 8007546:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800754a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800754e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p4++ = m0 + m1;
 8007552:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007556:	1d1a      	adds	r2, r3, #4
 8007558:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800755c:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8007560:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8007564:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007568:	edc3 7a00 	vstr	s15, [r3]
    *p4++ = m2 - m3;
 800756c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007570:	1d1a      	adds	r2, r3, #4
 8007572:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8007576:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800757a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800757e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007582:	edc3 7a00 	vstr	s15, [r3]

    /* first col */
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
 8007586:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800758a:	b299      	uxth	r1, r3
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	685a      	ldr	r2, [r3, #4]
 8007590:	2304      	movs	r3, #4
 8007592:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8007594:	f000 f9ac 	bl	80078f0 <arm_radix8_butterfly_f32>

    /* second col */
    arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 4U);
 8007598:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800759c:	b299      	uxth	r1, r3
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	685a      	ldr	r2, [r3, #4]
 80075a2:	2304      	movs	r3, #4
 80075a4:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80075a6:	f000 f9a3 	bl	80078f0 <arm_radix8_butterfly_f32>

    /* third col */
    arm_radix8_butterfly_f32 (pCol3, L, (float32_t *) S->pTwiddle, 4U);
 80075aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80075ae:	b299      	uxth	r1, r3
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	685a      	ldr	r2, [r3, #4]
 80075b4:	2304      	movs	r3, #4
 80075b6:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80075b8:	f000 f99a 	bl	80078f0 <arm_radix8_butterfly_f32>

    /* fourth col */
    arm_radix8_butterfly_f32 (pCol4, L, (float32_t *) S->pTwiddle, 4U);
 80075bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80075c0:	b299      	uxth	r1, r3
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	685a      	ldr	r2, [r3, #4]
 80075c6:	2304      	movs	r3, #4
 80075c8:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80075ca:	f000 f991 	bl	80078f0 <arm_radix8_butterfly_f32>
}
 80075ce:	bf00      	nop
 80075d0:	37b0      	adds	r7, #176	; 0xb0
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}

080075d6 <arm_cfft_f32>:
void arm_cfft_f32(
  const arm_cfft_instance_f32 * S,
        float32_t * p1,
        uint8_t ifftFlag,
        uint8_t bitReverseFlag)
{
 80075d6:	b580      	push	{r7, lr}
 80075d8:	b088      	sub	sp, #32
 80075da:	af00      	add	r7, sp, #0
 80075dc:	60f8      	str	r0, [r7, #12]
 80075de:	60b9      	str	r1, [r7, #8]
 80075e0:	4611      	mov	r1, r2
 80075e2:	461a      	mov	r2, r3
 80075e4:	460b      	mov	r3, r1
 80075e6:	71fb      	strb	r3, [r7, #7]
 80075e8:	4613      	mov	r3, r2
 80075ea:	71bb      	strb	r3, [r7, #6]
  uint32_t  L = S->fftLen, l;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	881b      	ldrh	r3, [r3, #0]
 80075f0:	617b      	str	r3, [r7, #20]
  float32_t invL, * pSrc;

  if (ifftFlag == 1U)
 80075f2:	79fb      	ldrb	r3, [r7, #7]
 80075f4:	2b01      	cmp	r3, #1
 80075f6:	d117      	bne.n	8007628 <arm_cfft_f32+0x52>
  {
    /* Conjugate input data */
    pSrc = p1 + 1;
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	3304      	adds	r3, #4
 80075fc:	61bb      	str	r3, [r7, #24]
    for (l = 0; l < L; l++)
 80075fe:	2300      	movs	r3, #0
 8007600:	61fb      	str	r3, [r7, #28]
 8007602:	e00d      	b.n	8007620 <arm_cfft_f32+0x4a>
    {
      *pSrc = -*pSrc;
 8007604:	69bb      	ldr	r3, [r7, #24]
 8007606:	edd3 7a00 	vldr	s15, [r3]
 800760a:	eef1 7a67 	vneg.f32	s15, s15
 800760e:	69bb      	ldr	r3, [r7, #24]
 8007610:	edc3 7a00 	vstr	s15, [r3]
      pSrc += 2;
 8007614:	69bb      	ldr	r3, [r7, #24]
 8007616:	3308      	adds	r3, #8
 8007618:	61bb      	str	r3, [r7, #24]
    for (l = 0; l < L; l++)
 800761a:	69fb      	ldr	r3, [r7, #28]
 800761c:	3301      	adds	r3, #1
 800761e:	61fb      	str	r3, [r7, #28]
 8007620:	69fa      	ldr	r2, [r7, #28]
 8007622:	697b      	ldr	r3, [r7, #20]
 8007624:	429a      	cmp	r2, r3
 8007626:	d3ed      	bcc.n	8007604 <arm_cfft_f32+0x2e>
    }
  }

  switch (L)
 8007628:	697b      	ldr	r3, [r7, #20]
 800762a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800762e:	d040      	beq.n	80076b2 <arm_cfft_f32+0xdc>
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007636:	d845      	bhi.n	80076c4 <arm_cfft_f32+0xee>
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800763e:	d033      	beq.n	80076a8 <arm_cfft_f32+0xd2>
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007646:	d83d      	bhi.n	80076c4 <arm_cfft_f32+0xee>
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800764e:	d026      	beq.n	800769e <arm_cfft_f32+0xc8>
 8007650:	697b      	ldr	r3, [r7, #20]
 8007652:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007656:	d835      	bhi.n	80076c4 <arm_cfft_f32+0xee>
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800765e:	d028      	beq.n	80076b2 <arm_cfft_f32+0xdc>
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007666:	d82d      	bhi.n	80076c4 <arm_cfft_f32+0xee>
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800766e:	d01b      	beq.n	80076a8 <arm_cfft_f32+0xd2>
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007676:	d825      	bhi.n	80076c4 <arm_cfft_f32+0xee>
 8007678:	697b      	ldr	r3, [r7, #20]
 800767a:	2b80      	cmp	r3, #128	; 0x80
 800767c:	d00f      	beq.n	800769e <arm_cfft_f32+0xc8>
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	2b80      	cmp	r3, #128	; 0x80
 8007682:	d81f      	bhi.n	80076c4 <arm_cfft_f32+0xee>
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	2b40      	cmp	r3, #64	; 0x40
 8007688:	d013      	beq.n	80076b2 <arm_cfft_f32+0xdc>
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	2b40      	cmp	r3, #64	; 0x40
 800768e:	d819      	bhi.n	80076c4 <arm_cfft_f32+0xee>
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	2b10      	cmp	r3, #16
 8007694:	d003      	beq.n	800769e <arm_cfft_f32+0xc8>
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	2b20      	cmp	r3, #32
 800769a:	d005      	beq.n	80076a8 <arm_cfft_f32+0xd2>
 800769c:	e012      	b.n	80076c4 <arm_cfft_f32+0xee>
  {
  case 16:
  case 128:
  case 1024:
    arm_cfft_radix8by2_f32 ( (arm_cfft_instance_f32 *) S, p1);
 800769e:	68b9      	ldr	r1, [r7, #8]
 80076a0:	68f8      	ldr	r0, [r7, #12]
 80076a2:	f7fe ff79 	bl	8006598 <arm_cfft_radix8by2_f32>
    break;
 80076a6:	e00d      	b.n	80076c4 <arm_cfft_f32+0xee>
  case 32:
  case 256:
  case 2048:
    arm_cfft_radix8by4_f32 ( (arm_cfft_instance_f32 *) S, p1);
 80076a8:	68b9      	ldr	r1, [r7, #8]
 80076aa:	68f8      	ldr	r0, [r7, #12]
 80076ac:	f7ff f968 	bl	8006980 <arm_cfft_radix8by4_f32>
    break;
 80076b0:	e008      	b.n	80076c4 <arm_cfft_f32+0xee>
  case 64:
  case 512:
  case 4096:
    arm_radix8_butterfly_f32 ( p1, L, (float32_t *) S->pTwiddle, 1);
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	b299      	uxth	r1, r3
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	685a      	ldr	r2, [r3, #4]
 80076ba:	2301      	movs	r3, #1
 80076bc:	68b8      	ldr	r0, [r7, #8]
 80076be:	f000 f917 	bl	80078f0 <arm_radix8_butterfly_f32>
    break;
 80076c2:	bf00      	nop
  }

  if ( bitReverseFlag )
 80076c4:	79bb      	ldrb	r3, [r7, #6]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d007      	beq.n	80076da <arm_cfft_f32+0x104>
    arm_bitreversal_32 ((uint32_t*) p1, S->bitRevLength, S->pBitRevTable);
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	8999      	ldrh	r1, [r3, #12]
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	689b      	ldr	r3, [r3, #8]
 80076d2:	461a      	mov	r2, r3
 80076d4:	68b8      	ldr	r0, [r7, #8]
 80076d6:	f7fe ff06 	bl	80064e6 <arm_bitreversal_32>

  if (ifftFlag == 1U)
 80076da:	79fb      	ldrb	r3, [r7, #7]
 80076dc:	2b01      	cmp	r3, #1
 80076de:	d130      	bne.n	8007742 <arm_cfft_f32+0x16c>
  {
    invL = 1.0f / (float32_t)L;
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	ee07 3a90 	vmov	s15, r3
 80076e6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80076ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076f2:	edc7 7a04 	vstr	s15, [r7, #16]

    /* Conjugate and scale output data */
    pSrc = p1;
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	61bb      	str	r3, [r7, #24]
    for (l= 0; l < L; l++)
 80076fa:	2300      	movs	r3, #0
 80076fc:	61fb      	str	r3, [r7, #28]
 80076fe:	e01c      	b.n	800773a <arm_cfft_f32+0x164>
    {
      *pSrc++ *=   invL ;
 8007700:	69bb      	ldr	r3, [r7, #24]
 8007702:	1d1a      	adds	r2, r3, #4
 8007704:	61ba      	str	r2, [r7, #24]
 8007706:	ed93 7a00 	vldr	s14, [r3]
 800770a:	edd7 7a04 	vldr	s15, [r7, #16]
 800770e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007712:	edc3 7a00 	vstr	s15, [r3]
      *pSrc    = -(*pSrc) * invL;
 8007716:	69bb      	ldr	r3, [r7, #24]
 8007718:	edd3 7a00 	vldr	s15, [r3]
 800771c:	eeb1 7a67 	vneg.f32	s14, s15
 8007720:	edd7 7a04 	vldr	s15, [r7, #16]
 8007724:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007728:	69bb      	ldr	r3, [r7, #24]
 800772a:	edc3 7a00 	vstr	s15, [r3]
      pSrc++;
 800772e:	69bb      	ldr	r3, [r7, #24]
 8007730:	3304      	adds	r3, #4
 8007732:	61bb      	str	r3, [r7, #24]
    for (l= 0; l < L; l++)
 8007734:	69fb      	ldr	r3, [r7, #28]
 8007736:	3301      	adds	r3, #1
 8007738:	61fb      	str	r3, [r7, #28]
 800773a:	69fa      	ldr	r2, [r7, #28]
 800773c:	697b      	ldr	r3, [r7, #20]
 800773e:	429a      	cmp	r2, r3
 8007740:	d3de      	bcc.n	8007700 <arm_cfft_f32+0x12a>
    }
  }
}
 8007742:	bf00      	nop
 8007744:	3720      	adds	r7, #32
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}
	...

0800774c <arm_cfft_init_f32>:
}
#else
arm_status arm_cfft_init_f32(
  arm_cfft_instance_f32 * S,
  uint16_t fftLen)
{
 800774c:	b480      	push	{r7}
 800774e:	b085      	sub	sp, #20
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
 8007754:	460b      	mov	r3, r1
 8007756:	807b      	strh	r3, [r7, #2]
        /*  Initialise the default arm status */
        arm_status status = ARM_MATH_SUCCESS;
 8007758:	2300      	movs	r3, #0
 800775a:	73fb      	strb	r3, [r7, #15]

        /*  Initialise the FFT length */
        S->fftLen = fftLen;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	887a      	ldrh	r2, [r7, #2]
 8007760:	801a      	strh	r2, [r3, #0]

        /*  Initialise the Twiddle coefficient pointer */
        S->pTwiddle = NULL;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2200      	movs	r2, #0
 8007766:	605a      	str	r2, [r3, #4]


        /*  Initializations of Instance structure depending on the FFT length */
        switch (S->fftLen) {
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	881b      	ldrh	r3, [r3, #0]
 800776c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007770:	d02c      	beq.n	80077cc <arm_cfft_init_f32+0x80>
 8007772:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007776:	f300 809e 	bgt.w	80078b6 <arm_cfft_init_f32+0x16a>
 800777a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800777e:	d032      	beq.n	80077e6 <arm_cfft_init_f32+0x9a>
 8007780:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007784:	f300 8097 	bgt.w	80078b6 <arm_cfft_init_f32+0x16a>
 8007788:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800778c:	d038      	beq.n	8007800 <arm_cfft_init_f32+0xb4>
 800778e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007792:	f300 8090 	bgt.w	80078b6 <arm_cfft_init_f32+0x16a>
 8007796:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800779a:	d03e      	beq.n	800781a <arm_cfft_init_f32+0xce>
 800779c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077a0:	f300 8089 	bgt.w	80078b6 <arm_cfft_init_f32+0x16a>
 80077a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077a8:	d044      	beq.n	8007834 <arm_cfft_init_f32+0xe8>
 80077aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077ae:	f300 8082 	bgt.w	80078b6 <arm_cfft_init_f32+0x16a>
 80077b2:	2b80      	cmp	r3, #128	; 0x80
 80077b4:	d04b      	beq.n	800784e <arm_cfft_init_f32+0x102>
 80077b6:	2b80      	cmp	r3, #128	; 0x80
 80077b8:	dc7d      	bgt.n	80078b6 <arm_cfft_init_f32+0x16a>
 80077ba:	2b40      	cmp	r3, #64	; 0x40
 80077bc:	d054      	beq.n	8007868 <arm_cfft_init_f32+0x11c>
 80077be:	2b40      	cmp	r3, #64	; 0x40
 80077c0:	dc79      	bgt.n	80078b6 <arm_cfft_init_f32+0x16a>
 80077c2:	2b10      	cmp	r3, #16
 80077c4:	d06a      	beq.n	800789c <arm_cfft_init_f32+0x150>
 80077c6:	2b20      	cmp	r3, #32
 80077c8:	d05b      	beq.n	8007882 <arm_cfft_init_f32+0x136>
 80077ca:	e074      	b.n	80078b6 <arm_cfft_init_f32+0x16a>
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_4096) && defined(ARM_TABLE_BITREVIDX_FLT_4096))
            /*  Initializations of structure parameters for 4096 point FFT */
        case 4096U:
            /*  Initialise the bit reversal table modifier */
            FFTINIT(f32,4096);
 80077cc:	4b3f      	ldr	r3, [pc, #252]	; (80078cc <arm_cfft_init_f32+0x180>)
 80077ce:	899a      	ldrh	r2, [r3, #12]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	819a      	strh	r2, [r3, #12]
 80077d4:	4b3d      	ldr	r3, [pc, #244]	; (80078cc <arm_cfft_init_f32+0x180>)
 80077d6:	689a      	ldr	r2, [r3, #8]
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	609a      	str	r2, [r3, #8]
 80077dc:	4b3b      	ldr	r3, [pc, #236]	; (80078cc <arm_cfft_init_f32+0x180>)
 80077de:	685a      	ldr	r2, [r3, #4]
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	605a      	str	r2, [r3, #4]
            break;
 80077e4:	e06a      	b.n	80078bc <arm_cfft_init_f32+0x170>

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_2048) && defined(ARM_TABLE_BITREVIDX_FLT_2048))
            /*  Initializations of structure parameters for 2048 point FFT */
        case 2048U:
            /*  Initialise the bit reversal table modifier */
            FFTINIT(f32,2048);
 80077e6:	4b3a      	ldr	r3, [pc, #232]	; (80078d0 <arm_cfft_init_f32+0x184>)
 80077e8:	899a      	ldrh	r2, [r3, #12]
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	819a      	strh	r2, [r3, #12]
 80077ee:	4b38      	ldr	r3, [pc, #224]	; (80078d0 <arm_cfft_init_f32+0x184>)
 80077f0:	689a      	ldr	r2, [r3, #8]
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	609a      	str	r2, [r3, #8]
 80077f6:	4b36      	ldr	r3, [pc, #216]	; (80078d0 <arm_cfft_init_f32+0x184>)
 80077f8:	685a      	ldr	r2, [r3, #4]
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	605a      	str	r2, [r3, #4]

            break;
 80077fe:	e05d      	b.n	80078bc <arm_cfft_init_f32+0x170>

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_1024) && defined(ARM_TABLE_BITREVIDX_FLT_1024))
            /*  Initializations of structure parameters for 1024 point FFT */
        case 1024U:
            /*  Initialise the bit reversal table modifier */
            FFTINIT(f32,1024);
 8007800:	4b34      	ldr	r3, [pc, #208]	; (80078d4 <arm_cfft_init_f32+0x188>)
 8007802:	899a      	ldrh	r2, [r3, #12]
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	819a      	strh	r2, [r3, #12]
 8007808:	4b32      	ldr	r3, [pc, #200]	; (80078d4 <arm_cfft_init_f32+0x188>)
 800780a:	689a      	ldr	r2, [r3, #8]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	609a      	str	r2, [r3, #8]
 8007810:	4b30      	ldr	r3, [pc, #192]	; (80078d4 <arm_cfft_init_f32+0x188>)
 8007812:	685a      	ldr	r2, [r3, #4]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	605a      	str	r2, [r3, #4]

            break;
 8007818:	e050      	b.n	80078bc <arm_cfft_init_f32+0x170>

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_512) && defined(ARM_TABLE_BITREVIDX_FLT_512))
            /*  Initializations of structure parameters for 512 point FFT */
        case 512U:
            /*  Initialise the bit reversal table modifier */
            FFTINIT(f32,512);
 800781a:	4b2f      	ldr	r3, [pc, #188]	; (80078d8 <arm_cfft_init_f32+0x18c>)
 800781c:	899a      	ldrh	r2, [r3, #12]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	819a      	strh	r2, [r3, #12]
 8007822:	4b2d      	ldr	r3, [pc, #180]	; (80078d8 <arm_cfft_init_f32+0x18c>)
 8007824:	689a      	ldr	r2, [r3, #8]
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	609a      	str	r2, [r3, #8]
 800782a:	4b2b      	ldr	r3, [pc, #172]	; (80078d8 <arm_cfft_init_f32+0x18c>)
 800782c:	685a      	ldr	r2, [r3, #4]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	605a      	str	r2, [r3, #4]
            break;
 8007832:	e043      	b.n	80078bc <arm_cfft_init_f32+0x170>
#endif

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_256) && defined(ARM_TABLE_BITREVIDX_FLT_256))
        case 256U:
            FFTINIT(f32,256);
 8007834:	4b29      	ldr	r3, [pc, #164]	; (80078dc <arm_cfft_init_f32+0x190>)
 8007836:	899a      	ldrh	r2, [r3, #12]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	819a      	strh	r2, [r3, #12]
 800783c:	4b27      	ldr	r3, [pc, #156]	; (80078dc <arm_cfft_init_f32+0x190>)
 800783e:	689a      	ldr	r2, [r3, #8]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	609a      	str	r2, [r3, #8]
 8007844:	4b25      	ldr	r3, [pc, #148]	; (80078dc <arm_cfft_init_f32+0x190>)
 8007846:	685a      	ldr	r2, [r3, #4]
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	605a      	str	r2, [r3, #4]
            break;
 800784c:	e036      	b.n	80078bc <arm_cfft_init_f32+0x170>
#endif

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_128) && defined(ARM_TABLE_BITREVIDX_FLT_128))
        case 128U:
            FFTINIT(f32,128);
 800784e:	4b24      	ldr	r3, [pc, #144]	; (80078e0 <arm_cfft_init_f32+0x194>)
 8007850:	899a      	ldrh	r2, [r3, #12]
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	819a      	strh	r2, [r3, #12]
 8007856:	4b22      	ldr	r3, [pc, #136]	; (80078e0 <arm_cfft_init_f32+0x194>)
 8007858:	689a      	ldr	r2, [r3, #8]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	609a      	str	r2, [r3, #8]
 800785e:	4b20      	ldr	r3, [pc, #128]	; (80078e0 <arm_cfft_init_f32+0x194>)
 8007860:	685a      	ldr	r2, [r3, #4]
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	605a      	str	r2, [r3, #4]
            break;
 8007866:	e029      	b.n	80078bc <arm_cfft_init_f32+0x170>
#endif 

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_64) && defined(ARM_TABLE_BITREVIDX_FLT_64))
        case 64U:
            FFTINIT(f32,64);
 8007868:	4b1e      	ldr	r3, [pc, #120]	; (80078e4 <arm_cfft_init_f32+0x198>)
 800786a:	899a      	ldrh	r2, [r3, #12]
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	819a      	strh	r2, [r3, #12]
 8007870:	4b1c      	ldr	r3, [pc, #112]	; (80078e4 <arm_cfft_init_f32+0x198>)
 8007872:	689a      	ldr	r2, [r3, #8]
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	609a      	str	r2, [r3, #8]
 8007878:	4b1a      	ldr	r3, [pc, #104]	; (80078e4 <arm_cfft_init_f32+0x198>)
 800787a:	685a      	ldr	r2, [r3, #4]
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	605a      	str	r2, [r3, #4]
            break;
 8007880:	e01c      	b.n	80078bc <arm_cfft_init_f32+0x170>
#endif 

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_32) && defined(ARM_TABLE_BITREVIDX_FLT_32))
        case 32U:
            FFTINIT(f32,32);
 8007882:	4b19      	ldr	r3, [pc, #100]	; (80078e8 <arm_cfft_init_f32+0x19c>)
 8007884:	899a      	ldrh	r2, [r3, #12]
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	819a      	strh	r2, [r3, #12]
 800788a:	4b17      	ldr	r3, [pc, #92]	; (80078e8 <arm_cfft_init_f32+0x19c>)
 800788c:	689a      	ldr	r2, [r3, #8]
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	609a      	str	r2, [r3, #8]
 8007892:	4b15      	ldr	r3, [pc, #84]	; (80078e8 <arm_cfft_init_f32+0x19c>)
 8007894:	685a      	ldr	r2, [r3, #4]
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	605a      	str	r2, [r3, #4]
            break;
 800789a:	e00f      	b.n	80078bc <arm_cfft_init_f32+0x170>
#endif 

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_16) && defined(ARM_TABLE_BITREVIDX_FLT_16))
        case 16U:
            /*  Initializations of structure parameters for 16 point FFT */
            FFTINIT(f32,16);
 800789c:	4b13      	ldr	r3, [pc, #76]	; (80078ec <arm_cfft_init_f32+0x1a0>)
 800789e:	899a      	ldrh	r2, [r3, #12]
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	819a      	strh	r2, [r3, #12]
 80078a4:	4b11      	ldr	r3, [pc, #68]	; (80078ec <arm_cfft_init_f32+0x1a0>)
 80078a6:	689a      	ldr	r2, [r3, #8]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	609a      	str	r2, [r3, #8]
 80078ac:	4b0f      	ldr	r3, [pc, #60]	; (80078ec <arm_cfft_init_f32+0x1a0>)
 80078ae:	685a      	ldr	r2, [r3, #4]
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	605a      	str	r2, [r3, #4]
            break;
 80078b4:	e002      	b.n	80078bc <arm_cfft_init_f32+0x170>
#endif

        default:
            /*  Reporting argument error if fftSize is not valid value */
            status = ARM_MATH_ARGUMENT_ERROR;
 80078b6:	23ff      	movs	r3, #255	; 0xff
 80078b8:	73fb      	strb	r3, [r7, #15]
            break;
 80078ba:	bf00      	nop
        }


        return (status);
 80078bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80078c0:	4618      	mov	r0, r3
 80078c2:	3714      	adds	r7, #20
 80078c4:	46bd      	mov	sp, r7
 80078c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ca:	4770      	bx	lr
 80078cc:	08032e08 	.word	0x08032e08
 80078d0:	08032df8 	.word	0x08032df8
 80078d4:	08032de8 	.word	0x08032de8
 80078d8:	08032dd8 	.word	0x08032dd8
 80078dc:	08032dc8 	.word	0x08032dc8
 80078e0:	08032db8 	.word	0x08032db8
 80078e4:	08032da8 	.word	0x08032da8
 80078e8:	08032d98 	.word	0x08032d98
 80078ec:	08032d88 	.word	0x08032d88

080078f0 <arm_radix8_butterfly_f32>:
void arm_radix8_butterfly_f32(
  float32_t * pSrc,
  uint16_t fftLen,
  const float32_t * pCoef,
  uint16_t twidCoefModifier)
{
 80078f0:	b480      	push	{r7}
 80078f2:	b0bd      	sub	sp, #244	; 0xf4
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	60f8      	str	r0, [r7, #12]
 80078f8:	607a      	str	r2, [r7, #4]
 80078fa:	461a      	mov	r2, r3
 80078fc:	460b      	mov	r3, r1
 80078fe:	817b      	strh	r3, [r7, #10]
 8007900:	4613      	mov	r3, r2
 8007902:	813b      	strh	r3, [r7, #8]
   float32_t t1, t2;
   float32_t s1, s2, s3, s4, s5, s6, s7, s8;
   float32_t p1, p2, p3, p4;
   float32_t co2, co3, co4, co5, co6, co7, co8;
   float32_t si2, si3, si4, si5, si6, si7, si8;
   const float32_t C81 = 0.70710678118f;
 8007904:	4b09      	ldr	r3, [pc, #36]	; (800792c <arm_radix8_butterfly_f32+0x3c>)
 8007906:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

   n2 = fftLen;
 800790a:	897b      	ldrh	r3, [r7, #10]
 800790c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

   do
   {
      n1 = n2;
 8007910:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007914:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      n2 = n2 >> 3;
 8007918:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800791c:	08db      	lsrs	r3, r3, #3
 800791e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      i1 = 0;
 8007922:	2300      	movs	r3, #0
 8007924:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007928:	e002      	b.n	8007930 <arm_radix8_butterfly_f32+0x40>
 800792a:	bf00      	nop
 800792c:	3f3504f3 	.word	0x3f3504f3

      do
      {
         i2 = i1 + n2;
 8007930:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8007934:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007938:	4413      	add	r3, r2
 800793a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
         i3 = i2 + n2;
 800793e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8007942:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007946:	4413      	add	r3, r2
 8007948:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
         i4 = i3 + n2;
 800794c:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007950:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007954:	4413      	add	r3, r2
 8007956:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
         i5 = i4 + n2;
 800795a:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800795e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007962:	4413      	add	r3, r2
 8007964:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
         i6 = i5 + n2;
 8007968:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800796c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007970:	4413      	add	r3, r2
 8007972:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
         i7 = i6 + n2;
 8007976:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800797a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800797e:	4413      	add	r3, r2
 8007980:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
         i8 = i7 + n2;
 8007984:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007988:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800798c:	4413      	add	r3, r2
 800798e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8007992:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007996:	00db      	lsls	r3, r3, #3
 8007998:	68fa      	ldr	r2, [r7, #12]
 800799a:	4413      	add	r3, r2
 800799c:	ed93 7a00 	vldr	s14, [r3]
 80079a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80079a4:	00db      	lsls	r3, r3, #3
 80079a6:	68fa      	ldr	r2, [r7, #12]
 80079a8:	4413      	add	r3, r2
 80079aa:	edd3 7a00 	vldr	s15, [r3]
 80079ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80079b2:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
 80079b6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80079ba:	00db      	lsls	r3, r3, #3
 80079bc:	68fa      	ldr	r2, [r7, #12]
 80079be:	4413      	add	r3, r2
 80079c0:	ed93 7a00 	vldr	s14, [r3]
 80079c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80079c8:	00db      	lsls	r3, r3, #3
 80079ca:	68fa      	ldr	r2, [r7, #12]
 80079cc:	4413      	add	r3, r2
 80079ce:	edd3 7a00 	vldr	s15, [r3]
 80079d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80079d6:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 80079da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80079de:	00db      	lsls	r3, r3, #3
 80079e0:	68fa      	ldr	r2, [r7, #12]
 80079e2:	4413      	add	r3, r2
 80079e4:	ed93 7a00 	vldr	s14, [r3]
 80079e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80079ec:	00db      	lsls	r3, r3, #3
 80079ee:	68fa      	ldr	r2, [r7, #12]
 80079f0:	4413      	add	r3, r2
 80079f2:	edd3 7a00 	vldr	s15, [r3]
 80079f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80079fa:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
 80079fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007a02:	00db      	lsls	r3, r3, #3
 8007a04:	68fa      	ldr	r2, [r7, #12]
 8007a06:	4413      	add	r3, r2
 8007a08:	ed93 7a00 	vldr	s14, [r3]
 8007a0c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007a10:	00db      	lsls	r3, r3, #3
 8007a12:	68fa      	ldr	r2, [r7, #12]
 8007a14:	4413      	add	r3, r2
 8007a16:	edd3 7a00 	vldr	s15, [r3]
 8007a1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007a1e:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8007a22:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007a26:	00db      	lsls	r3, r3, #3
 8007a28:	68fa      	ldr	r2, [r7, #12]
 8007a2a:	4413      	add	r3, r2
 8007a2c:	ed93 7a00 	vldr	s14, [r3]
 8007a30:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007a34:	00db      	lsls	r3, r3, #3
 8007a36:	68fa      	ldr	r2, [r7, #12]
 8007a38:	4413      	add	r3, r2
 8007a3a:	edd3 7a00 	vldr	s15, [r3]
 8007a3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007a42:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8007a46:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007a4a:	00db      	lsls	r3, r3, #3
 8007a4c:	68fa      	ldr	r2, [r7, #12]
 8007a4e:	4413      	add	r3, r2
 8007a50:	ed93 7a00 	vldr	s14, [r3]
 8007a54:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007a58:	00db      	lsls	r3, r3, #3
 8007a5a:	68fa      	ldr	r2, [r7, #12]
 8007a5c:	4413      	add	r3, r2
 8007a5e:	edd3 7a00 	vldr	s15, [r3]
 8007a62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007a66:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8007a6a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007a6e:	00db      	lsls	r3, r3, #3
 8007a70:	68fa      	ldr	r2, [r7, #12]
 8007a72:	4413      	add	r3, r2
 8007a74:	ed93 7a00 	vldr	s14, [r3]
 8007a78:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007a7c:	00db      	lsls	r3, r3, #3
 8007a7e:	68fa      	ldr	r2, [r7, #12]
 8007a80:	4413      	add	r3, r2
 8007a82:	edd3 7a00 	vldr	s15, [r3]
 8007a86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007a8a:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
 8007a8e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007a92:	00db      	lsls	r3, r3, #3
 8007a94:	68fa      	ldr	r2, [r7, #12]
 8007a96:	4413      	add	r3, r2
 8007a98:	ed93 7a00 	vldr	s14, [r3]
 8007a9c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007aa0:	00db      	lsls	r3, r3, #3
 8007aa2:	68fa      	ldr	r2, [r7, #12]
 8007aa4:	4413      	add	r3, r2
 8007aa6:	edd3 7a00 	vldr	s15, [r3]
 8007aaa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007aae:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         t1 = r1 - r3;
 8007ab2:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8007ab6:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8007aba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007abe:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r1 = r1 + r3;
 8007ac2:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8007ac6:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8007aca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007ace:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r3 = r2 - r4;
 8007ad2:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8007ad6:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8007ada:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007ade:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r2 = r2 + r4;
 8007ae2:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8007ae6:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8007aea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007aee:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1] = r1 + r2;
 8007af2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007af6:	00db      	lsls	r3, r3, #3
 8007af8:	68fa      	ldr	r2, [r7, #12]
 8007afa:	4413      	add	r3, r2
 8007afc:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8007b00:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8007b04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007b08:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5] = r1 - r2;
 8007b0c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007b10:	00db      	lsls	r3, r3, #3
 8007b12:	68fa      	ldr	r2, [r7, #12]
 8007b14:	4413      	add	r3, r2
 8007b16:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8007b1a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8007b1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007b22:	edc3 7a00 	vstr	s15, [r3]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8007b26:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007b2a:	00db      	lsls	r3, r3, #3
 8007b2c:	3304      	adds	r3, #4
 8007b2e:	68fa      	ldr	r2, [r7, #12]
 8007b30:	4413      	add	r3, r2
 8007b32:	ed93 7a00 	vldr	s14, [r3]
 8007b36:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007b3a:	00db      	lsls	r3, r3, #3
 8007b3c:	3304      	adds	r3, #4
 8007b3e:	68fa      	ldr	r2, [r7, #12]
 8007b40:	4413      	add	r3, r2
 8007b42:	edd3 7a00 	vldr	s15, [r3]
 8007b46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007b4a:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8007b4e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007b52:	00db      	lsls	r3, r3, #3
 8007b54:	3304      	adds	r3, #4
 8007b56:	68fa      	ldr	r2, [r7, #12]
 8007b58:	4413      	add	r3, r2
 8007b5a:	ed93 7a00 	vldr	s14, [r3]
 8007b5e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007b62:	00db      	lsls	r3, r3, #3
 8007b64:	3304      	adds	r3, #4
 8007b66:	68fa      	ldr	r2, [r7, #12]
 8007b68:	4413      	add	r3, r2
 8007b6a:	edd3 7a00 	vldr	s15, [r3]
 8007b6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007b72:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8007b76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007b7a:	00db      	lsls	r3, r3, #3
 8007b7c:	3304      	adds	r3, #4
 8007b7e:	68fa      	ldr	r2, [r7, #12]
 8007b80:	4413      	add	r3, r2
 8007b82:	ed93 7a00 	vldr	s14, [r3]
 8007b86:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007b8a:	00db      	lsls	r3, r3, #3
 8007b8c:	3304      	adds	r3, #4
 8007b8e:	68fa      	ldr	r2, [r7, #12]
 8007b90:	4413      	add	r3, r2
 8007b92:	edd3 7a00 	vldr	s15, [r3]
 8007b96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007b9a:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 8007b9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007ba2:	00db      	lsls	r3, r3, #3
 8007ba4:	3304      	adds	r3, #4
 8007ba6:	68fa      	ldr	r2, [r7, #12]
 8007ba8:	4413      	add	r3, r2
 8007baa:	ed93 7a00 	vldr	s14, [r3]
 8007bae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007bb2:	00db      	lsls	r3, r3, #3
 8007bb4:	3304      	adds	r3, #4
 8007bb6:	68fa      	ldr	r2, [r7, #12]
 8007bb8:	4413      	add	r3, r2
 8007bba:	edd3 7a00 	vldr	s15, [r3]
 8007bbe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007bc2:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8007bc6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007bca:	00db      	lsls	r3, r3, #3
 8007bcc:	3304      	adds	r3, #4
 8007bce:	68fa      	ldr	r2, [r7, #12]
 8007bd0:	4413      	add	r3, r2
 8007bd2:	ed93 7a00 	vldr	s14, [r3]
 8007bd6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007bda:	00db      	lsls	r3, r3, #3
 8007bdc:	3304      	adds	r3, #4
 8007bde:	68fa      	ldr	r2, [r7, #12]
 8007be0:	4413      	add	r3, r2
 8007be2:	edd3 7a00 	vldr	s15, [r3]
 8007be6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007bea:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 8007bee:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007bf2:	00db      	lsls	r3, r3, #3
 8007bf4:	3304      	adds	r3, #4
 8007bf6:	68fa      	ldr	r2, [r7, #12]
 8007bf8:	4413      	add	r3, r2
 8007bfa:	ed93 7a00 	vldr	s14, [r3]
 8007bfe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007c02:	00db      	lsls	r3, r3, #3
 8007c04:	3304      	adds	r3, #4
 8007c06:	68fa      	ldr	r2, [r7, #12]
 8007c08:	4413      	add	r3, r2
 8007c0a:	edd3 7a00 	vldr	s15, [r3]
 8007c0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007c12:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8007c16:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007c1a:	00db      	lsls	r3, r3, #3
 8007c1c:	3304      	adds	r3, #4
 8007c1e:	68fa      	ldr	r2, [r7, #12]
 8007c20:	4413      	add	r3, r2
 8007c22:	ed93 7a00 	vldr	s14, [r3]
 8007c26:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007c2a:	00db      	lsls	r3, r3, #3
 8007c2c:	3304      	adds	r3, #4
 8007c2e:	68fa      	ldr	r2, [r7, #12]
 8007c30:	4413      	add	r3, r2
 8007c32:	edd3 7a00 	vldr	s15, [r3]
 8007c36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007c3a:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 8007c3e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007c42:	00db      	lsls	r3, r3, #3
 8007c44:	3304      	adds	r3, #4
 8007c46:	68fa      	ldr	r2, [r7, #12]
 8007c48:	4413      	add	r3, r2
 8007c4a:	ed93 7a00 	vldr	s14, [r3]
 8007c4e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007c52:	00db      	lsls	r3, r3, #3
 8007c54:	3304      	adds	r3, #4
 8007c56:	68fa      	ldr	r2, [r7, #12]
 8007c58:	4413      	add	r3, r2
 8007c5a:	edd3 7a00 	vldr	s15, [r3]
 8007c5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007c62:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         t2 = r1 - s3;
 8007c66:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8007c6a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8007c6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007c72:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         r1 = r1 + s3;
 8007c76:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8007c7a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8007c7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007c82:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s3 = r2 - r4;
 8007c86:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8007c8a:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8007c8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007c92:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         r2 = r2 + r4;
 8007c96:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8007c9a:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8007c9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007ca2:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1 + 1] = r1 + r2;
 8007ca6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007caa:	00db      	lsls	r3, r3, #3
 8007cac:	3304      	adds	r3, #4
 8007cae:	68fa      	ldr	r2, [r7, #12]
 8007cb0:	4413      	add	r3, r2
 8007cb2:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8007cb6:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8007cba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007cbe:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5 + 1] = r1 - r2;
 8007cc2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007cc6:	00db      	lsls	r3, r3, #3
 8007cc8:	3304      	adds	r3, #4
 8007cca:	68fa      	ldr	r2, [r7, #12]
 8007ccc:	4413      	add	r3, r2
 8007cce:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8007cd2:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8007cd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007cda:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3]     = t1 + s3;
 8007cde:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007ce2:	00db      	lsls	r3, r3, #3
 8007ce4:	68fa      	ldr	r2, [r7, #12]
 8007ce6:	4413      	add	r3, r2
 8007ce8:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8007cec:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8007cf0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007cf4:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7]     = t1 - s3;
 8007cf8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007cfc:	00db      	lsls	r3, r3, #3
 8007cfe:	68fa      	ldr	r2, [r7, #12]
 8007d00:	4413      	add	r3, r2
 8007d02:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8007d06:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8007d0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007d0e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3 + 1] = t2 - r3;
 8007d12:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007d16:	00db      	lsls	r3, r3, #3
 8007d18:	3304      	adds	r3, #4
 8007d1a:	68fa      	ldr	r2, [r7, #12]
 8007d1c:	4413      	add	r3, r2
 8007d1e:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8007d22:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8007d26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007d2a:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7 + 1] = t2 + r3;
 8007d2e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007d32:	00db      	lsls	r3, r3, #3
 8007d34:	3304      	adds	r3, #4
 8007d36:	68fa      	ldr	r2, [r7, #12]
 8007d38:	4413      	add	r3, r2
 8007d3a:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8007d3e:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8007d42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007d46:	edc3 7a00 	vstr	s15, [r3]
         r1 = (r6 - r8) * C81;
 8007d4a:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8007d4e:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8007d52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007d56:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8007d5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d5e:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r6 = (r6 + r8) * C81;
 8007d62:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8007d66:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8007d6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007d6e:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8007d72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d76:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r2 = (s6 - s8) * C81;
 8007d7a:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8007d7e:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8007d82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007d86:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8007d8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d8e:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = (s6 + s8) * C81;
 8007d92:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8007d96:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8007d9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007d9e:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8007da2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007da6:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         t1 = r5 - r1;
 8007daa:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8007dae:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8007db2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007db6:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r5 = r5 + r1;
 8007dba:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8007dbe:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8007dc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007dc6:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r8 = r7 - r6;
 8007dca:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8007dce:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8007dd2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007dd6:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         r7 = r7 + r6;
 8007dda:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8007dde:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8007de2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007de6:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         t2 = s5 - r2;
 8007dea:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8007dee:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8007df2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007df6:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         s5 = s5 + r2;
 8007dfa:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8007dfe:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8007e02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007e06:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         s8 = s7 - s6;
 8007e0a:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8007e0e:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8007e12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007e16:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         s7 = s7 + s6;
 8007e1a:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8007e1e:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8007e22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007e26:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         pSrc[2 * i2]     = r5 + s7;
 8007e2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007e2e:	00db      	lsls	r3, r3, #3
 8007e30:	68fa      	ldr	r2, [r7, #12]
 8007e32:	4413      	add	r3, r2
 8007e34:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8007e38:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8007e3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007e40:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8]     = r5 - s7;
 8007e44:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007e48:	00db      	lsls	r3, r3, #3
 8007e4a:	68fa      	ldr	r2, [r7, #12]
 8007e4c:	4413      	add	r3, r2
 8007e4e:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8007e52:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8007e56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007e5a:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6]     = t1 + s8;
 8007e5e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007e62:	00db      	lsls	r3, r3, #3
 8007e64:	68fa      	ldr	r2, [r7, #12]
 8007e66:	4413      	add	r3, r2
 8007e68:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8007e6c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8007e70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007e74:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4]     = t1 - s8;
 8007e78:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007e7c:	00db      	lsls	r3, r3, #3
 8007e7e:	68fa      	ldr	r2, [r7, #12]
 8007e80:	4413      	add	r3, r2
 8007e82:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8007e86:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8007e8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007e8e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i2 + 1] = s5 - r7;
 8007e92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007e96:	00db      	lsls	r3, r3, #3
 8007e98:	3304      	adds	r3, #4
 8007e9a:	68fa      	ldr	r2, [r7, #12]
 8007e9c:	4413      	add	r3, r2
 8007e9e:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8007ea2:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8007ea6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007eaa:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8 + 1] = s5 + r7;
 8007eae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007eb2:	00db      	lsls	r3, r3, #3
 8007eb4:	3304      	adds	r3, #4
 8007eb6:	68fa      	ldr	r2, [r7, #12]
 8007eb8:	4413      	add	r3, r2
 8007eba:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8007ebe:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8007ec2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007ec6:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6 + 1] = t2 - r8;
 8007eca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007ece:	00db      	lsls	r3, r3, #3
 8007ed0:	3304      	adds	r3, #4
 8007ed2:	68fa      	ldr	r2, [r7, #12]
 8007ed4:	4413      	add	r3, r2
 8007ed6:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8007eda:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8007ede:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007ee2:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4 + 1] = t2 + r8;
 8007ee6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007eea:	00db      	lsls	r3, r3, #3
 8007eec:	3304      	adds	r3, #4
 8007eee:	68fa      	ldr	r2, [r7, #12]
 8007ef0:	4413      	add	r3, r2
 8007ef2:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8007ef6:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8007efa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007efe:	edc3 7a00 	vstr	s15, [r3]

         i1 += n1;
 8007f02:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8007f06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007f0a:	4413      	add	r3, r2
 8007f0c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
      } while (i1 < fftLen);
 8007f10:	897b      	ldrh	r3, [r7, #10]
 8007f12:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8007f16:	429a      	cmp	r2, r3
 8007f18:	f4ff ad0a 	bcc.w	8007930 <arm_radix8_butterfly_f32+0x40>

      if (n2 < 8)
 8007f1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f20:	2b07      	cmp	r3, #7
 8007f22:	f240 84e3 	bls.w	80088ec <arm_radix8_butterfly_f32+0xffc>
         break;

      ia1 = 0;
 8007f26:	2300      	movs	r3, #0
 8007f28:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
      j = 1;
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

      do
      {
         /*  index calculation for the coefficients */
         id  = ia1 + twidCoefModifier;
 8007f32:	893b      	ldrh	r3, [r7, #8]
 8007f34:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8007f38:	4413      	add	r3, r2
 8007f3a:	67fb      	str	r3, [r7, #124]	; 0x7c
         ia1 = id;
 8007f3c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007f3e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
         ia2 = ia1 + id;
 8007f42:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8007f46:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007f48:	4413      	add	r3, r2
 8007f4a:	67bb      	str	r3, [r7, #120]	; 0x78
         ia3 = ia2 + id;
 8007f4c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007f4e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007f50:	4413      	add	r3, r2
 8007f52:	677b      	str	r3, [r7, #116]	; 0x74
         ia4 = ia3 + id;
 8007f54:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007f56:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007f58:	4413      	add	r3, r2
 8007f5a:	673b      	str	r3, [r7, #112]	; 0x70
         ia5 = ia4 + id;
 8007f5c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007f5e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007f60:	4413      	add	r3, r2
 8007f62:	66fb      	str	r3, [r7, #108]	; 0x6c
         ia6 = ia5 + id;
 8007f64:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007f66:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007f68:	4413      	add	r3, r2
 8007f6a:	66bb      	str	r3, [r7, #104]	; 0x68
         ia7 = ia6 + id;
 8007f6c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007f6e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007f70:	4413      	add	r3, r2
 8007f72:	667b      	str	r3, [r7, #100]	; 0x64

         co2 = pCoef[2 * ia1];
 8007f74:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007f78:	00db      	lsls	r3, r3, #3
 8007f7a:	687a      	ldr	r2, [r7, #4]
 8007f7c:	4413      	add	r3, r2
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	663b      	str	r3, [r7, #96]	; 0x60
         co3 = pCoef[2 * ia2];
 8007f82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f84:	00db      	lsls	r3, r3, #3
 8007f86:	687a      	ldr	r2, [r7, #4]
 8007f88:	4413      	add	r3, r2
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	65fb      	str	r3, [r7, #92]	; 0x5c
         co4 = pCoef[2 * ia3];
 8007f8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f90:	00db      	lsls	r3, r3, #3
 8007f92:	687a      	ldr	r2, [r7, #4]
 8007f94:	4413      	add	r3, r2
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	65bb      	str	r3, [r7, #88]	; 0x58
         co5 = pCoef[2 * ia4];
 8007f9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007f9c:	00db      	lsls	r3, r3, #3
 8007f9e:	687a      	ldr	r2, [r7, #4]
 8007fa0:	4413      	add	r3, r2
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	657b      	str	r3, [r7, #84]	; 0x54
         co6 = pCoef[2 * ia5];
 8007fa6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fa8:	00db      	lsls	r3, r3, #3
 8007faa:	687a      	ldr	r2, [r7, #4]
 8007fac:	4413      	add	r3, r2
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	653b      	str	r3, [r7, #80]	; 0x50
         co7 = pCoef[2 * ia6];
 8007fb2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007fb4:	00db      	lsls	r3, r3, #3
 8007fb6:	687a      	ldr	r2, [r7, #4]
 8007fb8:	4413      	add	r3, r2
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	64fb      	str	r3, [r7, #76]	; 0x4c
         co8 = pCoef[2 * ia7];
 8007fbe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007fc0:	00db      	lsls	r3, r3, #3
 8007fc2:	687a      	ldr	r2, [r7, #4]
 8007fc4:	4413      	add	r3, r2
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	64bb      	str	r3, [r7, #72]	; 0x48
         si2 = pCoef[2 * ia1 + 1];
 8007fca:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007fce:	00db      	lsls	r3, r3, #3
 8007fd0:	3304      	adds	r3, #4
 8007fd2:	687a      	ldr	r2, [r7, #4]
 8007fd4:	4413      	add	r3, r2
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	647b      	str	r3, [r7, #68]	; 0x44
         si3 = pCoef[2 * ia2 + 1];
 8007fda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007fdc:	00db      	lsls	r3, r3, #3
 8007fde:	3304      	adds	r3, #4
 8007fe0:	687a      	ldr	r2, [r7, #4]
 8007fe2:	4413      	add	r3, r2
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	643b      	str	r3, [r7, #64]	; 0x40
         si4 = pCoef[2 * ia3 + 1];
 8007fe8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007fea:	00db      	lsls	r3, r3, #3
 8007fec:	3304      	adds	r3, #4
 8007fee:	687a      	ldr	r2, [r7, #4]
 8007ff0:	4413      	add	r3, r2
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	63fb      	str	r3, [r7, #60]	; 0x3c
         si5 = pCoef[2 * ia4 + 1];
 8007ff6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ff8:	00db      	lsls	r3, r3, #3
 8007ffa:	3304      	adds	r3, #4
 8007ffc:	687a      	ldr	r2, [r7, #4]
 8007ffe:	4413      	add	r3, r2
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	63bb      	str	r3, [r7, #56]	; 0x38
         si6 = pCoef[2 * ia5 + 1];
 8008004:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008006:	00db      	lsls	r3, r3, #3
 8008008:	3304      	adds	r3, #4
 800800a:	687a      	ldr	r2, [r7, #4]
 800800c:	4413      	add	r3, r2
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	637b      	str	r3, [r7, #52]	; 0x34
         si7 = pCoef[2 * ia6 + 1];
 8008012:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008014:	00db      	lsls	r3, r3, #3
 8008016:	3304      	adds	r3, #4
 8008018:	687a      	ldr	r2, [r7, #4]
 800801a:	4413      	add	r3, r2
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	633b      	str	r3, [r7, #48]	; 0x30
         si8 = pCoef[2 * ia7 + 1];
 8008020:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008022:	00db      	lsls	r3, r3, #3
 8008024:	3304      	adds	r3, #4
 8008026:	687a      	ldr	r2, [r7, #4]
 8008028:	4413      	add	r3, r2
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	62fb      	str	r3, [r7, #44]	; 0x2c

         i1 = j;
 800802e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008032:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

         do
         {
            /*  index calculation for the input */
            i2 = i1 + n2;
 8008036:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800803a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800803e:	4413      	add	r3, r2
 8008040:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
            i3 = i2 + n2;
 8008044:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8008048:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800804c:	4413      	add	r3, r2
 800804e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
            i4 = i3 + n2;
 8008052:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008056:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800805a:	4413      	add	r3, r2
 800805c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
            i5 = i4 + n2;
 8008060:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8008064:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008068:	4413      	add	r3, r2
 800806a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
            i6 = i5 + n2;
 800806e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008072:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008076:	4413      	add	r3, r2
 8008078:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            i7 = i6 + n2;
 800807c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008080:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008084:	4413      	add	r3, r2
 8008086:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
            i8 = i7 + n2;
 800808a:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800808e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008092:	4413      	add	r3, r2
 8008094:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8008098:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800809c:	00db      	lsls	r3, r3, #3
 800809e:	68fa      	ldr	r2, [r7, #12]
 80080a0:	4413      	add	r3, r2
 80080a2:	ed93 7a00 	vldr	s14, [r3]
 80080a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80080aa:	00db      	lsls	r3, r3, #3
 80080ac:	68fa      	ldr	r2, [r7, #12]
 80080ae:	4413      	add	r3, r2
 80080b0:	edd3 7a00 	vldr	s15, [r3]
 80080b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80080b8:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
 80080bc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80080c0:	00db      	lsls	r3, r3, #3
 80080c2:	68fa      	ldr	r2, [r7, #12]
 80080c4:	4413      	add	r3, r2
 80080c6:	ed93 7a00 	vldr	s14, [r3]
 80080ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80080ce:	00db      	lsls	r3, r3, #3
 80080d0:	68fa      	ldr	r2, [r7, #12]
 80080d2:	4413      	add	r3, r2
 80080d4:	edd3 7a00 	vldr	s15, [r3]
 80080d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80080dc:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 80080e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80080e4:	00db      	lsls	r3, r3, #3
 80080e6:	68fa      	ldr	r2, [r7, #12]
 80080e8:	4413      	add	r3, r2
 80080ea:	ed93 7a00 	vldr	s14, [r3]
 80080ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80080f2:	00db      	lsls	r3, r3, #3
 80080f4:	68fa      	ldr	r2, [r7, #12]
 80080f6:	4413      	add	r3, r2
 80080f8:	edd3 7a00 	vldr	s15, [r3]
 80080fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008100:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
 8008104:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008108:	00db      	lsls	r3, r3, #3
 800810a:	68fa      	ldr	r2, [r7, #12]
 800810c:	4413      	add	r3, r2
 800810e:	ed93 7a00 	vldr	s14, [r3]
 8008112:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008116:	00db      	lsls	r3, r3, #3
 8008118:	68fa      	ldr	r2, [r7, #12]
 800811a:	4413      	add	r3, r2
 800811c:	edd3 7a00 	vldr	s15, [r3]
 8008120:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008124:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8008128:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800812c:	00db      	lsls	r3, r3, #3
 800812e:	68fa      	ldr	r2, [r7, #12]
 8008130:	4413      	add	r3, r2
 8008132:	ed93 7a00 	vldr	s14, [r3]
 8008136:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800813a:	00db      	lsls	r3, r3, #3
 800813c:	68fa      	ldr	r2, [r7, #12]
 800813e:	4413      	add	r3, r2
 8008140:	edd3 7a00 	vldr	s15, [r3]
 8008144:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008148:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
 800814c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008150:	00db      	lsls	r3, r3, #3
 8008152:	68fa      	ldr	r2, [r7, #12]
 8008154:	4413      	add	r3, r2
 8008156:	ed93 7a00 	vldr	s14, [r3]
 800815a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800815e:	00db      	lsls	r3, r3, #3
 8008160:	68fa      	ldr	r2, [r7, #12]
 8008162:	4413      	add	r3, r2
 8008164:	edd3 7a00 	vldr	s15, [r3]
 8008168:	ee77 7a67 	vsub.f32	s15, s14, s15
 800816c:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8008170:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008174:	00db      	lsls	r3, r3, #3
 8008176:	68fa      	ldr	r2, [r7, #12]
 8008178:	4413      	add	r3, r2
 800817a:	ed93 7a00 	vldr	s14, [r3]
 800817e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008182:	00db      	lsls	r3, r3, #3
 8008184:	68fa      	ldr	r2, [r7, #12]
 8008186:	4413      	add	r3, r2
 8008188:	edd3 7a00 	vldr	s15, [r3]
 800818c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008190:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
 8008194:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008198:	00db      	lsls	r3, r3, #3
 800819a:	68fa      	ldr	r2, [r7, #12]
 800819c:	4413      	add	r3, r2
 800819e:	ed93 7a00 	vldr	s14, [r3]
 80081a2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80081a6:	00db      	lsls	r3, r3, #3
 80081a8:	68fa      	ldr	r2, [r7, #12]
 80081aa:	4413      	add	r3, r2
 80081ac:	edd3 7a00 	vldr	s15, [r3]
 80081b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80081b4:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            t1 = r1 - r3;
 80081b8:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80081bc:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80081c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80081c4:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r1 = r1 + r3;
 80081c8:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80081cc:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80081d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80081d4:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r3 = r2 - r4;
 80081d8:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 80081dc:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80081e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80081e4:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r2 = r2 + r4;
 80081e8:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 80081ec:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80081f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80081f4:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            pSrc[2 * i1] = r1 + r2;
 80081f8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80081fc:	00db      	lsls	r3, r3, #3
 80081fe:	68fa      	ldr	r2, [r7, #12]
 8008200:	4413      	add	r3, r2
 8008202:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8008206:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800820a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800820e:	edc3 7a00 	vstr	s15, [r3]
            r2 = r1 - r2;
 8008212:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8008216:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800821a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800821e:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8008222:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008226:	00db      	lsls	r3, r3, #3
 8008228:	3304      	adds	r3, #4
 800822a:	68fa      	ldr	r2, [r7, #12]
 800822c:	4413      	add	r3, r2
 800822e:	ed93 7a00 	vldr	s14, [r3]
 8008232:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008236:	00db      	lsls	r3, r3, #3
 8008238:	3304      	adds	r3, #4
 800823a:	68fa      	ldr	r2, [r7, #12]
 800823c:	4413      	add	r3, r2
 800823e:	edd3 7a00 	vldr	s15, [r3]
 8008242:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008246:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 800824a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800824e:	00db      	lsls	r3, r3, #3
 8008250:	3304      	adds	r3, #4
 8008252:	68fa      	ldr	r2, [r7, #12]
 8008254:	4413      	add	r3, r2
 8008256:	ed93 7a00 	vldr	s14, [r3]
 800825a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800825e:	00db      	lsls	r3, r3, #3
 8008260:	3304      	adds	r3, #4
 8008262:	68fa      	ldr	r2, [r7, #12]
 8008264:	4413      	add	r3, r2
 8008266:	edd3 7a00 	vldr	s15, [r3]
 800826a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800826e:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8008272:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008276:	00db      	lsls	r3, r3, #3
 8008278:	3304      	adds	r3, #4
 800827a:	68fa      	ldr	r2, [r7, #12]
 800827c:	4413      	add	r3, r2
 800827e:	ed93 7a00 	vldr	s14, [r3]
 8008282:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008286:	00db      	lsls	r3, r3, #3
 8008288:	3304      	adds	r3, #4
 800828a:	68fa      	ldr	r2, [r7, #12]
 800828c:	4413      	add	r3, r2
 800828e:	edd3 7a00 	vldr	s15, [r3]
 8008292:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008296:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 800829a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800829e:	00db      	lsls	r3, r3, #3
 80082a0:	3304      	adds	r3, #4
 80082a2:	68fa      	ldr	r2, [r7, #12]
 80082a4:	4413      	add	r3, r2
 80082a6:	ed93 7a00 	vldr	s14, [r3]
 80082aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80082ae:	00db      	lsls	r3, r3, #3
 80082b0:	3304      	adds	r3, #4
 80082b2:	68fa      	ldr	r2, [r7, #12]
 80082b4:	4413      	add	r3, r2
 80082b6:	edd3 7a00 	vldr	s15, [r3]
 80082ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80082be:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 80082c2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80082c6:	00db      	lsls	r3, r3, #3
 80082c8:	3304      	adds	r3, #4
 80082ca:	68fa      	ldr	r2, [r7, #12]
 80082cc:	4413      	add	r3, r2
 80082ce:	ed93 7a00 	vldr	s14, [r3]
 80082d2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80082d6:	00db      	lsls	r3, r3, #3
 80082d8:	3304      	adds	r3, #4
 80082da:	68fa      	ldr	r2, [r7, #12]
 80082dc:	4413      	add	r3, r2
 80082de:	edd3 7a00 	vldr	s15, [r3]
 80082e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80082e6:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 80082ea:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80082ee:	00db      	lsls	r3, r3, #3
 80082f0:	3304      	adds	r3, #4
 80082f2:	68fa      	ldr	r2, [r7, #12]
 80082f4:	4413      	add	r3, r2
 80082f6:	ed93 7a00 	vldr	s14, [r3]
 80082fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80082fe:	00db      	lsls	r3, r3, #3
 8008300:	3304      	adds	r3, #4
 8008302:	68fa      	ldr	r2, [r7, #12]
 8008304:	4413      	add	r3, r2
 8008306:	edd3 7a00 	vldr	s15, [r3]
 800830a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800830e:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8008312:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008316:	00db      	lsls	r3, r3, #3
 8008318:	3304      	adds	r3, #4
 800831a:	68fa      	ldr	r2, [r7, #12]
 800831c:	4413      	add	r3, r2
 800831e:	ed93 7a00 	vldr	s14, [r3]
 8008322:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008326:	00db      	lsls	r3, r3, #3
 8008328:	3304      	adds	r3, #4
 800832a:	68fa      	ldr	r2, [r7, #12]
 800832c:	4413      	add	r3, r2
 800832e:	edd3 7a00 	vldr	s15, [r3]
 8008332:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008336:	edc7 7a08 	vstr	s15, [r7, #32]
            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 800833a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800833e:	00db      	lsls	r3, r3, #3
 8008340:	3304      	adds	r3, #4
 8008342:	68fa      	ldr	r2, [r7, #12]
 8008344:	4413      	add	r3, r2
 8008346:	ed93 7a00 	vldr	s14, [r3]
 800834a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800834e:	00db      	lsls	r3, r3, #3
 8008350:	3304      	adds	r3, #4
 8008352:	68fa      	ldr	r2, [r7, #12]
 8008354:	4413      	add	r3, r2
 8008356:	edd3 7a00 	vldr	s15, [r3]
 800835a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800835e:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            t2 = s1 - s3;
 8008362:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8008366:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800836a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800836e:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s1 = s1 + s3;
 8008372:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8008376:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800837a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800837e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s3 = s2 - s4;
 8008382:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8008386:	edd7 7a08 	vldr	s15, [r7, #32]
 800838a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800838e:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s2 = s2 + s4;
 8008392:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8008396:	edd7 7a08 	vldr	s15, [r7, #32]
 800839a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800839e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            r1 = t1 + s3;
 80083a2:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80083a6:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80083aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80083ae:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            t1 = t1 - s3;
 80083b2:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80083b6:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80083ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80083be:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            pSrc[2 * i1 + 1] = s1 + s2;
 80083c2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80083c6:	00db      	lsls	r3, r3, #3
 80083c8:	3304      	adds	r3, #4
 80083ca:	68fa      	ldr	r2, [r7, #12]
 80083cc:	4413      	add	r3, r2
 80083ce:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80083d2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80083d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80083da:	edc3 7a00 	vstr	s15, [r3]
            s2 = s1 - s2;
 80083de:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80083e2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80083e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80083ea:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s1 = t2 - r3;
 80083ee:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80083f2:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80083f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80083fa:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            t2 = t2 + r3;
 80083fe:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8008402:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8008406:	ee77 7a27 	vadd.f32	s15, s14, s15
 800840a:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co5 * r2;
 800840e:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8008412:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8008416:	ee67 7a27 	vmul.f32	s15, s14, s15
 800841a:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si5 * s2;
 800841e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8008422:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008426:	ee67 7a27 	vmul.f32	s15, s14, s15
 800842a:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co5 * s2;
 800842e:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8008432:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008436:	ee67 7a27 	vmul.f32	s15, s14, s15
 800843a:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si5 * r2;
 800843e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8008442:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8008446:	ee67 7a27 	vmul.f32	s15, s14, s15
 800844a:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i5]     = p1 + p2;
 800844e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008452:	00db      	lsls	r3, r3, #3
 8008454:	68fa      	ldr	r2, [r7, #12]
 8008456:	4413      	add	r3, r2
 8008458:	ed97 7a07 	vldr	s14, [r7, #28]
 800845c:	edd7 7a06 	vldr	s15, [r7, #24]
 8008460:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008464:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i5 + 1] = p3 - p4;
 8008468:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800846c:	00db      	lsls	r3, r3, #3
 800846e:	3304      	adds	r3, #4
 8008470:	68fa      	ldr	r2, [r7, #12]
 8008472:	4413      	add	r3, r2
 8008474:	ed97 7a05 	vldr	s14, [r7, #20]
 8008478:	edd7 7a04 	vldr	s15, [r7, #16]
 800847c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008480:	edc3 7a00 	vstr	s15, [r3]
            p1 = co3 * r1;
 8008484:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8008488:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800848c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008490:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si3 * s1;
 8008494:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8008498:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800849c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084a0:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co3 * s1;
 80084a4:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80084a8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80084ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084b0:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si3 * r1;
 80084b4:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80084b8:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80084bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084c0:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i3]     = p1 + p2;
 80084c4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80084c8:	00db      	lsls	r3, r3, #3
 80084ca:	68fa      	ldr	r2, [r7, #12]
 80084cc:	4413      	add	r3, r2
 80084ce:	ed97 7a07 	vldr	s14, [r7, #28]
 80084d2:	edd7 7a06 	vldr	s15, [r7, #24]
 80084d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80084da:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i3 + 1] = p3 - p4;
 80084de:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80084e2:	00db      	lsls	r3, r3, #3
 80084e4:	3304      	adds	r3, #4
 80084e6:	68fa      	ldr	r2, [r7, #12]
 80084e8:	4413      	add	r3, r2
 80084ea:	ed97 7a05 	vldr	s14, [r7, #20]
 80084ee:	edd7 7a04 	vldr	s15, [r7, #16]
 80084f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80084f6:	edc3 7a00 	vstr	s15, [r3]
            p1 = co7 * t1;
 80084fa:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80084fe:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8008502:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008506:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si7 * t2;
 800850a:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800850e:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8008512:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008516:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co7 * t2;
 800851a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800851e:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8008522:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008526:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si7 * t1;
 800852a:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800852e:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8008532:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008536:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i7]     = p1 + p2;
 800853a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800853e:	00db      	lsls	r3, r3, #3
 8008540:	68fa      	ldr	r2, [r7, #12]
 8008542:	4413      	add	r3, r2
 8008544:	ed97 7a07 	vldr	s14, [r7, #28]
 8008548:	edd7 7a06 	vldr	s15, [r7, #24]
 800854c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008550:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i7 + 1] = p3 - p4;
 8008554:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008558:	00db      	lsls	r3, r3, #3
 800855a:	3304      	adds	r3, #4
 800855c:	68fa      	ldr	r2, [r7, #12]
 800855e:	4413      	add	r3, r2
 8008560:	ed97 7a05 	vldr	s14, [r7, #20]
 8008564:	edd7 7a04 	vldr	s15, [r7, #16]
 8008568:	ee77 7a67 	vsub.f32	s15, s14, s15
 800856c:	edc3 7a00 	vstr	s15, [r3]
            r1 = (r6 - r8) * C81;
 8008570:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8008574:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8008578:	ee77 7a67 	vsub.f32	s15, s14, s15
 800857c:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8008580:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008584:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r6 = (r6 + r8) * C81;
 8008588:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800858c:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8008590:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008594:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8008598:	ee67 7a27 	vmul.f32	s15, s14, s15
 800859c:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            s1 = (s6 - s8) * C81;
 80085a0:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 80085a4:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80085a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80085ac:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 80085b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085b4:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s6 = (s6 + s8) * C81;
 80085b8:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 80085bc:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80085c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80085c4:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 80085c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085cc:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t1 = r5 - r1;
 80085d0:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80085d4:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80085d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80085dc:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r5 = r5 + r1;
 80085e0:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80085e4:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80085e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80085ec:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r8 = r7 - r6;
 80085f0:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 80085f4:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80085f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80085fc:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            r7 = r7 + r6;
 8008600:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8008604:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8008608:	ee77 7a27 	vadd.f32	s15, s14, s15
 800860c:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            t2 = s5 - s1;
 8008610:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8008614:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008618:	ee77 7a67 	vsub.f32	s15, s14, s15
 800861c:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s5 = s5 + s1;
 8008620:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8008624:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008628:	ee77 7a27 	vadd.f32	s15, s14, s15
 800862c:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s8 = s7 - s6;
 8008630:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8008634:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8008638:	ee77 7a67 	vsub.f32	s15, s14, s15
 800863c:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            s7 = s7 + s6;
 8008640:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8008644:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8008648:	ee77 7a27 	vadd.f32	s15, s14, s15
 800864c:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            r1 = r5 + s7;
 8008650:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8008654:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8008658:	ee77 7a27 	vadd.f32	s15, s14, s15
 800865c:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = r5 - s7;
 8008660:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8008664:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8008668:	ee77 7a67 	vsub.f32	s15, s14, s15
 800866c:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r6 = t1 + s8;
 8008670:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8008674:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8008678:	ee77 7a27 	vadd.f32	s15, s14, s15
 800867c:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            t1 = t1 - s8;
 8008680:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8008684:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8008688:	ee77 7a67 	vsub.f32	s15, s14, s15
 800868c:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            s1 = s5 - r7;
 8008690:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8008694:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8008698:	ee77 7a67 	vsub.f32	s15, s14, s15
 800869c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = s5 + r7;
 80086a0:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80086a4:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80086a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80086ac:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s6 = t2 - r8;
 80086b0:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80086b4:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80086b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80086bc:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t2 = t2 + r8;
 80086c0:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80086c4:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80086c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80086cc:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co2 * r1;
 80086d0:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80086d4:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80086d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086dc:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si2 * s1;
 80086e0:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80086e4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80086e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086ec:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co2 * s1;
 80086f0:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80086f4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80086f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086fc:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si2 * r1;
 8008700:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8008704:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8008708:	ee67 7a27 	vmul.f32	s15, s14, s15
 800870c:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i2]     = p1 + p2;
 8008710:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008714:	00db      	lsls	r3, r3, #3
 8008716:	68fa      	ldr	r2, [r7, #12]
 8008718:	4413      	add	r3, r2
 800871a:	ed97 7a07 	vldr	s14, [r7, #28]
 800871e:	edd7 7a06 	vldr	s15, [r7, #24]
 8008722:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008726:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i2 + 1] = p3 - p4;
 800872a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800872e:	00db      	lsls	r3, r3, #3
 8008730:	3304      	adds	r3, #4
 8008732:	68fa      	ldr	r2, [r7, #12]
 8008734:	4413      	add	r3, r2
 8008736:	ed97 7a05 	vldr	s14, [r7, #20]
 800873a:	edd7 7a04 	vldr	s15, [r7, #16]
 800873e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008742:	edc3 7a00 	vstr	s15, [r3]
            p1 = co8 * r5;
 8008746:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800874a:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800874e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008752:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si8 * s5;
 8008756:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800875a:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800875e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008762:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co8 * s5;
 8008766:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800876a:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800876e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008772:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si8 * r5;
 8008776:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800877a:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800877e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008782:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i8]     = p1 + p2;
 8008786:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800878a:	00db      	lsls	r3, r3, #3
 800878c:	68fa      	ldr	r2, [r7, #12]
 800878e:	4413      	add	r3, r2
 8008790:	ed97 7a07 	vldr	s14, [r7, #28]
 8008794:	edd7 7a06 	vldr	s15, [r7, #24]
 8008798:	ee77 7a27 	vadd.f32	s15, s14, s15
 800879c:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i8 + 1] = p3 - p4;
 80087a0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80087a4:	00db      	lsls	r3, r3, #3
 80087a6:	3304      	adds	r3, #4
 80087a8:	68fa      	ldr	r2, [r7, #12]
 80087aa:	4413      	add	r3, r2
 80087ac:	ed97 7a05 	vldr	s14, [r7, #20]
 80087b0:	edd7 7a04 	vldr	s15, [r7, #16]
 80087b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80087b8:	edc3 7a00 	vstr	s15, [r3]
            p1 = co6 * r6;
 80087bc:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80087c0:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80087c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087c8:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si6 * s6;
 80087cc:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80087d0:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80087d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087d8:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co6 * s6;
 80087dc:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80087e0:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80087e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087e8:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si6 * r6;
 80087ec:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80087f0:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80087f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087f8:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i6]     = p1 + p2;
 80087fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008800:	00db      	lsls	r3, r3, #3
 8008802:	68fa      	ldr	r2, [r7, #12]
 8008804:	4413      	add	r3, r2
 8008806:	ed97 7a07 	vldr	s14, [r7, #28]
 800880a:	edd7 7a06 	vldr	s15, [r7, #24]
 800880e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008812:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i6 + 1] = p3 - p4;
 8008816:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800881a:	00db      	lsls	r3, r3, #3
 800881c:	3304      	adds	r3, #4
 800881e:	68fa      	ldr	r2, [r7, #12]
 8008820:	4413      	add	r3, r2
 8008822:	ed97 7a05 	vldr	s14, [r7, #20]
 8008826:	edd7 7a04 	vldr	s15, [r7, #16]
 800882a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800882e:	edc3 7a00 	vstr	s15, [r3]
            p1 = co4 * t1;
 8008832:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8008836:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800883a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800883e:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si4 * t2;
 8008842:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8008846:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800884a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800884e:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co4 * t2;
 8008852:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8008856:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800885a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800885e:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si4 * t1;
 8008862:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8008866:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800886a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800886e:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i4]     = p1 + p2;
 8008872:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008876:	00db      	lsls	r3, r3, #3
 8008878:	68fa      	ldr	r2, [r7, #12]
 800887a:	4413      	add	r3, r2
 800887c:	ed97 7a07 	vldr	s14, [r7, #28]
 8008880:	edd7 7a06 	vldr	s15, [r7, #24]
 8008884:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008888:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i4 + 1] = p3 - p4;
 800888c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008890:	00db      	lsls	r3, r3, #3
 8008892:	3304      	adds	r3, #4
 8008894:	68fa      	ldr	r2, [r7, #12]
 8008896:	4413      	add	r3, r2
 8008898:	ed97 7a05 	vldr	s14, [r7, #20]
 800889c:	edd7 7a04 	vldr	s15, [r7, #16]
 80088a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80088a4:	edc3 7a00 	vstr	s15, [r3]

            i1 += n1;
 80088a8:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80088ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80088b0:	4413      	add	r3, r2
 80088b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
         } while (i1 < fftLen);
 80088b6:	897b      	ldrh	r3, [r7, #10]
 80088b8:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80088bc:	429a      	cmp	r2, r3
 80088be:	f4ff abba 	bcc.w	8008036 <arm_radix8_butterfly_f32+0x746>

         j++;
 80088c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80088c6:	3301      	adds	r3, #1
 80088c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      } while (j < n2);
 80088cc:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80088d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088d4:	429a      	cmp	r2, r3
 80088d6:	f4ff ab2c 	bcc.w	8007f32 <arm_radix8_butterfly_f32+0x642>

      twidCoefModifier <<= 3;
 80088da:	893b      	ldrh	r3, [r7, #8]
 80088dc:	00db      	lsls	r3, r3, #3
 80088de:	813b      	strh	r3, [r7, #8]
   } while (n2 > 7);
 80088e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088e4:	2b07      	cmp	r3, #7
 80088e6:	f63f a813 	bhi.w	8007910 <arm_radix8_butterfly_f32+0x20>
}
 80088ea:	e000      	b.n	80088ee <arm_radix8_butterfly_f32+0xffe>
         break;
 80088ec:	bf00      	nop
}
 80088ee:	bf00      	nop
 80088f0:	37f4      	adds	r7, #244	; 0xf4
 80088f2:	46bd      	mov	sp, r7
 80088f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f8:	4770      	bx	lr
 80088fa:	bf00      	nop

080088fc <stage_rfft_f32>:
#else
void stage_rfft_f32(
  const arm_rfft_fast_instance_f32 * S,
        float32_t * p,
        float32_t * pOut)
{
 80088fc:	b480      	push	{r7}
 80088fe:	b095      	sub	sp, #84	; 0x54
 8008900:	af00      	add	r7, sp, #0
 8008902:	60f8      	str	r0, [r7, #12]
 8008904:	60b9      	str	r1, [r7, #8]
 8008906:	607a      	str	r2, [r7, #4]
        int32_t  k;                                /* Loop Counter */
        float32_t twR, twI;                         /* RFFT Twiddle coefficients */
  const float32_t * pCoeff = S->pTwiddleRFFT;       /* Points to RFFT Twiddle factors */
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	695b      	ldr	r3, [r3, #20]
 800890c:	64bb      	str	r3, [r7, #72]	; 0x48
        float32_t *pA = p;                          /* increasing pointer */
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	647b      	str	r3, [r7, #68]	; 0x44
        float32_t *pB = p;                          /* decreasing pointer */
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	643b      	str	r3, [r7, #64]	; 0x40
        float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
        float32_t t1a, t1b;                         /* temporary variables */
        float32_t p0, p1, p2, p3;                   /* temporary variables */


   k = (S->Sint).fftLen - 1;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	881b      	ldrh	r3, [r3, #0]
 800891a:	3b01      	subs	r3, #1
 800891c:	64fb      	str	r3, [r7, #76]	; 0x4c

   /* Pack first and last sample of the frequency domain together */

   xBR = pB[0];
 800891e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	63fb      	str	r3, [r7, #60]	; 0x3c
   xBI = pB[1];
 8008924:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008926:	685b      	ldr	r3, [r3, #4]
 8008928:	63bb      	str	r3, [r7, #56]	; 0x38
   xAR = pA[0];
 800892a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	637b      	str	r3, [r7, #52]	; 0x34
   xAI = pA[1];
 8008930:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008932:	685b      	ldr	r3, [r3, #4]
 8008934:	633b      	str	r3, [r7, #48]	; 0x30

   twR = *pCoeff++ ;
 8008936:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008938:	1d1a      	adds	r2, r3, #4
 800893a:	64ba      	str	r2, [r7, #72]	; 0x48
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	62fb      	str	r3, [r7, #44]	; 0x2c
   twI = *pCoeff++ ;
 8008940:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008942:	1d1a      	adds	r2, r3, #4
 8008944:	64ba      	str	r2, [r7, #72]	; 0x48
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	62bb      	str	r3, [r7, #40]	; 0x28


   // U1 = XA(1) + XB(1); % It is real
   t1a = xBR + xAR  ;
 800894a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800894e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8008952:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008956:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

   // U2 = XB(1) - XA(1); % It is imaginary
   t1b = xBI + xAI  ;
 800895a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800895e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8008962:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008966:	edc7 7a08 	vstr	s15, [r7, #32]

   // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
   // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
   *pOut++ = 0.5f * ( t1a + t1b );
 800896a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800896e:	edd7 7a08 	vldr	s15, [r7, #32]
 8008972:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	1d1a      	adds	r2, r3, #4
 800897a:	607a      	str	r2, [r7, #4]
 800897c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8008980:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008984:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( t1a - t1b );
 8008988:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800898c:	edd7 7a08 	vldr	s15, [r7, #32]
 8008990:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	1d1a      	adds	r2, r3, #4
 8008998:	607a      	str	r2, [r7, #4]
 800899a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800899e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80089a2:	edc3 7a00 	vstr	s15, [r3]

   // XA(1) = 1/2*( U1 - imag(U2) +  i*( U1 +imag(U2) ));
   pB  = p + 2*k;
 80089a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089a8:	00db      	lsls	r3, r3, #3
 80089aa:	68ba      	ldr	r2, [r7, #8]
 80089ac:	4413      	add	r3, r2
 80089ae:	643b      	str	r3, [r7, #64]	; 0x40
   pA += 2;
 80089b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089b2:	3308      	adds	r3, #8
 80089b4:	647b      	str	r3, [r7, #68]	; 0x44
         end
         XA(1) = 1/2* (XA(1) + XB(1) + TW(1) * (XB(1) - XA(1))) + i*( 1/2*( XA(1) + XB(1) + i*( XA(1) - XB(1))));
         X = XA;
      */

      xBI = pB[1];
 80089b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089b8:	685b      	ldr	r3, [r3, #4]
 80089ba:	63bb      	str	r3, [r7, #56]	; 0x38
      xBR = pB[0];
 80089bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	63fb      	str	r3, [r7, #60]	; 0x3c
      xAR = pA[0];
 80089c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	637b      	str	r3, [r7, #52]	; 0x34
      xAI = pA[1];
 80089c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089ca:	685b      	ldr	r3, [r3, #4]
 80089cc:	633b      	str	r3, [r7, #48]	; 0x30

      twR = *pCoeff++;
 80089ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80089d0:	1d1a      	adds	r2, r3, #4
 80089d2:	64ba      	str	r2, [r7, #72]	; 0x48
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	62fb      	str	r3, [r7, #44]	; 0x2c
      twI = *pCoeff++;
 80089d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80089da:	1d1a      	adds	r2, r3, #4
 80089dc:	64ba      	str	r2, [r7, #72]	; 0x48
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	62bb      	str	r3, [r7, #40]	; 0x28

      t1a = xBR - xAR ;
 80089e2:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80089e6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80089ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80089ee:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t1b = xBI + xAI ;
 80089f2:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80089f6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80089fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80089fe:	edc7 7a08 	vstr	s15, [r7, #32]

      // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
      // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
      p0 = twR * t1a;
 8008a02:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8008a06:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008a0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a0e:	edc7 7a07 	vstr	s15, [r7, #28]
      p1 = twI * t1a;
 8008a12:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8008a16:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008a1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a1e:	edc7 7a06 	vstr	s15, [r7, #24]
      p2 = twR * t1b;
 8008a22:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8008a26:	edd7 7a08 	vldr	s15, [r7, #32]
 8008a2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a2e:	edc7 7a05 	vstr	s15, [r7, #20]
      p3 = twI * t1b;
 8008a32:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8008a36:	edd7 7a08 	vldr	s15, [r7, #32]
 8008a3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a3e:	edc7 7a04 	vstr	s15, [r7, #16]

      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
 8008a42:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8008a46:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8008a4a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008a4e:	edd7 7a07 	vldr	s15, [r7, #28]
 8008a52:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008a56:	edd7 7a04 	vldr	s15, [r7, #16]
 8008a5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	1d1a      	adds	r2, r3, #4
 8008a62:	607a      	str	r2, [r7, #4]
 8008a64:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8008a68:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008a6c:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
 8008a70:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8008a74:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8008a78:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008a7c:	edd7 7a06 	vldr	s15, [r7, #24]
 8008a80:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008a84:	edd7 7a05 	vldr	s15, [r7, #20]
 8008a88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	1d1a      	adds	r2, r3, #4
 8008a90:	607a      	str	r2, [r7, #4]
 8008a92:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8008a96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008a9a:	edc3 7a00 	vstr	s15, [r3]


      pA += 2;
 8008a9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008aa0:	3308      	adds	r3, #8
 8008aa2:	647b      	str	r3, [r7, #68]	; 0x44
      pB -= 2;
 8008aa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008aa6:	3b08      	subs	r3, #8
 8008aa8:	643b      	str	r3, [r7, #64]	; 0x40
      k--;
 8008aaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008aac:	3b01      	subs	r3, #1
 8008aae:	64fb      	str	r3, [r7, #76]	; 0x4c
   } while (k > 0);
 8008ab0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	f73f af7f 	bgt.w	80089b6 <stage_rfft_f32+0xba>
}
 8008ab8:	bf00      	nop
 8008aba:	bf00      	nop
 8008abc:	3754      	adds	r7, #84	; 0x54
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac4:	4770      	bx	lr

08008ac6 <merge_rfft_f32>:
/* Prepares data for inverse cfft */
void merge_rfft_f32(
  const arm_rfft_fast_instance_f32 * S,
        float32_t * p,
        float32_t * pOut)
{
 8008ac6:	b480      	push	{r7}
 8008ac8:	b095      	sub	sp, #84	; 0x54
 8008aca:	af00      	add	r7, sp, #0
 8008acc:	60f8      	str	r0, [r7, #12]
 8008ace:	60b9      	str	r1, [r7, #8]
 8008ad0:	607a      	str	r2, [r7, #4]
        int32_t  k;                                /* Loop Counter */
        float32_t twR, twI;                         /* RFFT Twiddle coefficients */
  const float32_t *pCoeff = S->pTwiddleRFFT;        /* Points to RFFT Twiddle factors */
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	695b      	ldr	r3, [r3, #20]
 8008ad6:	64bb      	str	r3, [r7, #72]	; 0x48
        float32_t *pA = p;                          /* increasing pointer */
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	647b      	str	r3, [r7, #68]	; 0x44
        float32_t *pB = p;                          /* decreasing pointer */
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	643b      	str	r3, [r7, #64]	; 0x40
        float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
        float32_t t1a, t1b, r, s, t, u;             /* temporary variables */

   k = (S->Sint).fftLen - 1;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	881b      	ldrh	r3, [r3, #0]
 8008ae4:	3b01      	subs	r3, #1
 8008ae6:	64fb      	str	r3, [r7, #76]	; 0x4c

   xAR = pA[0];
 8008ae8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	63fb      	str	r3, [r7, #60]	; 0x3c
   xAI = pA[1];
 8008aee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008af0:	685b      	ldr	r3, [r3, #4]
 8008af2:	63bb      	str	r3, [r7, #56]	; 0x38

   pCoeff += 2 ;
 8008af4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008af6:	3308      	adds	r3, #8
 8008af8:	64bb      	str	r3, [r7, #72]	; 0x48

   *pOut++ = 0.5f * ( xAR + xAI );
 8008afa:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8008afe:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8008b02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	1d1a      	adds	r2, r3, #4
 8008b0a:	607a      	str	r2, [r7, #4]
 8008b0c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8008b10:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008b14:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( xAR - xAI );
 8008b18:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8008b1c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8008b20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	1d1a      	adds	r2, r3, #4
 8008b28:	607a      	str	r2, [r7, #4]
 8008b2a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8008b2e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008b32:	edc3 7a00 	vstr	s15, [r3]

   pB  =  p + 2*k ;
 8008b36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b38:	00db      	lsls	r3, r3, #3
 8008b3a:	68ba      	ldr	r2, [r7, #8]
 8008b3c:	4413      	add	r3, r2
 8008b3e:	643b      	str	r3, [r7, #64]	; 0x40
   pA +=  2	   ;
 8008b40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b42:	3308      	adds	r3, #8
 8008b44:	647b      	str	r3, [r7, #68]	; 0x44

   while (k > 0)
 8008b46:	e07c      	b.n	8008c42 <merge_rfft_f32+0x17c>
   {
      /* G is half of the frequency complex spectrum */
      //for k = 2:N
      //    Xk(k) = 1/2 * (G(k) + conj(G(N-k+2)) + Tw(k)*( G(k) - conj(G(N-k+2))));
      xBI =   pB[1]    ;
 8008b48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b4a:	685b      	ldr	r3, [r3, #4]
 8008b4c:	637b      	str	r3, [r7, #52]	; 0x34
      xBR =   pB[0]    ;
 8008b4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	633b      	str	r3, [r7, #48]	; 0x30
      xAR =  pA[0];
 8008b54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	63fb      	str	r3, [r7, #60]	; 0x3c
      xAI =  pA[1];
 8008b5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b5c:	685b      	ldr	r3, [r3, #4]
 8008b5e:	63bb      	str	r3, [r7, #56]	; 0x38

      twR = *pCoeff++;
 8008b60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b62:	1d1a      	adds	r2, r3, #4
 8008b64:	64ba      	str	r2, [r7, #72]	; 0x48
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	62fb      	str	r3, [r7, #44]	; 0x2c
      twI = *pCoeff++;
 8008b6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b6c:	1d1a      	adds	r2, r3, #4
 8008b6e:	64ba      	str	r2, [r7, #72]	; 0x48
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	62bb      	str	r3, [r7, #40]	; 0x28

      t1a = xAR - xBR ;
 8008b74:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8008b78:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8008b7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008b80:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t1b = xAI + xBI ;
 8008b84:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8008b88:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8008b8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008b90:	edc7 7a08 	vstr	s15, [r7, #32]

      r = twR * t1a;
 8008b94:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8008b98:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008b9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ba0:	edc7 7a07 	vstr	s15, [r7, #28]
      s = twI * t1b;
 8008ba4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8008ba8:	edd7 7a08 	vldr	s15, [r7, #32]
 8008bac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bb0:	edc7 7a06 	vstr	s15, [r7, #24]
      t = twI * t1a;
 8008bb4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8008bb8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008bbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bc0:	edc7 7a05 	vstr	s15, [r7, #20]
      u = twR * t1b;
 8008bc4:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8008bc8:	edd7 7a08 	vldr	s15, [r7, #32]
 8008bcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bd0:	edc7 7a04 	vstr	s15, [r7, #16]

      // real(tw * (xA - xB)) = twR * (xAR - xBR) - twI * (xAI - xBI);
      // imag(tw * (xA - xB)) = twI * (xAR - xBR) + twR * (xAI - xBI);
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
 8008bd4:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8008bd8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8008bdc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008be0:	edd7 7a07 	vldr	s15, [r7, #28]
 8008be4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008be8:	edd7 7a06 	vldr	s15, [r7, #24]
 8008bec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	1d1a      	adds	r2, r3, #4
 8008bf4:	607a      	str	r2, [r7, #4]
 8008bf6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8008bfa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008bfe:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
 8008c02:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8008c06:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8008c0a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008c0e:	edd7 7a05 	vldr	s15, [r7, #20]
 8008c12:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008c16:	edd7 7a04 	vldr	s15, [r7, #16]
 8008c1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	1d1a      	adds	r2, r3, #4
 8008c22:	607a      	str	r2, [r7, #4]
 8008c24:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8008c28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008c2c:	edc3 7a00 	vstr	s15, [r3]

      pA += 2;
 8008c30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c32:	3308      	adds	r3, #8
 8008c34:	647b      	str	r3, [r7, #68]	; 0x44
      pB -= 2;
 8008c36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c38:	3b08      	subs	r3, #8
 8008c3a:	643b      	str	r3, [r7, #64]	; 0x40
      k--;
 8008c3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c3e:	3b01      	subs	r3, #1
 8008c40:	64fb      	str	r3, [r7, #76]	; 0x4c
   while (k > 0)
 8008c42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	f73f af7f 	bgt.w	8008b48 <merge_rfft_f32+0x82>
   }

}
 8008c4a:	bf00      	nop
 8008c4c:	bf00      	nop
 8008c4e:	3754      	adds	r7, #84	; 0x54
 8008c50:	46bd      	mov	sp, r7
 8008c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c56:	4770      	bx	lr

08008c58 <arm_rfft_fast_f32>:
void arm_rfft_fast_f32(
  const arm_rfft_fast_instance_f32 * S,
  float32_t * p,
  float32_t * pOut,
  uint8_t ifftFlag)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b086      	sub	sp, #24
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	60f8      	str	r0, [r7, #12]
 8008c60:	60b9      	str	r1, [r7, #8]
 8008c62:	607a      	str	r2, [r7, #4]
 8008c64:	70fb      	strb	r3, [r7, #3]
   const arm_cfft_instance_f32 * Sint = &(S->Sint);
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	617b      	str	r3, [r7, #20]

   /* Calculation of Real FFT */
   if (ifftFlag)
 8008c6a:	78fb      	ldrb	r3, [r7, #3]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d00b      	beq.n	8008c88 <arm_rfft_fast_f32+0x30>
   {
      /*  Real FFT compression */
      merge_rfft_f32(S, p, pOut);
 8008c70:	687a      	ldr	r2, [r7, #4]
 8008c72:	68b9      	ldr	r1, [r7, #8]
 8008c74:	68f8      	ldr	r0, [r7, #12]
 8008c76:	f7ff ff26 	bl	8008ac6 <merge_rfft_f32>
      /* Complex radix-4 IFFT process */
      arm_cfft_f32( Sint, pOut, ifftFlag, 1);
 8008c7a:	78fa      	ldrb	r2, [r7, #3]
 8008c7c:	2301      	movs	r3, #1
 8008c7e:	6879      	ldr	r1, [r7, #4]
 8008c80:	6978      	ldr	r0, [r7, #20]
 8008c82:	f7fe fca8 	bl	80075d6 <arm_cfft_f32>
      arm_cfft_f32( Sint, p, ifftFlag, 1);

      /*  Real FFT extraction */
      stage_rfft_f32(S, p, pOut);
   }
}
 8008c86:	e00a      	b.n	8008c9e <arm_rfft_fast_f32+0x46>
      arm_cfft_f32( Sint, p, ifftFlag, 1);
 8008c88:	78fa      	ldrb	r2, [r7, #3]
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	68b9      	ldr	r1, [r7, #8]
 8008c8e:	6978      	ldr	r0, [r7, #20]
 8008c90:	f7fe fca1 	bl	80075d6 <arm_cfft_f32>
      stage_rfft_f32(S, p, pOut);
 8008c94:	687a      	ldr	r2, [r7, #4]
 8008c96:	68b9      	ldr	r1, [r7, #8]
 8008c98:	68f8      	ldr	r0, [r7, #12]
 8008c9a:	f7ff fe2f 	bl	80088fc <stage_rfft_f32>
}
 8008c9e:	bf00      	nop
 8008ca0:	3718      	adds	r7, #24
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bd80      	pop	{r7, pc}
	...

08008ca8 <arm_rfft_32_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

static arm_status arm_rfft_32_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b084      	sub	sp, #16
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d102      	bne.n	8008cbc <arm_rfft_32_fast_init_f32+0x14>
 8008cb6:	f04f 33ff 	mov.w	r3, #4294967295
 8008cba:	e014      	b.n	8008ce6 <arm_rfft_32_fast_init_f32+0x3e>

  status=arm_cfft_init_f32(&(S->Sint),16);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2110      	movs	r1, #16
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	f7fe fd43 	bl	800774c <arm_cfft_init_f32>
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8008cca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d002      	beq.n	8008cd8 <arm_rfft_32_fast_init_f32+0x30>
  {
    return(status);
 8008cd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008cd6:	e006      	b.n	8008ce6 <arm_rfft_32_fast_init_f32+0x3e>
  }

  S->fftLenRFFT = 32U;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2220      	movs	r2, #32
 8008cdc:	821a      	strh	r2, [r3, #16]
  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_32;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	4a03      	ldr	r2, [pc, #12]	; (8008cf0 <arm_rfft_32_fast_init_f32+0x48>)
 8008ce2:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8008ce4:	2300      	movs	r3, #0
}
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	3710      	adds	r7, #16
 8008cea:	46bd      	mov	sp, r7
 8008cec:	bd80      	pop	{r7, pc}
 8008cee:	bf00      	nop
 8008cf0:	0802ae08 	.word	0x0802ae08

08008cf4 <arm_rfft_64_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

static arm_status arm_rfft_64_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b084      	sub	sp, #16
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d102      	bne.n	8008d08 <arm_rfft_64_fast_init_f32+0x14>
 8008d02:	f04f 33ff 	mov.w	r3, #4294967295
 8008d06:	e014      	b.n	8008d32 <arm_rfft_64_fast_init_f32+0x3e>

  status=arm_cfft_init_f32(&(S->Sint),32);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2120      	movs	r1, #32
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f7fe fd1d 	bl	800774c <arm_cfft_init_f32>
 8008d12:	4603      	mov	r3, r0
 8008d14:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8008d16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d002      	beq.n	8008d24 <arm_rfft_64_fast_init_f32+0x30>
  {
    return(status);
 8008d1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d22:	e006      	b.n	8008d32 <arm_rfft_64_fast_init_f32+0x3e>
  }
  S->fftLenRFFT = 64U;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2240      	movs	r2, #64	; 0x40
 8008d28:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_64;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	4a03      	ldr	r2, [pc, #12]	; (8008d3c <arm_rfft_64_fast_init_f32+0x48>)
 8008d2e:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8008d30:	2300      	movs	r3, #0
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	3710      	adds	r7, #16
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}
 8008d3a:	bf00      	nop
 8008d3c:	0802ae88 	.word	0x0802ae88

08008d40 <arm_rfft_128_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

static arm_status arm_rfft_128_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b084      	sub	sp, #16
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d102      	bne.n	8008d54 <arm_rfft_128_fast_init_f32+0x14>
 8008d4e:	f04f 33ff 	mov.w	r3, #4294967295
 8008d52:	e014      	b.n	8008d7e <arm_rfft_128_fast_init_f32+0x3e>

  status=arm_cfft_init_f32(&(S->Sint),64);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2140      	movs	r1, #64	; 0x40
 8008d58:	4618      	mov	r0, r3
 8008d5a:	f7fe fcf7 	bl	800774c <arm_cfft_init_f32>
 8008d5e:	4603      	mov	r3, r0
 8008d60:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8008d62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d002      	beq.n	8008d70 <arm_rfft_128_fast_init_f32+0x30>
  {
    return(status);
 8008d6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d6e:	e006      	b.n	8008d7e <arm_rfft_128_fast_init_f32+0x3e>
  }
  S->fftLenRFFT = 128;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2280      	movs	r2, #128	; 0x80
 8008d74:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_128;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	4a03      	ldr	r2, [pc, #12]	; (8008d88 <arm_rfft_128_fast_init_f32+0x48>)
 8008d7a:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8008d7c:	2300      	movs	r3, #0
}
 8008d7e:	4618      	mov	r0, r3
 8008d80:	3710      	adds	r7, #16
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}
 8008d86:	bf00      	nop
 8008d88:	0802af88 	.word	0x0802af88

08008d8c <arm_rfft_256_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
*/

static arm_status arm_rfft_256_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b084      	sub	sp, #16
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d102      	bne.n	8008da0 <arm_rfft_256_fast_init_f32+0x14>
 8008d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8008d9e:	e015      	b.n	8008dcc <arm_rfft_256_fast_init_f32+0x40>

  status=arm_cfft_init_f32(&(S->Sint),128);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2180      	movs	r1, #128	; 0x80
 8008da4:	4618      	mov	r0, r3
 8008da6:	f7fe fcd1 	bl	800774c <arm_cfft_init_f32>
 8008daa:	4603      	mov	r3, r0
 8008dac:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8008dae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d002      	beq.n	8008dbc <arm_rfft_256_fast_init_f32+0x30>
  {
    return(status);
 8008db6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008dba:	e007      	b.n	8008dcc <arm_rfft_256_fast_init_f32+0x40>
  }
  S->fftLenRFFT = 256U;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008dc2:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_256;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	4a03      	ldr	r2, [pc, #12]	; (8008dd4 <arm_rfft_256_fast_init_f32+0x48>)
 8008dc8:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8008dca:	2300      	movs	r3, #0
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	3710      	adds	r7, #16
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}
 8008dd4:	0802b188 	.word	0x0802b188

08008dd8 <arm_rfft_512_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

static arm_status arm_rfft_512_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b084      	sub	sp, #16
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d102      	bne.n	8008dec <arm_rfft_512_fast_init_f32+0x14>
 8008de6:	f04f 33ff 	mov.w	r3, #4294967295
 8008dea:	e016      	b.n	8008e1a <arm_rfft_512_fast_init_f32+0x42>

  status=arm_cfft_init_f32(&(S->Sint),256);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008df2:	4618      	mov	r0, r3
 8008df4:	f7fe fcaa 	bl	800774c <arm_cfft_init_f32>
 8008df8:	4603      	mov	r3, r0
 8008dfa:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8008dfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d002      	beq.n	8008e0a <arm_rfft_512_fast_init_f32+0x32>
  {
    return(status);
 8008e04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e08:	e007      	b.n	8008e1a <arm_rfft_512_fast_init_f32+0x42>
  }
  S->fftLenRFFT = 512U;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008e10:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_512;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	4a03      	ldr	r2, [pc, #12]	; (8008e24 <arm_rfft_512_fast_init_f32+0x4c>)
 8008e16:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8008e18:	2300      	movs	r3, #0
}
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	3710      	adds	r7, #16
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}
 8008e22:	bf00      	nop
 8008e24:	0802b588 	.word	0x0802b588

08008e28 <arm_rfft_1024_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

static arm_status arm_rfft_1024_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b084      	sub	sp, #16
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d102      	bne.n	8008e3c <arm_rfft_1024_fast_init_f32+0x14>
 8008e36:	f04f 33ff 	mov.w	r3, #4294967295
 8008e3a:	e016      	b.n	8008e6a <arm_rfft_1024_fast_init_f32+0x42>

  status=arm_cfft_init_f32(&(S->Sint),512);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008e42:	4618      	mov	r0, r3
 8008e44:	f7fe fc82 	bl	800774c <arm_cfft_init_f32>
 8008e48:	4603      	mov	r3, r0
 8008e4a:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8008e4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d002      	beq.n	8008e5a <arm_rfft_1024_fast_init_f32+0x32>
  {
    return(status);
 8008e54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e58:	e007      	b.n	8008e6a <arm_rfft_1024_fast_init_f32+0x42>
  }
  S->fftLenRFFT = 1024U;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008e60:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_1024;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	4a03      	ldr	r2, [pc, #12]	; (8008e74 <arm_rfft_1024_fast_init_f32+0x4c>)
 8008e66:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8008e68:	2300      	movs	r3, #0
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	3710      	adds	r7, #16
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}
 8008e72:	bf00      	nop
 8008e74:	0802bd88 	.word	0x0802bd88

08008e78 <arm_rfft_2048_fast_init_f32>:
  @param[in,out] S  points to an arm_rfft_fast_instance_f32 structure
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */
static arm_status arm_rfft_2048_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b084      	sub	sp, #16
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d102      	bne.n	8008e8c <arm_rfft_2048_fast_init_f32+0x14>
 8008e86:	f04f 33ff 	mov.w	r3, #4294967295
 8008e8a:	e016      	b.n	8008eba <arm_rfft_2048_fast_init_f32+0x42>

  status=arm_cfft_init_f32(&(S->Sint),1024);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008e92:	4618      	mov	r0, r3
 8008e94:	f7fe fc5a 	bl	800774c <arm_cfft_init_f32>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8008e9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d002      	beq.n	8008eaa <arm_rfft_2048_fast_init_f32+0x32>
  {
    return(status);
 8008ea4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ea8:	e007      	b.n	8008eba <arm_rfft_2048_fast_init_f32+0x42>
  }
  S->fftLenRFFT = 2048U;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008eb0:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_2048;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	4a03      	ldr	r2, [pc, #12]	; (8008ec4 <arm_rfft_2048_fast_init_f32+0x4c>)
 8008eb6:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8008eb8:	2300      	movs	r3, #0
}
 8008eba:	4618      	mov	r0, r3
 8008ebc:	3710      	adds	r7, #16
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bd80      	pop	{r7, pc}
 8008ec2:	bf00      	nop
 8008ec4:	0802cd88 	.word	0x0802cd88

08008ec8 <arm_rfft_4096_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

static arm_status arm_rfft_4096_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b084      	sub	sp, #16
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d102      	bne.n	8008edc <arm_rfft_4096_fast_init_f32+0x14>
 8008ed6:	f04f 33ff 	mov.w	r3, #4294967295
 8008eda:	e016      	b.n	8008f0a <arm_rfft_4096_fast_init_f32+0x42>

  status=arm_cfft_init_f32(&(S->Sint),2048);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	f7fe fc32 	bl	800774c <arm_cfft_init_f32>
 8008ee8:	4603      	mov	r3, r0
 8008eea:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8008eec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d002      	beq.n	8008efa <arm_rfft_4096_fast_init_f32+0x32>
  {
    return(status);
 8008ef4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ef8:	e007      	b.n	8008f0a <arm_rfft_4096_fast_init_f32+0x42>
  }
  S->fftLenRFFT = 4096U;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008f00:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_4096;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	4a03      	ldr	r2, [pc, #12]	; (8008f14 <arm_rfft_4096_fast_init_f32+0x4c>)
 8008f06:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8008f08:	2300      	movs	r3, #0
}
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	3710      	adds	r7, #16
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}
 8008f12:	bf00      	nop
 8008f14:	0802ed88 	.word	0x0802ed88

08008f18 <arm_rfft_fast_init_f32>:
 */

arm_status arm_rfft_fast_init_f32(
  arm_rfft_fast_instance_f32 * S,
  uint16_t fftLen)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b084      	sub	sp, #16
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
 8008f20:	460b      	mov	r3, r1
 8008f22:	807b      	strh	r3, [r7, #2]
  typedef arm_status(*fft_init_ptr)( arm_rfft_fast_instance_f32 *);
  fft_init_ptr fptr = 0x0;
 8008f24:	2300      	movs	r3, #0
 8008f26:	60fb      	str	r3, [r7, #12]

  switch (fftLen)
 8008f28:	887b      	ldrh	r3, [r7, #2]
 8008f2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f2e:	d023      	beq.n	8008f78 <arm_rfft_fast_init_f32+0x60>
 8008f30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f34:	dc38      	bgt.n	8008fa8 <arm_rfft_fast_init_f32+0x90>
 8008f36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f3a:	d020      	beq.n	8008f7e <arm_rfft_fast_init_f32+0x66>
 8008f3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f40:	dc32      	bgt.n	8008fa8 <arm_rfft_fast_init_f32+0x90>
 8008f42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f46:	d01d      	beq.n	8008f84 <arm_rfft_fast_init_f32+0x6c>
 8008f48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f4c:	dc2c      	bgt.n	8008fa8 <arm_rfft_fast_init_f32+0x90>
 8008f4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f52:	d01a      	beq.n	8008f8a <arm_rfft_fast_init_f32+0x72>
 8008f54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f58:	dc26      	bgt.n	8008fa8 <arm_rfft_fast_init_f32+0x90>
 8008f5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f5e:	d017      	beq.n	8008f90 <arm_rfft_fast_init_f32+0x78>
 8008f60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f64:	dc20      	bgt.n	8008fa8 <arm_rfft_fast_init_f32+0x90>
 8008f66:	2b80      	cmp	r3, #128	; 0x80
 8008f68:	d015      	beq.n	8008f96 <arm_rfft_fast_init_f32+0x7e>
 8008f6a:	2b80      	cmp	r3, #128	; 0x80
 8008f6c:	dc1c      	bgt.n	8008fa8 <arm_rfft_fast_init_f32+0x90>
 8008f6e:	2b20      	cmp	r3, #32
 8008f70:	d017      	beq.n	8008fa2 <arm_rfft_fast_init_f32+0x8a>
 8008f72:	2b40      	cmp	r3, #64	; 0x40
 8008f74:	d012      	beq.n	8008f9c <arm_rfft_fast_init_f32+0x84>
 8008f76:	e017      	b.n	8008fa8 <arm_rfft_fast_init_f32+0x90>
  {
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_2048) && defined(ARM_TABLE_BITREVIDX_FLT_2048) && defined(ARM_TABLE_TWIDDLECOEF_RFFT_F32_4096))
  case 4096U:
    fptr = arm_rfft_4096_fast_init_f32;
 8008f78:	4b14      	ldr	r3, [pc, #80]	; (8008fcc <arm_rfft_fast_init_f32+0xb4>)
 8008f7a:	60fb      	str	r3, [r7, #12]
    break;
 8008f7c:	e017      	b.n	8008fae <arm_rfft_fast_init_f32+0x96>
#endif
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_1024) && defined(ARM_TABLE_BITREVIDX_FLT_1024) && defined(ARM_TABLE_TWIDDLECOEF_RFFT_F32_2048))
  case 2048U:
    fptr = arm_rfft_2048_fast_init_f32;
 8008f7e:	4b14      	ldr	r3, [pc, #80]	; (8008fd0 <arm_rfft_fast_init_f32+0xb8>)
 8008f80:	60fb      	str	r3, [r7, #12]
    break;
 8008f82:	e014      	b.n	8008fae <arm_rfft_fast_init_f32+0x96>
#endif
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_512) && defined(ARM_TABLE_BITREVIDX_FLT_512) && defined(ARM_TABLE_TWIDDLECOEF_RFFT_F32_1024))
  case 1024U:
    fptr = arm_rfft_1024_fast_init_f32;
 8008f84:	4b13      	ldr	r3, [pc, #76]	; (8008fd4 <arm_rfft_fast_init_f32+0xbc>)
 8008f86:	60fb      	str	r3, [r7, #12]
    break;
 8008f88:	e011      	b.n	8008fae <arm_rfft_fast_init_f32+0x96>
#endif
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_256) && defined(ARM_TABLE_BITREVIDX_FLT_256) && defined(ARM_TABLE_TWIDDLECOEF_RFFT_F32_512))
  case 512U:
    fptr = arm_rfft_512_fast_init_f32;
 8008f8a:	4b13      	ldr	r3, [pc, #76]	; (8008fd8 <arm_rfft_fast_init_f32+0xc0>)
 8008f8c:	60fb      	str	r3, [r7, #12]
    break;
 8008f8e:	e00e      	b.n	8008fae <arm_rfft_fast_init_f32+0x96>
#endif
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_128) && defined(ARM_TABLE_BITREVIDX_FLT_128) && defined(ARM_TABLE_TWIDDLECOEF_RFFT_F32_256))
  case 256U:
    fptr = arm_rfft_256_fast_init_f32;
 8008f90:	4b12      	ldr	r3, [pc, #72]	; (8008fdc <arm_rfft_fast_init_f32+0xc4>)
 8008f92:	60fb      	str	r3, [r7, #12]
    break;
 8008f94:	e00b      	b.n	8008fae <arm_rfft_fast_init_f32+0x96>
#endif
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_64) && defined(ARM_TABLE_BITREVIDX_FLT_64) && defined(ARM_TABLE_TWIDDLECOEF_RFFT_F32_128))
  case 128U:
    fptr = arm_rfft_128_fast_init_f32;
 8008f96:	4b12      	ldr	r3, [pc, #72]	; (8008fe0 <arm_rfft_fast_init_f32+0xc8>)
 8008f98:	60fb      	str	r3, [r7, #12]
    break;
 8008f9a:	e008      	b.n	8008fae <arm_rfft_fast_init_f32+0x96>
#endif
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_32) && defined(ARM_TABLE_BITREVIDX_FLT_32) && defined(ARM_TABLE_TWIDDLECOEF_RFFT_F32_64))
  case 64U:
    fptr = arm_rfft_64_fast_init_f32;
 8008f9c:	4b11      	ldr	r3, [pc, #68]	; (8008fe4 <arm_rfft_fast_init_f32+0xcc>)
 8008f9e:	60fb      	str	r3, [r7, #12]
    break;
 8008fa0:	e005      	b.n	8008fae <arm_rfft_fast_init_f32+0x96>
#endif
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_16) && defined(ARM_TABLE_BITREVIDX_FLT_16) && defined(ARM_TABLE_TWIDDLECOEF_RFFT_F32_32))
  case 32U:
    fptr = arm_rfft_32_fast_init_f32;
 8008fa2:	4b11      	ldr	r3, [pc, #68]	; (8008fe8 <arm_rfft_fast_init_f32+0xd0>)
 8008fa4:	60fb      	str	r3, [r7, #12]
    break;
 8008fa6:	e002      	b.n	8008fae <arm_rfft_fast_init_f32+0x96>
#endif
  default:
    return ARM_MATH_ARGUMENT_ERROR;
 8008fa8:	f04f 33ff 	mov.w	r3, #4294967295
 8008fac:	e009      	b.n	8008fc2 <arm_rfft_fast_init_f32+0xaa>
  }

  if( ! fptr ) return ARM_MATH_ARGUMENT_ERROR;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d102      	bne.n	8008fba <arm_rfft_fast_init_f32+0xa2>
 8008fb4:	f04f 33ff 	mov.w	r3, #4294967295
 8008fb8:	e003      	b.n	8008fc2 <arm_rfft_fast_init_f32+0xaa>
  return fptr( S );
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	6878      	ldr	r0, [r7, #4]
 8008fbe:	4798      	blx	r3
 8008fc0:	4603      	mov	r3, r0

}
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	3710      	adds	r7, #16
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	bd80      	pop	{r7, pc}
 8008fca:	bf00      	nop
 8008fcc:	08008ec9 	.word	0x08008ec9
 8008fd0:	08008e79 	.word	0x08008e79
 8008fd4:	08008e29 	.word	0x08008e29
 8008fd8:	08008dd9 	.word	0x08008dd9
 8008fdc:	08008d8d 	.word	0x08008d8d
 8008fe0:	08008d41 	.word	0x08008d41
 8008fe4:	08008cf5 	.word	0x08008cf5
 8008fe8:	08008ca9 	.word	0x08008ca9

08008fec <arm_avepool_q7_HWC_nonsquare>:
        const uint16_t dim_im_out_x,  // output image dimension
        const uint16_t dim_im_out_y,  // output image dimension
        q7_t * bufferA,               // a buffer for local storage
        q7_t * Im_out,                // output feature
        const uint16_t out_lshift)    // output left shift (scaling)
{
 8008fec:	b4b0      	push	{r4, r5, r7}
 8008fee:	b08b      	sub	sp, #44	; 0x2c
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	60f8      	str	r0, [r7, #12]
 8008ff4:	4608      	mov	r0, r1
 8008ff6:	4611      	mov	r1, r2
 8008ff8:	461a      	mov	r2, r3
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	817b      	strh	r3, [r7, #10]
 8008ffe:	460b      	mov	r3, r1
 8009000:	813b      	strh	r3, [r7, #8]
 8009002:	4613      	mov	r3, r2
 8009004:	80fb      	strh	r3, [r7, #6]
  int16_t i_ch_in, i_x, i_y;
  int16_t k_x, k_y;
  
  for(i_ch_in=0;i_ch_in<ch_im_in;i_ch_in++) {
 8009006:	2300      	movs	r3, #0
 8009008:	84fb      	strh	r3, [r7, #38]	; 0x26
 800900a:	e0b2      	b.n	8009172 <arm_avepool_q7_HWC_nonsquare+0x186>
    for(i_y=0;i_y<dim_im_out_y;i_y++) {
 800900c:	2300      	movs	r3, #0
 800900e:	847b      	strh	r3, [r7, #34]	; 0x22
 8009010:	e0a2      	b.n	8009158 <arm_avepool_q7_HWC_nonsquare+0x16c>
      for(i_x=0;i_x<dim_im_out_x;i_x++) {
 8009012:	2300      	movs	r3, #0
 8009014:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009016:	e092      	b.n	800913e <arm_avepool_q7_HWC_nonsquare+0x152>
        int sum = 0;
 8009018:	2300      	movs	r3, #0
 800901a:	61bb      	str	r3, [r7, #24]
        int count = 0;
 800901c:	2300      	movs	r3, #0
 800901e:	617b      	str	r3, [r7, #20]
        for (k_y = i_y*stride_y-padding_y; k_y < i_y*stride_y-padding_y+dim_kernel_y; k_y++) {
 8009020:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009022:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8009026:	fb12 f303 	smulbb	r3, r2, r3
 800902a:	b29a      	uxth	r2, r3
 800902c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8009030:	1ad3      	subs	r3, r2, r3
 8009032:	b29b      	uxth	r3, r3
 8009034:	83fb      	strh	r3, [r7, #30]
 8009036:	e052      	b.n	80090de <arm_avepool_q7_HWC_nonsquare+0xf2>
          for (k_x = i_x*stride_x-padding_x;k_x < i_x*stride_x-padding_x+dim_kernel_x; k_x++) {
 8009038:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800903a:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800903e:	fb12 f303 	smulbb	r3, r2, r3
 8009042:	b29a      	uxth	r2, r3
 8009044:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009048:	1ad3      	subs	r3, r2, r3
 800904a:	b29b      	uxth	r3, r3
 800904c:	843b      	strh	r3, [r7, #32]
 800904e:	e031      	b.n	80090b4 <arm_avepool_q7_HWC_nonsquare+0xc8>
            if (k_y >= 0 && k_x >= 0 && k_y<dim_im_in_y && k_x<dim_im_in_x) {
 8009050:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8009054:	2b00      	cmp	r3, #0
 8009056:	db27      	blt.n	80090a8 <arm_avepool_q7_HWC_nonsquare+0xbc>
 8009058:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800905c:	2b00      	cmp	r3, #0
 800905e:	db23      	blt.n	80090a8 <arm_avepool_q7_HWC_nonsquare+0xbc>
 8009060:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8009064:	893b      	ldrh	r3, [r7, #8]
 8009066:	429a      	cmp	r2, r3
 8009068:	da1e      	bge.n	80090a8 <arm_avepool_q7_HWC_nonsquare+0xbc>
 800906a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800906e:	897b      	ldrh	r3, [r7, #10]
 8009070:	429a      	cmp	r2, r3
 8009072:	da19      	bge.n	80090a8 <arm_avepool_q7_HWC_nonsquare+0xbc>
              sum += Im_in[i_ch_in + ch_im_in*(k_x+k_y*dim_im_in_x)];
 8009074:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8009078:	88fb      	ldrh	r3, [r7, #6]
 800907a:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 800907e:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 8009082:	897c      	ldrh	r4, [r7, #10]
 8009084:	fb04 f101 	mul.w	r1, r4, r1
 8009088:	4401      	add	r1, r0
 800908a:	fb01 f303 	mul.w	r3, r1, r3
 800908e:	4413      	add	r3, r2
 8009090:	461a      	mov	r2, r3
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	4413      	add	r3, r2
 8009096:	f993 3000 	ldrsb.w	r3, [r3]
 800909a:	461a      	mov	r2, r3
 800909c:	69bb      	ldr	r3, [r7, #24]
 800909e:	4413      	add	r3, r2
 80090a0:	61bb      	str	r3, [r7, #24]
              count++;
 80090a2:	697b      	ldr	r3, [r7, #20]
 80090a4:	3301      	adds	r3, #1
 80090a6:	617b      	str	r3, [r7, #20]
          for (k_x = i_x*stride_x-padding_x;k_x < i_x*stride_x-padding_x+dim_kernel_x; k_x++) {
 80090a8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80090ac:	b29b      	uxth	r3, r3
 80090ae:	3301      	adds	r3, #1
 80090b0:	b29b      	uxth	r3, r3
 80090b2:	843b      	strh	r3, [r7, #32]
 80090b4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80090b8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80090bc:	f8b7 1048 	ldrh.w	r1, [r7, #72]	; 0x48
 80090c0:	fb01 f103 	mul.w	r1, r1, r3
 80090c4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80090c8:	1ac9      	subs	r1, r1, r3
 80090ca:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80090cc:	440b      	add	r3, r1
 80090ce:	429a      	cmp	r2, r3
 80090d0:	dbbe      	blt.n	8009050 <arm_avepool_q7_HWC_nonsquare+0x64>
        for (k_y = i_y*stride_y-padding_y; k_y < i_y*stride_y-padding_y+dim_kernel_y; k_y++) {
 80090d2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80090d6:	b29b      	uxth	r3, r3
 80090d8:	3301      	adds	r3, #1
 80090da:	b29b      	uxth	r3, r3
 80090dc:	83fb      	strh	r3, [r7, #30]
 80090de:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80090e2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80090e6:	f8b7 104c 	ldrh.w	r1, [r7, #76]	; 0x4c
 80090ea:	fb01 f103 	mul.w	r1, r1, r3
 80090ee:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80090f2:	1ac9      	subs	r1, r1, r3
 80090f4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80090f6:	440b      	add	r3, r1
 80090f8:	429a      	cmp	r2, r3
 80090fa:	db9d      	blt.n	8009038 <arm_avepool_q7_HWC_nonsquare+0x4c>
            }
          }
        }
        Im_out[i_ch_in+ch_im_in*(i_x+i_y*dim_im_out_x)] = sum*(0x1<<out_lshift)/count;
 80090fc:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8009100:	69ba      	ldr	r2, [r7, #24]
 8009102:	409a      	lsls	r2, r3
 8009104:	697b      	ldr	r3, [r7, #20]
 8009106:	fb92 f5f3 	sdiv	r5, r2, r3
 800910a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800910e:	88fb      	ldrh	r3, [r7, #6]
 8009110:	f9b7 0024 	ldrsh.w	r0, [r7, #36]	; 0x24
 8009114:	f9b7 1022 	ldrsh.w	r1, [r7, #34]	; 0x22
 8009118:	f8b7 4050 	ldrh.w	r4, [r7, #80]	; 0x50
 800911c:	fb04 f101 	mul.w	r1, r4, r1
 8009120:	4401      	add	r1, r0
 8009122:	fb01 f303 	mul.w	r3, r1, r3
 8009126:	4413      	add	r3, r2
 8009128:	461a      	mov	r2, r3
 800912a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800912c:	4413      	add	r3, r2
 800912e:	b26a      	sxtb	r2, r5
 8009130:	701a      	strb	r2, [r3, #0]
      for(i_x=0;i_x<dim_im_out_x;i_x++) {
 8009132:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8009136:	b29b      	uxth	r3, r3
 8009138:	3301      	adds	r3, #1
 800913a:	b29b      	uxth	r3, r3
 800913c:	84bb      	strh	r3, [r7, #36]	; 0x24
 800913e:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8009142:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8009146:	429a      	cmp	r2, r3
 8009148:	f6ff af66 	blt.w	8009018 <arm_avepool_q7_HWC_nonsquare+0x2c>
    for(i_y=0;i_y<dim_im_out_y;i_y++) {
 800914c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8009150:	b29b      	uxth	r3, r3
 8009152:	3301      	adds	r3, #1
 8009154:	b29b      	uxth	r3, r3
 8009156:	847b      	strh	r3, [r7, #34]	; 0x22
 8009158:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 800915c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8009160:	429a      	cmp	r2, r3
 8009162:	f6ff af56 	blt.w	8009012 <arm_avepool_q7_HWC_nonsquare+0x26>
  for(i_ch_in=0;i_ch_in<ch_im_in;i_ch_in++) {
 8009166:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800916a:	b29b      	uxth	r3, r3
 800916c:	3301      	adds	r3, #1
 800916e:	b29b      	uxth	r3, r3
 8009170:	84fb      	strh	r3, [r7, #38]	; 0x26
 8009172:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8009176:	88fb      	ldrh	r3, [r7, #6]
 8009178:	429a      	cmp	r2, r3
 800917a:	f6ff af47 	blt.w	800900c <arm_avepool_q7_HWC_nonsquare+0x20>
      }
    }
  }
}
 800917e:	bf00      	nop
 8009180:	bf00      	nop
 8009182:	372c      	adds	r7, #44	; 0x2c
 8009184:	46bd      	mov	sp, r7
 8009186:	bcb0      	pop	{r4, r5, r7}
 8009188:	4770      	bx	lr
	...

0800918c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8009190:	4b0e      	ldr	r3, [pc, #56]	; (80091cc <HAL_Init+0x40>)
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	4a0d      	ldr	r2, [pc, #52]	; (80091cc <HAL_Init+0x40>)
 8009196:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800919a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800919c:	4b0b      	ldr	r3, [pc, #44]	; (80091cc <HAL_Init+0x40>)
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	4a0a      	ldr	r2, [pc, #40]	; (80091cc <HAL_Init+0x40>)
 80091a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80091a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80091a8:	4b08      	ldr	r3, [pc, #32]	; (80091cc <HAL_Init+0x40>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	4a07      	ldr	r2, [pc, #28]	; (80091cc <HAL_Init+0x40>)
 80091ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80091b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80091b4:	2003      	movs	r0, #3
 80091b6:	f000 f94f 	bl	8009458 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80091ba:	2000      	movs	r0, #0
 80091bc:	f000 f808 	bl	80091d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80091c0:	f7f9 fd8c 	bl	8002cdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80091c4:	2300      	movs	r3, #0
}
 80091c6:	4618      	mov	r0, r3
 80091c8:	bd80      	pop	{r7, pc}
 80091ca:	bf00      	nop
 80091cc:	40023c00 	.word	0x40023c00

080091d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b082      	sub	sp, #8
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80091d8:	4b12      	ldr	r3, [pc, #72]	; (8009224 <HAL_InitTick+0x54>)
 80091da:	681a      	ldr	r2, [r3, #0]
 80091dc:	4b12      	ldr	r3, [pc, #72]	; (8009228 <HAL_InitTick+0x58>)
 80091de:	781b      	ldrb	r3, [r3, #0]
 80091e0:	4619      	mov	r1, r3
 80091e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80091e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80091ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80091ee:	4618      	mov	r0, r3
 80091f0:	f000 f967 	bl	80094c2 <HAL_SYSTICK_Config>
 80091f4:	4603      	mov	r3, r0
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d001      	beq.n	80091fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80091fa:	2301      	movs	r3, #1
 80091fc:	e00e      	b.n	800921c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2b0f      	cmp	r3, #15
 8009202:	d80a      	bhi.n	800921a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009204:	2200      	movs	r2, #0
 8009206:	6879      	ldr	r1, [r7, #4]
 8009208:	f04f 30ff 	mov.w	r0, #4294967295
 800920c:	f000 f92f 	bl	800946e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009210:	4a06      	ldr	r2, [pc, #24]	; (800922c <HAL_InitTick+0x5c>)
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009216:	2300      	movs	r3, #0
 8009218:	e000      	b.n	800921c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800921a:	2301      	movs	r3, #1
}
 800921c:	4618      	mov	r0, r3
 800921e:	3708      	adds	r7, #8
 8009220:	46bd      	mov	sp, r7
 8009222:	bd80      	pop	{r7, pc}
 8009224:	20000000 	.word	0x20000000
 8009228:	20000008 	.word	0x20000008
 800922c:	20000004 	.word	0x20000004

08009230 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009230:	b480      	push	{r7}
 8009232:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009234:	4b06      	ldr	r3, [pc, #24]	; (8009250 <HAL_IncTick+0x20>)
 8009236:	781b      	ldrb	r3, [r3, #0]
 8009238:	461a      	mov	r2, r3
 800923a:	4b06      	ldr	r3, [pc, #24]	; (8009254 <HAL_IncTick+0x24>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	4413      	add	r3, r2
 8009240:	4a04      	ldr	r2, [pc, #16]	; (8009254 <HAL_IncTick+0x24>)
 8009242:	6013      	str	r3, [r2, #0]
}
 8009244:	bf00      	nop
 8009246:	46bd      	mov	sp, r7
 8009248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924c:	4770      	bx	lr
 800924e:	bf00      	nop
 8009250:	20000008 	.word	0x20000008
 8009254:	20007f94 	.word	0x20007f94

08009258 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009258:	b480      	push	{r7}
 800925a:	af00      	add	r7, sp, #0
  return uwTick;
 800925c:	4b03      	ldr	r3, [pc, #12]	; (800926c <HAL_GetTick+0x14>)
 800925e:	681b      	ldr	r3, [r3, #0]
}
 8009260:	4618      	mov	r0, r3
 8009262:	46bd      	mov	sp, r7
 8009264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009268:	4770      	bx	lr
 800926a:	bf00      	nop
 800926c:	20007f94 	.word	0x20007f94

08009270 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b084      	sub	sp, #16
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009278:	f7ff ffee 	bl	8009258 <HAL_GetTick>
 800927c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009288:	d005      	beq.n	8009296 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800928a:	4b0a      	ldr	r3, [pc, #40]	; (80092b4 <HAL_Delay+0x44>)
 800928c:	781b      	ldrb	r3, [r3, #0]
 800928e:	461a      	mov	r2, r3
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	4413      	add	r3, r2
 8009294:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8009296:	bf00      	nop
 8009298:	f7ff ffde 	bl	8009258 <HAL_GetTick>
 800929c:	4602      	mov	r2, r0
 800929e:	68bb      	ldr	r3, [r7, #8]
 80092a0:	1ad3      	subs	r3, r2, r3
 80092a2:	68fa      	ldr	r2, [r7, #12]
 80092a4:	429a      	cmp	r2, r3
 80092a6:	d8f7      	bhi.n	8009298 <HAL_Delay+0x28>
  {
  }
}
 80092a8:	bf00      	nop
 80092aa:	bf00      	nop
 80092ac:	3710      	adds	r7, #16
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bd80      	pop	{r7, pc}
 80092b2:	bf00      	nop
 80092b4:	20000008 	.word	0x20000008

080092b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80092b8:	b480      	push	{r7}
 80092ba:	b085      	sub	sp, #20
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f003 0307 	and.w	r3, r3, #7
 80092c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80092c8:	4b0c      	ldr	r3, [pc, #48]	; (80092fc <__NVIC_SetPriorityGrouping+0x44>)
 80092ca:	68db      	ldr	r3, [r3, #12]
 80092cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80092ce:	68ba      	ldr	r2, [r7, #8]
 80092d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80092d4:	4013      	ands	r3, r2
 80092d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80092e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80092e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80092e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80092ea:	4a04      	ldr	r2, [pc, #16]	; (80092fc <__NVIC_SetPriorityGrouping+0x44>)
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	60d3      	str	r3, [r2, #12]
}
 80092f0:	bf00      	nop
 80092f2:	3714      	adds	r7, #20
 80092f4:	46bd      	mov	sp, r7
 80092f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fa:	4770      	bx	lr
 80092fc:	e000ed00 	.word	0xe000ed00

08009300 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009300:	b480      	push	{r7}
 8009302:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009304:	4b04      	ldr	r3, [pc, #16]	; (8009318 <__NVIC_GetPriorityGrouping+0x18>)
 8009306:	68db      	ldr	r3, [r3, #12]
 8009308:	0a1b      	lsrs	r3, r3, #8
 800930a:	f003 0307 	and.w	r3, r3, #7
}
 800930e:	4618      	mov	r0, r3
 8009310:	46bd      	mov	sp, r7
 8009312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009316:	4770      	bx	lr
 8009318:	e000ed00 	.word	0xe000ed00

0800931c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800931c:	b480      	push	{r7}
 800931e:	b083      	sub	sp, #12
 8009320:	af00      	add	r7, sp, #0
 8009322:	4603      	mov	r3, r0
 8009324:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800932a:	2b00      	cmp	r3, #0
 800932c:	db0b      	blt.n	8009346 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800932e:	79fb      	ldrb	r3, [r7, #7]
 8009330:	f003 021f 	and.w	r2, r3, #31
 8009334:	4907      	ldr	r1, [pc, #28]	; (8009354 <__NVIC_EnableIRQ+0x38>)
 8009336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800933a:	095b      	lsrs	r3, r3, #5
 800933c:	2001      	movs	r0, #1
 800933e:	fa00 f202 	lsl.w	r2, r0, r2
 8009342:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8009346:	bf00      	nop
 8009348:	370c      	adds	r7, #12
 800934a:	46bd      	mov	sp, r7
 800934c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009350:	4770      	bx	lr
 8009352:	bf00      	nop
 8009354:	e000e100 	.word	0xe000e100

08009358 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009358:	b480      	push	{r7}
 800935a:	b083      	sub	sp, #12
 800935c:	af00      	add	r7, sp, #0
 800935e:	4603      	mov	r3, r0
 8009360:	6039      	str	r1, [r7, #0]
 8009362:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009364:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009368:	2b00      	cmp	r3, #0
 800936a:	db0a      	blt.n	8009382 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	b2da      	uxtb	r2, r3
 8009370:	490c      	ldr	r1, [pc, #48]	; (80093a4 <__NVIC_SetPriority+0x4c>)
 8009372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009376:	0112      	lsls	r2, r2, #4
 8009378:	b2d2      	uxtb	r2, r2
 800937a:	440b      	add	r3, r1
 800937c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009380:	e00a      	b.n	8009398 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	b2da      	uxtb	r2, r3
 8009386:	4908      	ldr	r1, [pc, #32]	; (80093a8 <__NVIC_SetPriority+0x50>)
 8009388:	79fb      	ldrb	r3, [r7, #7]
 800938a:	f003 030f 	and.w	r3, r3, #15
 800938e:	3b04      	subs	r3, #4
 8009390:	0112      	lsls	r2, r2, #4
 8009392:	b2d2      	uxtb	r2, r2
 8009394:	440b      	add	r3, r1
 8009396:	761a      	strb	r2, [r3, #24]
}
 8009398:	bf00      	nop
 800939a:	370c      	adds	r7, #12
 800939c:	46bd      	mov	sp, r7
 800939e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a2:	4770      	bx	lr
 80093a4:	e000e100 	.word	0xe000e100
 80093a8:	e000ed00 	.word	0xe000ed00

080093ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80093ac:	b480      	push	{r7}
 80093ae:	b089      	sub	sp, #36	; 0x24
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	60f8      	str	r0, [r7, #12]
 80093b4:	60b9      	str	r1, [r7, #8]
 80093b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	f003 0307 	and.w	r3, r3, #7
 80093be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80093c0:	69fb      	ldr	r3, [r7, #28]
 80093c2:	f1c3 0307 	rsb	r3, r3, #7
 80093c6:	2b04      	cmp	r3, #4
 80093c8:	bf28      	it	cs
 80093ca:	2304      	movcs	r3, #4
 80093cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80093ce:	69fb      	ldr	r3, [r7, #28]
 80093d0:	3304      	adds	r3, #4
 80093d2:	2b06      	cmp	r3, #6
 80093d4:	d902      	bls.n	80093dc <NVIC_EncodePriority+0x30>
 80093d6:	69fb      	ldr	r3, [r7, #28]
 80093d8:	3b03      	subs	r3, #3
 80093da:	e000      	b.n	80093de <NVIC_EncodePriority+0x32>
 80093dc:	2300      	movs	r3, #0
 80093de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80093e0:	f04f 32ff 	mov.w	r2, #4294967295
 80093e4:	69bb      	ldr	r3, [r7, #24]
 80093e6:	fa02 f303 	lsl.w	r3, r2, r3
 80093ea:	43da      	mvns	r2, r3
 80093ec:	68bb      	ldr	r3, [r7, #8]
 80093ee:	401a      	ands	r2, r3
 80093f0:	697b      	ldr	r3, [r7, #20]
 80093f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80093f4:	f04f 31ff 	mov.w	r1, #4294967295
 80093f8:	697b      	ldr	r3, [r7, #20]
 80093fa:	fa01 f303 	lsl.w	r3, r1, r3
 80093fe:	43d9      	mvns	r1, r3
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009404:	4313      	orrs	r3, r2
         );
}
 8009406:	4618      	mov	r0, r3
 8009408:	3724      	adds	r7, #36	; 0x24
 800940a:	46bd      	mov	sp, r7
 800940c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009410:	4770      	bx	lr
	...

08009414 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b082      	sub	sp, #8
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	3b01      	subs	r3, #1
 8009420:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009424:	d301      	bcc.n	800942a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009426:	2301      	movs	r3, #1
 8009428:	e00f      	b.n	800944a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800942a:	4a0a      	ldr	r2, [pc, #40]	; (8009454 <SysTick_Config+0x40>)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	3b01      	subs	r3, #1
 8009430:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009432:	210f      	movs	r1, #15
 8009434:	f04f 30ff 	mov.w	r0, #4294967295
 8009438:	f7ff ff8e 	bl	8009358 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800943c:	4b05      	ldr	r3, [pc, #20]	; (8009454 <SysTick_Config+0x40>)
 800943e:	2200      	movs	r2, #0
 8009440:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009442:	4b04      	ldr	r3, [pc, #16]	; (8009454 <SysTick_Config+0x40>)
 8009444:	2207      	movs	r2, #7
 8009446:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009448:	2300      	movs	r3, #0
}
 800944a:	4618      	mov	r0, r3
 800944c:	3708      	adds	r7, #8
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}
 8009452:	bf00      	nop
 8009454:	e000e010 	.word	0xe000e010

08009458 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b082      	sub	sp, #8
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009460:	6878      	ldr	r0, [r7, #4]
 8009462:	f7ff ff29 	bl	80092b8 <__NVIC_SetPriorityGrouping>
}
 8009466:	bf00      	nop
 8009468:	3708      	adds	r7, #8
 800946a:	46bd      	mov	sp, r7
 800946c:	bd80      	pop	{r7, pc}

0800946e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800946e:	b580      	push	{r7, lr}
 8009470:	b086      	sub	sp, #24
 8009472:	af00      	add	r7, sp, #0
 8009474:	4603      	mov	r3, r0
 8009476:	60b9      	str	r1, [r7, #8]
 8009478:	607a      	str	r2, [r7, #4]
 800947a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800947c:	2300      	movs	r3, #0
 800947e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009480:	f7ff ff3e 	bl	8009300 <__NVIC_GetPriorityGrouping>
 8009484:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009486:	687a      	ldr	r2, [r7, #4]
 8009488:	68b9      	ldr	r1, [r7, #8]
 800948a:	6978      	ldr	r0, [r7, #20]
 800948c:	f7ff ff8e 	bl	80093ac <NVIC_EncodePriority>
 8009490:	4602      	mov	r2, r0
 8009492:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009496:	4611      	mov	r1, r2
 8009498:	4618      	mov	r0, r3
 800949a:	f7ff ff5d 	bl	8009358 <__NVIC_SetPriority>
}
 800949e:	bf00      	nop
 80094a0:	3718      	adds	r7, #24
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bd80      	pop	{r7, pc}

080094a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80094a6:	b580      	push	{r7, lr}
 80094a8:	b082      	sub	sp, #8
 80094aa:	af00      	add	r7, sp, #0
 80094ac:	4603      	mov	r3, r0
 80094ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80094b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80094b4:	4618      	mov	r0, r3
 80094b6:	f7ff ff31 	bl	800931c <__NVIC_EnableIRQ>
}
 80094ba:	bf00      	nop
 80094bc:	3708      	adds	r7, #8
 80094be:	46bd      	mov	sp, r7
 80094c0:	bd80      	pop	{r7, pc}

080094c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80094c2:	b580      	push	{r7, lr}
 80094c4:	b082      	sub	sp, #8
 80094c6:	af00      	add	r7, sp, #0
 80094c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80094ca:	6878      	ldr	r0, [r7, #4]
 80094cc:	f7ff ffa2 	bl	8009414 <SysTick_Config>
 80094d0:	4603      	mov	r3, r0
}
 80094d2:	4618      	mov	r0, r3
 80094d4:	3708      	adds	r7, #8
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd80      	pop	{r7, pc}
	...

080094dc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b086      	sub	sp, #24
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80094e4:	2300      	movs	r3, #0
 80094e6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80094e8:	f7ff feb6 	bl	8009258 <HAL_GetTick>
 80094ec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d101      	bne.n	80094f8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80094f4:	2301      	movs	r3, #1
 80094f6:	e099      	b.n	800962c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2200      	movs	r2, #0
 80094fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2202      	movs	r2, #2
 8009504:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	681a      	ldr	r2, [r3, #0]
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	f022 0201 	bic.w	r2, r2, #1
 8009516:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009518:	e00f      	b.n	800953a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800951a:	f7ff fe9d 	bl	8009258 <HAL_GetTick>
 800951e:	4602      	mov	r2, r0
 8009520:	693b      	ldr	r3, [r7, #16]
 8009522:	1ad3      	subs	r3, r2, r3
 8009524:	2b05      	cmp	r3, #5
 8009526:	d908      	bls.n	800953a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2220      	movs	r2, #32
 800952c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2203      	movs	r2, #3
 8009532:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8009536:	2303      	movs	r3, #3
 8009538:	e078      	b.n	800962c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	f003 0301 	and.w	r3, r3, #1
 8009544:	2b00      	cmp	r3, #0
 8009546:	d1e8      	bne.n	800951a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8009550:	697a      	ldr	r2, [r7, #20]
 8009552:	4b38      	ldr	r3, [pc, #224]	; (8009634 <HAL_DMA_Init+0x158>)
 8009554:	4013      	ands	r3, r2
 8009556:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	685a      	ldr	r2, [r3, #4]
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	689b      	ldr	r3, [r3, #8]
 8009560:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009566:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	691b      	ldr	r3, [r3, #16]
 800956c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009572:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	699b      	ldr	r3, [r3, #24]
 8009578:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800957e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	6a1b      	ldr	r3, [r3, #32]
 8009584:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009586:	697a      	ldr	r2, [r7, #20]
 8009588:	4313      	orrs	r3, r2
 800958a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009590:	2b04      	cmp	r3, #4
 8009592:	d107      	bne.n	80095a4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800959c:	4313      	orrs	r3, r2
 800959e:	697a      	ldr	r2, [r7, #20]
 80095a0:	4313      	orrs	r3, r2
 80095a2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	697a      	ldr	r2, [r7, #20]
 80095aa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	695b      	ldr	r3, [r3, #20]
 80095b2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80095b4:	697b      	ldr	r3, [r7, #20]
 80095b6:	f023 0307 	bic.w	r3, r3, #7
 80095ba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095c0:	697a      	ldr	r2, [r7, #20]
 80095c2:	4313      	orrs	r3, r2
 80095c4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095ca:	2b04      	cmp	r3, #4
 80095cc:	d117      	bne.n	80095fe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095d2:	697a      	ldr	r2, [r7, #20]
 80095d4:	4313      	orrs	r3, r2
 80095d6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d00e      	beq.n	80095fe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	f000 f9e9 	bl	80099b8 <DMA_CheckFifoParam>
 80095e6:	4603      	mov	r3, r0
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d008      	beq.n	80095fe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2240      	movs	r2, #64	; 0x40
 80095f0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	2201      	movs	r2, #1
 80095f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80095fa:	2301      	movs	r3, #1
 80095fc:	e016      	b.n	800962c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	697a      	ldr	r2, [r7, #20]
 8009604:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8009606:	6878      	ldr	r0, [r7, #4]
 8009608:	f000 f9a0 	bl	800994c <DMA_CalcBaseAndBitshift>
 800960c:	4603      	mov	r3, r0
 800960e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009614:	223f      	movs	r2, #63	; 0x3f
 8009616:	409a      	lsls	r2, r3
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2200      	movs	r2, #0
 8009620:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	2201      	movs	r2, #1
 8009626:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800962a:	2300      	movs	r3, #0
}
 800962c:	4618      	mov	r0, r3
 800962e:	3718      	adds	r7, #24
 8009630:	46bd      	mov	sp, r7
 8009632:	bd80      	pop	{r7, pc}
 8009634:	f010803f 	.word	0xf010803f

08009638 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b086      	sub	sp, #24
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8009640:	2300      	movs	r3, #0
 8009642:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8009644:	4b92      	ldr	r3, [pc, #584]	; (8009890 <HAL_DMA_IRQHandler+0x258>)
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	4a92      	ldr	r2, [pc, #584]	; (8009894 <HAL_DMA_IRQHandler+0x25c>)
 800964a:	fba2 2303 	umull	r2, r3, r2, r3
 800964e:	0a9b      	lsrs	r3, r3, #10
 8009650:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009656:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8009658:	693b      	ldr	r3, [r7, #16]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009662:	2208      	movs	r2, #8
 8009664:	409a      	lsls	r2, r3
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	4013      	ands	r3, r2
 800966a:	2b00      	cmp	r3, #0
 800966c:	d01a      	beq.n	80096a4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	f003 0304 	and.w	r3, r3, #4
 8009678:	2b00      	cmp	r3, #0
 800967a:	d013      	beq.n	80096a4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	681a      	ldr	r2, [r3, #0]
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	f022 0204 	bic.w	r2, r2, #4
 800968a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009690:	2208      	movs	r2, #8
 8009692:	409a      	lsls	r2, r3
 8009694:	693b      	ldr	r3, [r7, #16]
 8009696:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800969c:	f043 0201 	orr.w	r2, r3, #1
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80096a8:	2201      	movs	r2, #1
 80096aa:	409a      	lsls	r2, r3
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	4013      	ands	r3, r2
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d012      	beq.n	80096da <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	695b      	ldr	r3, [r3, #20]
 80096ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d00b      	beq.n	80096da <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80096c6:	2201      	movs	r2, #1
 80096c8:	409a      	lsls	r2, r3
 80096ca:	693b      	ldr	r3, [r7, #16]
 80096cc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096d2:	f043 0202 	orr.w	r2, r3, #2
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80096de:	2204      	movs	r2, #4
 80096e0:	409a      	lsls	r2, r3
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	4013      	ands	r3, r2
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d012      	beq.n	8009710 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f003 0302 	and.w	r3, r3, #2
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d00b      	beq.n	8009710 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80096fc:	2204      	movs	r2, #4
 80096fe:	409a      	lsls	r2, r3
 8009700:	693b      	ldr	r3, [r7, #16]
 8009702:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009708:	f043 0204 	orr.w	r2, r3, #4
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009714:	2210      	movs	r2, #16
 8009716:	409a      	lsls	r2, r3
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	4013      	ands	r3, r2
 800971c:	2b00      	cmp	r3, #0
 800971e:	d043      	beq.n	80097a8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f003 0308 	and.w	r3, r3, #8
 800972a:	2b00      	cmp	r3, #0
 800972c:	d03c      	beq.n	80097a8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009732:	2210      	movs	r2, #16
 8009734:	409a      	lsls	r2, r3
 8009736:	693b      	ldr	r3, [r7, #16]
 8009738:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009744:	2b00      	cmp	r3, #0
 8009746:	d018      	beq.n	800977a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009752:	2b00      	cmp	r3, #0
 8009754:	d108      	bne.n	8009768 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800975a:	2b00      	cmp	r3, #0
 800975c:	d024      	beq.n	80097a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	4798      	blx	r3
 8009766:	e01f      	b.n	80097a8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800976c:	2b00      	cmp	r3, #0
 800976e:	d01b      	beq.n	80097a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009774:	6878      	ldr	r0, [r7, #4]
 8009776:	4798      	blx	r3
 8009778:	e016      	b.n	80097a8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009784:	2b00      	cmp	r3, #0
 8009786:	d107      	bne.n	8009798 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	681a      	ldr	r2, [r3, #0]
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	f022 0208 	bic.w	r2, r2, #8
 8009796:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800979c:	2b00      	cmp	r3, #0
 800979e:	d003      	beq.n	80097a8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097a4:	6878      	ldr	r0, [r7, #4]
 80097a6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80097ac:	2220      	movs	r2, #32
 80097ae:	409a      	lsls	r2, r3
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	4013      	ands	r3, r2
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	f000 808e 	beq.w	80098d6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	f003 0310 	and.w	r3, r3, #16
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	f000 8086 	beq.w	80098d6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80097ce:	2220      	movs	r2, #32
 80097d0:	409a      	lsls	r2, r3
 80097d2:	693b      	ldr	r3, [r7, #16]
 80097d4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80097dc:	b2db      	uxtb	r3, r3
 80097de:	2b05      	cmp	r3, #5
 80097e0:	d136      	bne.n	8009850 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	681a      	ldr	r2, [r3, #0]
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	f022 0216 	bic.w	r2, r2, #22
 80097f0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	695a      	ldr	r2, [r3, #20]
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009800:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009806:	2b00      	cmp	r3, #0
 8009808:	d103      	bne.n	8009812 <HAL_DMA_IRQHandler+0x1da>
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800980e:	2b00      	cmp	r3, #0
 8009810:	d007      	beq.n	8009822 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	681a      	ldr	r2, [r3, #0]
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	f022 0208 	bic.w	r2, r2, #8
 8009820:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009826:	223f      	movs	r2, #63	; 0x3f
 8009828:	409a      	lsls	r2, r3
 800982a:	693b      	ldr	r3, [r7, #16]
 800982c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	2200      	movs	r2, #0
 8009832:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2201      	movs	r2, #1
 800983a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009842:	2b00      	cmp	r3, #0
 8009844:	d07d      	beq.n	8009942 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800984a:	6878      	ldr	r0, [r7, #4]
 800984c:	4798      	blx	r3
        }
        return;
 800984e:	e078      	b.n	8009942 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800985a:	2b00      	cmp	r3, #0
 800985c:	d01c      	beq.n	8009898 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009868:	2b00      	cmp	r3, #0
 800986a:	d108      	bne.n	800987e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009870:	2b00      	cmp	r3, #0
 8009872:	d030      	beq.n	80098d6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009878:	6878      	ldr	r0, [r7, #4]
 800987a:	4798      	blx	r3
 800987c:	e02b      	b.n	80098d6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009882:	2b00      	cmp	r3, #0
 8009884:	d027      	beq.n	80098d6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	4798      	blx	r3
 800988e:	e022      	b.n	80098d6 <HAL_DMA_IRQHandler+0x29e>
 8009890:	20000000 	.word	0x20000000
 8009894:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d10f      	bne.n	80098c6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	681a      	ldr	r2, [r3, #0]
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f022 0210 	bic.w	r2, r2, #16
 80098b4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2200      	movs	r2, #0
 80098ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	2201      	movs	r2, #1
 80098c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d003      	beq.n	80098d6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d032      	beq.n	8009944 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098e2:	f003 0301 	and.w	r3, r3, #1
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d022      	beq.n	8009930 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	2205      	movs	r2, #5
 80098ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	681a      	ldr	r2, [r3, #0]
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f022 0201 	bic.w	r2, r2, #1
 8009900:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8009902:	68bb      	ldr	r3, [r7, #8]
 8009904:	3301      	adds	r3, #1
 8009906:	60bb      	str	r3, [r7, #8]
 8009908:	697a      	ldr	r2, [r7, #20]
 800990a:	429a      	cmp	r2, r3
 800990c:	d307      	bcc.n	800991e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	f003 0301 	and.w	r3, r3, #1
 8009918:	2b00      	cmp	r3, #0
 800991a:	d1f2      	bne.n	8009902 <HAL_DMA_IRQHandler+0x2ca>
 800991c:	e000      	b.n	8009920 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800991e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2200      	movs	r2, #0
 8009924:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2201      	movs	r2, #1
 800992c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009934:	2b00      	cmp	r3, #0
 8009936:	d005      	beq.n	8009944 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800993c:	6878      	ldr	r0, [r7, #4]
 800993e:	4798      	blx	r3
 8009940:	e000      	b.n	8009944 <HAL_DMA_IRQHandler+0x30c>
        return;
 8009942:	bf00      	nop
    }
  }
}
 8009944:	3718      	adds	r7, #24
 8009946:	46bd      	mov	sp, r7
 8009948:	bd80      	pop	{r7, pc}
 800994a:	bf00      	nop

0800994c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800994c:	b480      	push	{r7}
 800994e:	b085      	sub	sp, #20
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	b2db      	uxtb	r3, r3
 800995a:	3b10      	subs	r3, #16
 800995c:	4a14      	ldr	r2, [pc, #80]	; (80099b0 <DMA_CalcBaseAndBitshift+0x64>)
 800995e:	fba2 2303 	umull	r2, r3, r2, r3
 8009962:	091b      	lsrs	r3, r3, #4
 8009964:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8009966:	4a13      	ldr	r2, [pc, #76]	; (80099b4 <DMA_CalcBaseAndBitshift+0x68>)
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	4413      	add	r3, r2
 800996c:	781b      	ldrb	r3, [r3, #0]
 800996e:	461a      	mov	r2, r3
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	2b03      	cmp	r3, #3
 8009978:	d909      	bls.n	800998e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8009982:	f023 0303 	bic.w	r3, r3, #3
 8009986:	1d1a      	adds	r2, r3, #4
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	659a      	str	r2, [r3, #88]	; 0x58
 800998c:	e007      	b.n	800999e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8009996:	f023 0303 	bic.w	r3, r3, #3
 800999a:	687a      	ldr	r2, [r7, #4]
 800999c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80099a2:	4618      	mov	r0, r3
 80099a4:	3714      	adds	r7, #20
 80099a6:	46bd      	mov	sp, r7
 80099a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ac:	4770      	bx	lr
 80099ae:	bf00      	nop
 80099b0:	aaaaaaab 	.word	0xaaaaaaab
 80099b4:	08032e18 	.word	0x08032e18

080099b8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80099b8:	b480      	push	{r7}
 80099ba:	b085      	sub	sp, #20
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80099c0:	2300      	movs	r3, #0
 80099c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099c8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	699b      	ldr	r3, [r3, #24]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d11f      	bne.n	8009a12 <DMA_CheckFifoParam+0x5a>
 80099d2:	68bb      	ldr	r3, [r7, #8]
 80099d4:	2b03      	cmp	r3, #3
 80099d6:	d856      	bhi.n	8009a86 <DMA_CheckFifoParam+0xce>
 80099d8:	a201      	add	r2, pc, #4	; (adr r2, 80099e0 <DMA_CheckFifoParam+0x28>)
 80099da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099de:	bf00      	nop
 80099e0:	080099f1 	.word	0x080099f1
 80099e4:	08009a03 	.word	0x08009a03
 80099e8:	080099f1 	.word	0x080099f1
 80099ec:	08009a87 	.word	0x08009a87
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d046      	beq.n	8009a8a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80099fc:	2301      	movs	r3, #1
 80099fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009a00:	e043      	b.n	8009a8a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a06:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009a0a:	d140      	bne.n	8009a8e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8009a0c:	2301      	movs	r3, #1
 8009a0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009a10:	e03d      	b.n	8009a8e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	699b      	ldr	r3, [r3, #24]
 8009a16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a1a:	d121      	bne.n	8009a60 <DMA_CheckFifoParam+0xa8>
 8009a1c:	68bb      	ldr	r3, [r7, #8]
 8009a1e:	2b03      	cmp	r3, #3
 8009a20:	d837      	bhi.n	8009a92 <DMA_CheckFifoParam+0xda>
 8009a22:	a201      	add	r2, pc, #4	; (adr r2, 8009a28 <DMA_CheckFifoParam+0x70>)
 8009a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a28:	08009a39 	.word	0x08009a39
 8009a2c:	08009a3f 	.word	0x08009a3f
 8009a30:	08009a39 	.word	0x08009a39
 8009a34:	08009a51 	.word	0x08009a51
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8009a38:	2301      	movs	r3, #1
 8009a3a:	73fb      	strb	r3, [r7, #15]
      break;
 8009a3c:	e030      	b.n	8009aa0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d025      	beq.n	8009a96 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009a4e:	e022      	b.n	8009a96 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a54:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009a58:	d11f      	bne.n	8009a9a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8009a5a:	2301      	movs	r3, #1
 8009a5c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8009a5e:	e01c      	b.n	8009a9a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8009a60:	68bb      	ldr	r3, [r7, #8]
 8009a62:	2b02      	cmp	r3, #2
 8009a64:	d903      	bls.n	8009a6e <DMA_CheckFifoParam+0xb6>
 8009a66:	68bb      	ldr	r3, [r7, #8]
 8009a68:	2b03      	cmp	r3, #3
 8009a6a:	d003      	beq.n	8009a74 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8009a6c:	e018      	b.n	8009aa0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8009a6e:	2301      	movs	r3, #1
 8009a70:	73fb      	strb	r3, [r7, #15]
      break;
 8009a72:	e015      	b.n	8009aa0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d00e      	beq.n	8009a9e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8009a80:	2301      	movs	r3, #1
 8009a82:	73fb      	strb	r3, [r7, #15]
      break;
 8009a84:	e00b      	b.n	8009a9e <DMA_CheckFifoParam+0xe6>
      break;
 8009a86:	bf00      	nop
 8009a88:	e00a      	b.n	8009aa0 <DMA_CheckFifoParam+0xe8>
      break;
 8009a8a:	bf00      	nop
 8009a8c:	e008      	b.n	8009aa0 <DMA_CheckFifoParam+0xe8>
      break;
 8009a8e:	bf00      	nop
 8009a90:	e006      	b.n	8009aa0 <DMA_CheckFifoParam+0xe8>
      break;
 8009a92:	bf00      	nop
 8009a94:	e004      	b.n	8009aa0 <DMA_CheckFifoParam+0xe8>
      break;
 8009a96:	bf00      	nop
 8009a98:	e002      	b.n	8009aa0 <DMA_CheckFifoParam+0xe8>
      break;   
 8009a9a:	bf00      	nop
 8009a9c:	e000      	b.n	8009aa0 <DMA_CheckFifoParam+0xe8>
      break;
 8009a9e:	bf00      	nop
    }
  } 
  
  return status; 
 8009aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	3714      	adds	r7, #20
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aac:	4770      	bx	lr
 8009aae:	bf00      	nop

08009ab0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009ab0:	b480      	push	{r7}
 8009ab2:	b089      	sub	sp, #36	; 0x24
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
 8009ab8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8009aba:	2300      	movs	r3, #0
 8009abc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8009abe:	2300      	movs	r3, #0
 8009ac0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	61fb      	str	r3, [r7, #28]
 8009aca:	e165      	b.n	8009d98 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8009acc:	2201      	movs	r2, #1
 8009ace:	69fb      	ldr	r3, [r7, #28]
 8009ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8009ad4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	697a      	ldr	r2, [r7, #20]
 8009adc:	4013      	ands	r3, r2
 8009ade:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8009ae0:	693a      	ldr	r2, [r7, #16]
 8009ae2:	697b      	ldr	r3, [r7, #20]
 8009ae4:	429a      	cmp	r2, r3
 8009ae6:	f040 8154 	bne.w	8009d92 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	685b      	ldr	r3, [r3, #4]
 8009aee:	f003 0303 	and.w	r3, r3, #3
 8009af2:	2b01      	cmp	r3, #1
 8009af4:	d005      	beq.n	8009b02 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009af6:	683b      	ldr	r3, [r7, #0]
 8009af8:	685b      	ldr	r3, [r3, #4]
 8009afa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8009afe:	2b02      	cmp	r3, #2
 8009b00:	d130      	bne.n	8009b64 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	689b      	ldr	r3, [r3, #8]
 8009b06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8009b08:	69fb      	ldr	r3, [r7, #28]
 8009b0a:	005b      	lsls	r3, r3, #1
 8009b0c:	2203      	movs	r2, #3
 8009b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8009b12:	43db      	mvns	r3, r3
 8009b14:	69ba      	ldr	r2, [r7, #24]
 8009b16:	4013      	ands	r3, r2
 8009b18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	68da      	ldr	r2, [r3, #12]
 8009b1e:	69fb      	ldr	r3, [r7, #28]
 8009b20:	005b      	lsls	r3, r3, #1
 8009b22:	fa02 f303 	lsl.w	r3, r2, r3
 8009b26:	69ba      	ldr	r2, [r7, #24]
 8009b28:	4313      	orrs	r3, r2
 8009b2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	69ba      	ldr	r2, [r7, #24]
 8009b30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	685b      	ldr	r3, [r3, #4]
 8009b36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009b38:	2201      	movs	r2, #1
 8009b3a:	69fb      	ldr	r3, [r7, #28]
 8009b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8009b40:	43db      	mvns	r3, r3
 8009b42:	69ba      	ldr	r2, [r7, #24]
 8009b44:	4013      	ands	r3, r2
 8009b46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	685b      	ldr	r3, [r3, #4]
 8009b4c:	091b      	lsrs	r3, r3, #4
 8009b4e:	f003 0201 	and.w	r2, r3, #1
 8009b52:	69fb      	ldr	r3, [r7, #28]
 8009b54:	fa02 f303 	lsl.w	r3, r2, r3
 8009b58:	69ba      	ldr	r2, [r7, #24]
 8009b5a:	4313      	orrs	r3, r2
 8009b5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	69ba      	ldr	r2, [r7, #24]
 8009b62:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	685b      	ldr	r3, [r3, #4]
 8009b68:	f003 0303 	and.w	r3, r3, #3
 8009b6c:	2b03      	cmp	r3, #3
 8009b6e:	d017      	beq.n	8009ba0 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	68db      	ldr	r3, [r3, #12]
 8009b74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8009b76:	69fb      	ldr	r3, [r7, #28]
 8009b78:	005b      	lsls	r3, r3, #1
 8009b7a:	2203      	movs	r2, #3
 8009b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8009b80:	43db      	mvns	r3, r3
 8009b82:	69ba      	ldr	r2, [r7, #24]
 8009b84:	4013      	ands	r3, r2
 8009b86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	689a      	ldr	r2, [r3, #8]
 8009b8c:	69fb      	ldr	r3, [r7, #28]
 8009b8e:	005b      	lsls	r3, r3, #1
 8009b90:	fa02 f303 	lsl.w	r3, r2, r3
 8009b94:	69ba      	ldr	r2, [r7, #24]
 8009b96:	4313      	orrs	r3, r2
 8009b98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	69ba      	ldr	r2, [r7, #24]
 8009b9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009ba0:	683b      	ldr	r3, [r7, #0]
 8009ba2:	685b      	ldr	r3, [r3, #4]
 8009ba4:	f003 0303 	and.w	r3, r3, #3
 8009ba8:	2b02      	cmp	r3, #2
 8009baa:	d123      	bne.n	8009bf4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009bac:	69fb      	ldr	r3, [r7, #28]
 8009bae:	08da      	lsrs	r2, r3, #3
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	3208      	adds	r2, #8
 8009bb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8009bba:	69fb      	ldr	r3, [r7, #28]
 8009bbc:	f003 0307 	and.w	r3, r3, #7
 8009bc0:	009b      	lsls	r3, r3, #2
 8009bc2:	220f      	movs	r2, #15
 8009bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8009bc8:	43db      	mvns	r3, r3
 8009bca:	69ba      	ldr	r2, [r7, #24]
 8009bcc:	4013      	ands	r3, r2
 8009bce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8009bd0:	683b      	ldr	r3, [r7, #0]
 8009bd2:	691a      	ldr	r2, [r3, #16]
 8009bd4:	69fb      	ldr	r3, [r7, #28]
 8009bd6:	f003 0307 	and.w	r3, r3, #7
 8009bda:	009b      	lsls	r3, r3, #2
 8009bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8009be0:	69ba      	ldr	r2, [r7, #24]
 8009be2:	4313      	orrs	r3, r2
 8009be4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009be6:	69fb      	ldr	r3, [r7, #28]
 8009be8:	08da      	lsrs	r2, r3, #3
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	3208      	adds	r2, #8
 8009bee:	69b9      	ldr	r1, [r7, #24]
 8009bf0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8009bfa:	69fb      	ldr	r3, [r7, #28]
 8009bfc:	005b      	lsls	r3, r3, #1
 8009bfe:	2203      	movs	r2, #3
 8009c00:	fa02 f303 	lsl.w	r3, r2, r3
 8009c04:	43db      	mvns	r3, r3
 8009c06:	69ba      	ldr	r2, [r7, #24]
 8009c08:	4013      	ands	r3, r2
 8009c0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	685b      	ldr	r3, [r3, #4]
 8009c10:	f003 0203 	and.w	r2, r3, #3
 8009c14:	69fb      	ldr	r3, [r7, #28]
 8009c16:	005b      	lsls	r3, r3, #1
 8009c18:	fa02 f303 	lsl.w	r3, r2, r3
 8009c1c:	69ba      	ldr	r2, [r7, #24]
 8009c1e:	4313      	orrs	r3, r2
 8009c20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	69ba      	ldr	r2, [r7, #24]
 8009c26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	685b      	ldr	r3, [r3, #4]
 8009c2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	f000 80ae 	beq.w	8009d92 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009c36:	2300      	movs	r3, #0
 8009c38:	60fb      	str	r3, [r7, #12]
 8009c3a:	4b5d      	ldr	r3, [pc, #372]	; (8009db0 <HAL_GPIO_Init+0x300>)
 8009c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c3e:	4a5c      	ldr	r2, [pc, #368]	; (8009db0 <HAL_GPIO_Init+0x300>)
 8009c40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009c44:	6453      	str	r3, [r2, #68]	; 0x44
 8009c46:	4b5a      	ldr	r3, [pc, #360]	; (8009db0 <HAL_GPIO_Init+0x300>)
 8009c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009c4e:	60fb      	str	r3, [r7, #12]
 8009c50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009c52:	4a58      	ldr	r2, [pc, #352]	; (8009db4 <HAL_GPIO_Init+0x304>)
 8009c54:	69fb      	ldr	r3, [r7, #28]
 8009c56:	089b      	lsrs	r3, r3, #2
 8009c58:	3302      	adds	r3, #2
 8009c5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8009c60:	69fb      	ldr	r3, [r7, #28]
 8009c62:	f003 0303 	and.w	r3, r3, #3
 8009c66:	009b      	lsls	r3, r3, #2
 8009c68:	220f      	movs	r2, #15
 8009c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8009c6e:	43db      	mvns	r3, r3
 8009c70:	69ba      	ldr	r2, [r7, #24]
 8009c72:	4013      	ands	r3, r2
 8009c74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	4a4f      	ldr	r2, [pc, #316]	; (8009db8 <HAL_GPIO_Init+0x308>)
 8009c7a:	4293      	cmp	r3, r2
 8009c7c:	d025      	beq.n	8009cca <HAL_GPIO_Init+0x21a>
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	4a4e      	ldr	r2, [pc, #312]	; (8009dbc <HAL_GPIO_Init+0x30c>)
 8009c82:	4293      	cmp	r3, r2
 8009c84:	d01f      	beq.n	8009cc6 <HAL_GPIO_Init+0x216>
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	4a4d      	ldr	r2, [pc, #308]	; (8009dc0 <HAL_GPIO_Init+0x310>)
 8009c8a:	4293      	cmp	r3, r2
 8009c8c:	d019      	beq.n	8009cc2 <HAL_GPIO_Init+0x212>
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	4a4c      	ldr	r2, [pc, #304]	; (8009dc4 <HAL_GPIO_Init+0x314>)
 8009c92:	4293      	cmp	r3, r2
 8009c94:	d013      	beq.n	8009cbe <HAL_GPIO_Init+0x20e>
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	4a4b      	ldr	r2, [pc, #300]	; (8009dc8 <HAL_GPIO_Init+0x318>)
 8009c9a:	4293      	cmp	r3, r2
 8009c9c:	d00d      	beq.n	8009cba <HAL_GPIO_Init+0x20a>
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	4a4a      	ldr	r2, [pc, #296]	; (8009dcc <HAL_GPIO_Init+0x31c>)
 8009ca2:	4293      	cmp	r3, r2
 8009ca4:	d007      	beq.n	8009cb6 <HAL_GPIO_Init+0x206>
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	4a49      	ldr	r2, [pc, #292]	; (8009dd0 <HAL_GPIO_Init+0x320>)
 8009caa:	4293      	cmp	r3, r2
 8009cac:	d101      	bne.n	8009cb2 <HAL_GPIO_Init+0x202>
 8009cae:	2306      	movs	r3, #6
 8009cb0:	e00c      	b.n	8009ccc <HAL_GPIO_Init+0x21c>
 8009cb2:	2307      	movs	r3, #7
 8009cb4:	e00a      	b.n	8009ccc <HAL_GPIO_Init+0x21c>
 8009cb6:	2305      	movs	r3, #5
 8009cb8:	e008      	b.n	8009ccc <HAL_GPIO_Init+0x21c>
 8009cba:	2304      	movs	r3, #4
 8009cbc:	e006      	b.n	8009ccc <HAL_GPIO_Init+0x21c>
 8009cbe:	2303      	movs	r3, #3
 8009cc0:	e004      	b.n	8009ccc <HAL_GPIO_Init+0x21c>
 8009cc2:	2302      	movs	r3, #2
 8009cc4:	e002      	b.n	8009ccc <HAL_GPIO_Init+0x21c>
 8009cc6:	2301      	movs	r3, #1
 8009cc8:	e000      	b.n	8009ccc <HAL_GPIO_Init+0x21c>
 8009cca:	2300      	movs	r3, #0
 8009ccc:	69fa      	ldr	r2, [r7, #28]
 8009cce:	f002 0203 	and.w	r2, r2, #3
 8009cd2:	0092      	lsls	r2, r2, #2
 8009cd4:	4093      	lsls	r3, r2
 8009cd6:	69ba      	ldr	r2, [r7, #24]
 8009cd8:	4313      	orrs	r3, r2
 8009cda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009cdc:	4935      	ldr	r1, [pc, #212]	; (8009db4 <HAL_GPIO_Init+0x304>)
 8009cde:	69fb      	ldr	r3, [r7, #28]
 8009ce0:	089b      	lsrs	r3, r3, #2
 8009ce2:	3302      	adds	r3, #2
 8009ce4:	69ba      	ldr	r2, [r7, #24]
 8009ce6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009cea:	4b3a      	ldr	r3, [pc, #232]	; (8009dd4 <HAL_GPIO_Init+0x324>)
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009cf0:	693b      	ldr	r3, [r7, #16]
 8009cf2:	43db      	mvns	r3, r3
 8009cf4:	69ba      	ldr	r2, [r7, #24]
 8009cf6:	4013      	ands	r3, r2
 8009cf8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	685b      	ldr	r3, [r3, #4]
 8009cfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d003      	beq.n	8009d0e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8009d06:	69ba      	ldr	r2, [r7, #24]
 8009d08:	693b      	ldr	r3, [r7, #16]
 8009d0a:	4313      	orrs	r3, r2
 8009d0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009d0e:	4a31      	ldr	r2, [pc, #196]	; (8009dd4 <HAL_GPIO_Init+0x324>)
 8009d10:	69bb      	ldr	r3, [r7, #24]
 8009d12:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8009d14:	4b2f      	ldr	r3, [pc, #188]	; (8009dd4 <HAL_GPIO_Init+0x324>)
 8009d16:	685b      	ldr	r3, [r3, #4]
 8009d18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009d1a:	693b      	ldr	r3, [r7, #16]
 8009d1c:	43db      	mvns	r3, r3
 8009d1e:	69ba      	ldr	r2, [r7, #24]
 8009d20:	4013      	ands	r3, r2
 8009d22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	685b      	ldr	r3, [r3, #4]
 8009d28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d003      	beq.n	8009d38 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8009d30:	69ba      	ldr	r2, [r7, #24]
 8009d32:	693b      	ldr	r3, [r7, #16]
 8009d34:	4313      	orrs	r3, r2
 8009d36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8009d38:	4a26      	ldr	r2, [pc, #152]	; (8009dd4 <HAL_GPIO_Init+0x324>)
 8009d3a:	69bb      	ldr	r3, [r7, #24]
 8009d3c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009d3e:	4b25      	ldr	r3, [pc, #148]	; (8009dd4 <HAL_GPIO_Init+0x324>)
 8009d40:	689b      	ldr	r3, [r3, #8]
 8009d42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009d44:	693b      	ldr	r3, [r7, #16]
 8009d46:	43db      	mvns	r3, r3
 8009d48:	69ba      	ldr	r2, [r7, #24]
 8009d4a:	4013      	ands	r3, r2
 8009d4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	685b      	ldr	r3, [r3, #4]
 8009d52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d003      	beq.n	8009d62 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8009d5a:	69ba      	ldr	r2, [r7, #24]
 8009d5c:	693b      	ldr	r3, [r7, #16]
 8009d5e:	4313      	orrs	r3, r2
 8009d60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8009d62:	4a1c      	ldr	r2, [pc, #112]	; (8009dd4 <HAL_GPIO_Init+0x324>)
 8009d64:	69bb      	ldr	r3, [r7, #24]
 8009d66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009d68:	4b1a      	ldr	r3, [pc, #104]	; (8009dd4 <HAL_GPIO_Init+0x324>)
 8009d6a:	68db      	ldr	r3, [r3, #12]
 8009d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009d6e:	693b      	ldr	r3, [r7, #16]
 8009d70:	43db      	mvns	r3, r3
 8009d72:	69ba      	ldr	r2, [r7, #24]
 8009d74:	4013      	ands	r3, r2
 8009d76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	685b      	ldr	r3, [r3, #4]
 8009d7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d003      	beq.n	8009d8c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8009d84:	69ba      	ldr	r2, [r7, #24]
 8009d86:	693b      	ldr	r3, [r7, #16]
 8009d88:	4313      	orrs	r3, r2
 8009d8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8009d8c:	4a11      	ldr	r2, [pc, #68]	; (8009dd4 <HAL_GPIO_Init+0x324>)
 8009d8e:	69bb      	ldr	r3, [r7, #24]
 8009d90:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009d92:	69fb      	ldr	r3, [r7, #28]
 8009d94:	3301      	adds	r3, #1
 8009d96:	61fb      	str	r3, [r7, #28]
 8009d98:	69fb      	ldr	r3, [r7, #28]
 8009d9a:	2b0f      	cmp	r3, #15
 8009d9c:	f67f ae96 	bls.w	8009acc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8009da0:	bf00      	nop
 8009da2:	bf00      	nop
 8009da4:	3724      	adds	r7, #36	; 0x24
 8009da6:	46bd      	mov	sp, r7
 8009da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dac:	4770      	bx	lr
 8009dae:	bf00      	nop
 8009db0:	40023800 	.word	0x40023800
 8009db4:	40013800 	.word	0x40013800
 8009db8:	40020000 	.word	0x40020000
 8009dbc:	40020400 	.word	0x40020400
 8009dc0:	40020800 	.word	0x40020800
 8009dc4:	40020c00 	.word	0x40020c00
 8009dc8:	40021000 	.word	0x40021000
 8009dcc:	40021400 	.word	0x40021400
 8009dd0:	40021800 	.word	0x40021800
 8009dd4:	40013c00 	.word	0x40013c00

08009dd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009dd8:	b480      	push	{r7}
 8009dda:	b083      	sub	sp, #12
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
 8009de0:	460b      	mov	r3, r1
 8009de2:	807b      	strh	r3, [r7, #2]
 8009de4:	4613      	mov	r3, r2
 8009de6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009de8:	787b      	ldrb	r3, [r7, #1]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d003      	beq.n	8009df6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009dee:	887a      	ldrh	r2, [r7, #2]
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8009df4:	e003      	b.n	8009dfe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8009df6:	887b      	ldrh	r3, [r7, #2]
 8009df8:	041a      	lsls	r2, r3, #16
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	619a      	str	r2, [r3, #24]
}
 8009dfe:	bf00      	nop
 8009e00:	370c      	adds	r7, #12
 8009e02:	46bd      	mov	sp, r7
 8009e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e08:	4770      	bx	lr
	...

08009e0c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b088      	sub	sp, #32
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d101      	bne.n	8009e1e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8009e1a:	2301      	movs	r3, #1
 8009e1c:	e0e1      	b.n	8009fe2 <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009e24:	b2db      	uxtb	r3, r3
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d109      	bne.n	8009e3e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	4a6d      	ldr	r2, [pc, #436]	; (8009fec <HAL_I2S_Init+0x1e0>)
 8009e36:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8009e38:	6878      	ldr	r0, [r7, #4]
 8009e3a:	f7f8 ff77 	bl	8002d2c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	2202      	movs	r2, #2
 8009e42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	69db      	ldr	r3, [r3, #28]
 8009e4c:	687a      	ldr	r2, [r7, #4]
 8009e4e:	6812      	ldr	r2, [r2, #0]
 8009e50:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8009e54:	f023 030f 	bic.w	r3, r3, #15
 8009e58:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	2202      	movs	r2, #2
 8009e60:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	695b      	ldr	r3, [r3, #20]
 8009e66:	2b02      	cmp	r3, #2
 8009e68:	d06f      	beq.n	8009f4a <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	68db      	ldr	r3, [r3, #12]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d102      	bne.n	8009e78 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8009e72:	2310      	movs	r3, #16
 8009e74:	617b      	str	r3, [r7, #20]
 8009e76:	e001      	b.n	8009e7c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8009e78:	2320      	movs	r3, #32
 8009e7a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	689b      	ldr	r3, [r3, #8]
 8009e80:	2b20      	cmp	r3, #32
 8009e82:	d802      	bhi.n	8009e8a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8009e84:	697b      	ldr	r3, [r7, #20]
 8009e86:	005b      	lsls	r3, r3, #1
 8009e88:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	4a58      	ldr	r2, [pc, #352]	; (8009ff0 <HAL_I2S_Init+0x1e4>)
 8009e90:	4293      	cmp	r3, r2
 8009e92:	d004      	beq.n	8009e9e <HAL_I2S_Init+0x92>
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	4a56      	ldr	r2, [pc, #344]	; (8009ff4 <HAL_I2S_Init+0x1e8>)
 8009e9a:	4293      	cmp	r3, r2
 8009e9c:	d104      	bne.n	8009ea8 <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 8009e9e:	2001      	movs	r0, #1
 8009ea0:	f000 ff48 	bl	800ad34 <HAL_RCCEx_GetPeriphCLKFreq>
 8009ea4:	60f8      	str	r0, [r7, #12]
 8009ea6:	e003      	b.n	8009eb0 <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 8009ea8:	2002      	movs	r0, #2
 8009eaa:	f000 ff43 	bl	800ad34 <HAL_RCCEx_GetPeriphCLKFreq>
 8009eae:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	691b      	ldr	r3, [r3, #16]
 8009eb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009eb8:	d125      	bne.n	8009f06 <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	68db      	ldr	r3, [r3, #12]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d010      	beq.n	8009ee4 <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8009ec2:	697b      	ldr	r3, [r7, #20]
 8009ec4:	009b      	lsls	r3, r3, #2
 8009ec6:	68fa      	ldr	r2, [r7, #12]
 8009ec8:	fbb2 f2f3 	udiv	r2, r2, r3
 8009ecc:	4613      	mov	r3, r2
 8009ece:	009b      	lsls	r3, r3, #2
 8009ed0:	4413      	add	r3, r2
 8009ed2:	005b      	lsls	r3, r3, #1
 8009ed4:	461a      	mov	r2, r3
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	695b      	ldr	r3, [r3, #20]
 8009eda:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ede:	3305      	adds	r3, #5
 8009ee0:	613b      	str	r3, [r7, #16]
 8009ee2:	e01f      	b.n	8009f24 <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8009ee4:	697b      	ldr	r3, [r7, #20]
 8009ee6:	00db      	lsls	r3, r3, #3
 8009ee8:	68fa      	ldr	r2, [r7, #12]
 8009eea:	fbb2 f2f3 	udiv	r2, r2, r3
 8009eee:	4613      	mov	r3, r2
 8009ef0:	009b      	lsls	r3, r3, #2
 8009ef2:	4413      	add	r3, r2
 8009ef4:	005b      	lsls	r3, r3, #1
 8009ef6:	461a      	mov	r2, r3
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	695b      	ldr	r3, [r3, #20]
 8009efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f00:	3305      	adds	r3, #5
 8009f02:	613b      	str	r3, [r7, #16]
 8009f04:	e00e      	b.n	8009f24 <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8009f06:	68fa      	ldr	r2, [r7, #12]
 8009f08:	697b      	ldr	r3, [r7, #20]
 8009f0a:	fbb2 f2f3 	udiv	r2, r2, r3
 8009f0e:	4613      	mov	r3, r2
 8009f10:	009b      	lsls	r3, r3, #2
 8009f12:	4413      	add	r3, r2
 8009f14:	005b      	lsls	r3, r3, #1
 8009f16:	461a      	mov	r2, r3
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	695b      	ldr	r3, [r3, #20]
 8009f1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f20:	3305      	adds	r3, #5
 8009f22:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8009f24:	693b      	ldr	r3, [r7, #16]
 8009f26:	4a34      	ldr	r2, [pc, #208]	; (8009ff8 <HAL_I2S_Init+0x1ec>)
 8009f28:	fba2 2303 	umull	r2, r3, r2, r3
 8009f2c:	08db      	lsrs	r3, r3, #3
 8009f2e:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8009f30:	693b      	ldr	r3, [r7, #16]
 8009f32:	f003 0301 	and.w	r3, r3, #1
 8009f36:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8009f38:	693a      	ldr	r2, [r7, #16]
 8009f3a:	69bb      	ldr	r3, [r7, #24]
 8009f3c:	1ad3      	subs	r3, r2, r3
 8009f3e:	085b      	lsrs	r3, r3, #1
 8009f40:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8009f42:	69bb      	ldr	r3, [r7, #24]
 8009f44:	021b      	lsls	r3, r3, #8
 8009f46:	61bb      	str	r3, [r7, #24]
 8009f48:	e003      	b.n	8009f52 <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8009f4a:	2302      	movs	r3, #2
 8009f4c:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8009f4e:	2300      	movs	r3, #0
 8009f50:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8009f52:	69fb      	ldr	r3, [r7, #28]
 8009f54:	2b01      	cmp	r3, #1
 8009f56:	d902      	bls.n	8009f5e <HAL_I2S_Init+0x152>
 8009f58:	69fb      	ldr	r3, [r7, #28]
 8009f5a:	2bff      	cmp	r3, #255	; 0xff
 8009f5c:	d907      	bls.n	8009f6e <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f62:	f043 0210 	orr.w	r2, r3, #16
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8009f6a:	2301      	movs	r3, #1
 8009f6c:	e039      	b.n	8009fe2 <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	691a      	ldr	r2, [r3, #16]
 8009f72:	69bb      	ldr	r3, [r7, #24]
 8009f74:	ea42 0103 	orr.w	r1, r2, r3
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	69fa      	ldr	r2, [r7, #28]
 8009f7e:	430a      	orrs	r2, r1
 8009f80:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	69db      	ldr	r3, [r3, #28]
 8009f88:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8009f8c:	f023 030f 	bic.w	r3, r3, #15
 8009f90:	687a      	ldr	r2, [r7, #4]
 8009f92:	6851      	ldr	r1, [r2, #4]
 8009f94:	687a      	ldr	r2, [r7, #4]
 8009f96:	6892      	ldr	r2, [r2, #8]
 8009f98:	4311      	orrs	r1, r2
 8009f9a:	687a      	ldr	r2, [r7, #4]
 8009f9c:	68d2      	ldr	r2, [r2, #12]
 8009f9e:	4311      	orrs	r1, r2
 8009fa0:	687a      	ldr	r2, [r7, #4]
 8009fa2:	6992      	ldr	r2, [r2, #24]
 8009fa4:	430a      	orrs	r2, r1
 8009fa6:	431a      	orrs	r2, r3
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009fb0:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	689b      	ldr	r3, [r3, #8]
 8009fb6:	2b30      	cmp	r3, #48	; 0x30
 8009fb8:	d003      	beq.n	8009fc2 <HAL_I2S_Init+0x1b6>
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	689b      	ldr	r3, [r3, #8]
 8009fbe:	2bb0      	cmp	r3, #176	; 0xb0
 8009fc0:	d107      	bne.n	8009fd2 <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	69da      	ldr	r2, [r3, #28]
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009fd0:	61da      	str	r2, [r3, #28]
    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2201      	movs	r2, #1
 8009fdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8009fe0:	2300      	movs	r3, #0
}
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	3720      	adds	r7, #32
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	bd80      	pop	{r7, pc}
 8009fea:	bf00      	nop
 8009fec:	0800a285 	.word	0x0800a285
 8009ff0:	40003800 	.word	0x40003800
 8009ff4:	40003c00 	.word	0x40003c00
 8009ff8:	cccccccd 	.word	0xcccccccd

08009ffc <HAL_I2S_Receive>:
  * @note   In I2S Master Receiver mode, just after enabling the peripheral the clock will be generate
  *         in continuous way and as the I2S is not disabled at the end of the I2S transaction.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b088      	sub	sp, #32
 800a000:	af00      	add	r7, sp, #0
 800a002:	60f8      	str	r0, [r7, #12]
 800a004:	60b9      	str	r1, [r7, #8]
 800a006:	603b      	str	r3, [r7, #0]
 800a008:	4613      	mov	r3, r2
 800a00a:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800a00c:	68bb      	ldr	r3, [r7, #8]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d002      	beq.n	800a018 <HAL_I2S_Receive+0x1c>
 800a012:	88fb      	ldrh	r3, [r7, #6]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d101      	bne.n	800a01c <HAL_I2S_Receive+0x20>
  {
    return  HAL_ERROR;
 800a018:	2301      	movs	r3, #1
 800a01a:	e0b4      	b.n	800a186 <HAL_I2S_Receive+0x18a>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a022:	b2db      	uxtb	r3, r3
 800a024:	2b01      	cmp	r3, #1
 800a026:	d101      	bne.n	800a02c <HAL_I2S_Receive+0x30>
 800a028:	2302      	movs	r3, #2
 800a02a:	e0ac      	b.n	800a186 <HAL_I2S_Receive+0x18a>
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	2201      	movs	r2, #1
 800a030:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a03a:	b2db      	uxtb	r3, r3
 800a03c:	2b01      	cmp	r3, #1
 800a03e:	d005      	beq.n	800a04c <HAL_I2S_Receive+0x50>
  {
    __HAL_UNLOCK(hi2s);
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	2200      	movs	r2, #0
 800a044:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 800a048:	2302      	movs	r3, #2
 800a04a:	e09c      	b.n	800a186 <HAL_I2S_Receive+0x18a>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	2204      	movs	r2, #4
 800a050:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	2200      	movs	r2, #0
 800a058:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pRxBuffPtr = pData;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	68ba      	ldr	r2, [r7, #8]
 800a05e:	62da      	str	r2, [r3, #44]	; 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	69db      	ldr	r3, [r3, #28]
 800a066:	f003 0307 	and.w	r3, r3, #7
 800a06a:	61fb      	str	r3, [r7, #28]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800a06c:	69fb      	ldr	r3, [r7, #28]
 800a06e:	2b03      	cmp	r3, #3
 800a070:	d002      	beq.n	800a078 <HAL_I2S_Receive+0x7c>
 800a072:	69fb      	ldr	r3, [r7, #28]
 800a074:	2b05      	cmp	r3, #5
 800a076:	d10a      	bne.n	800a08e <HAL_I2S_Receive+0x92>
  {
    hi2s->RxXferSize = (Size << 1U);
 800a078:	88fb      	ldrh	r3, [r7, #6]
 800a07a:	005b      	lsls	r3, r3, #1
 800a07c:	b29a      	uxth	r2, r3
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 800a082:	88fb      	ldrh	r3, [r7, #6]
 800a084:	005b      	lsls	r3, r3, #1
 800a086:	b29a      	uxth	r2, r3
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	865a      	strh	r2, [r3, #50]	; 0x32
 800a08c:	e005      	b.n	800a09a <HAL_I2S_Receive+0x9e>
  }
  else
  {
    hi2s->RxXferSize = Size;
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	88fa      	ldrh	r2, [r7, #6]
 800a092:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	88fa      	ldrh	r2, [r7, #6]
 800a098:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* Check if the I2S is already enabled */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	69db      	ldr	r3, [r3, #28]
 800a0a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a0a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a0a8:	d007      	beq.n	800a0ba <HAL_I2S_Receive+0xbe>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	69da      	ldr	r2, [r3, #28]
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a0b8:	61da      	str	r2, [r3, #28]
  }

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	69db      	ldr	r3, [r3, #28]
 800a0c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a0c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a0c8:	d14f      	bne.n	800a16a <HAL_I2S_Receive+0x16e>
  {
    /* Clear the Overrun Flag by a read operation on the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	61bb      	str	r3, [r7, #24]
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	68db      	ldr	r3, [r3, #12]
 800a0d4:	61bb      	str	r3, [r7, #24]
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	689b      	ldr	r3, [r3, #8]
 800a0dc:	61bb      	str	r3, [r7, #24]
 800a0de:	69bb      	ldr	r3, [r7, #24]
  }

  /* Receive data */
  while (hi2s->RxXferCount > 0U)
 800a0e0:	e043      	b.n	800a16a <HAL_I2S_Receive+0x16e>
  {
    /* Wait until RXNE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_RXNE, SET, Timeout) != HAL_OK)
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	2201      	movs	r2, #1
 800a0e6:	2101      	movs	r1, #1
 800a0e8:	68f8      	ldr	r0, [r7, #12]
 800a0ea:	f000 f955 	bl	800a398 <I2S_WaitFlagStateUntilTimeout>
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d00f      	beq.n	800a114 <HAL_I2S_Receive+0x118>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0f8:	f043 0201 	orr.w	r2, r3, #1
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	2201      	movs	r2, #1
 800a104:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      __HAL_UNLOCK(hi2s);
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	2200      	movs	r2, #0
 800a10c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800a110:	2301      	movs	r3, #1
 800a112:	e038      	b.n	800a186 <HAL_I2S_Receive+0x18a>
    }

    (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	68da      	ldr	r2, [r3, #12]
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a11e:	b292      	uxth	r2, r2
 800a120:	801a      	strh	r2, [r3, #0]
    hi2s->pRxBuffPtr++;
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a126:	1c9a      	adds	r2, r3, #2
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2s->RxXferCount--;
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a130:	b29b      	uxth	r3, r3
 800a132:	3b01      	subs	r3, #1
 800a134:	b29a      	uxth	r2, r3
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	865a      	strh	r2, [r3, #50]	; 0x32

    /* Check if an overrun occurs */
    if (__HAL_I2S_GET_FLAG(hi2s, I2S_FLAG_OVR) == SET)
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	689b      	ldr	r3, [r3, #8]
 800a140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a144:	2b40      	cmp	r3, #64	; 0x40
 800a146:	d110      	bne.n	800a16a <HAL_I2S_Receive+0x16e>
    {
      /* Clear overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800a148:	2300      	movs	r3, #0
 800a14a:	617b      	str	r3, [r7, #20]
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	68db      	ldr	r3, [r3, #12]
 800a152:	617b      	str	r3, [r7, #20]
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	689b      	ldr	r3, [r3, #8]
 800a15a:	617b      	str	r3, [r7, #20]
 800a15c:	697b      	ldr	r3, [r7, #20]

      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a162:	f043 0202 	orr.w	r2, r3, #2
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	645a      	str	r2, [r3, #68]	; 0x44
  while (hi2s->RxXferCount > 0U)
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a16e:	b29b      	uxth	r3, r3
 800a170:	2b00      	cmp	r3, #0
 800a172:	d1b6      	bne.n	800a0e2 <HAL_I2S_Receive+0xe6>
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	2201      	movs	r2, #1
 800a178:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  __HAL_UNLOCK(hi2s);
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	2200      	movs	r2, #0
 800a180:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 800a184:	2300      	movs	r3, #0
}
 800a186:	4618      	mov	r0, r3
 800a188:	3720      	adds	r7, #32
 800a18a:	46bd      	mov	sp, r7
 800a18c:	bd80      	pop	{r7, pc}

0800a18e <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800a18e:	b480      	push	{r7}
 800a190:	b083      	sub	sp, #12
 800a192:	af00      	add	r7, sp, #0
 800a194:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800a196:	bf00      	nop
 800a198:	370c      	adds	r7, #12
 800a19a:	46bd      	mov	sp, r7
 800a19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a0:	4770      	bx	lr

0800a1a2 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800a1a2:	b480      	push	{r7}
 800a1a4:	b083      	sub	sp, #12
 800a1a6:	af00      	add	r7, sp, #0
 800a1a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800a1aa:	bf00      	nop
 800a1ac:	370c      	adds	r7, #12
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b4:	4770      	bx	lr

0800a1b6 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800a1b6:	b480      	push	{r7}
 800a1b8:	b083      	sub	sp, #12
 800a1ba:	af00      	add	r7, sp, #0
 800a1bc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800a1be:	bf00      	nop
 800a1c0:	370c      	adds	r7, #12
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c8:	4770      	bx	lr

0800a1ca <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800a1ca:	b580      	push	{r7, lr}
 800a1cc:	b082      	sub	sp, #8
 800a1ce:	af00      	add	r7, sp, #0
 800a1d0:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1d6:	881a      	ldrh	r2, [r3, #0]
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1e2:	1c9a      	adds	r2, r3, #2
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a1ec:	b29b      	uxth	r3, r3
 800a1ee:	3b01      	subs	r3, #1
 800a1f0:	b29a      	uxth	r2, r3
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a1fa:	b29b      	uxth	r3, r3
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d10e      	bne.n	800a21e <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	685a      	ldr	r2, [r3, #4]
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a20e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2201      	movs	r2, #1
 800a214:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800a218:	6878      	ldr	r0, [r7, #4]
 800a21a:	f7ff ffb8 	bl	800a18e <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800a21e:	bf00      	nop
 800a220:	3708      	adds	r7, #8
 800a222:	46bd      	mov	sp, r7
 800a224:	bd80      	pop	{r7, pc}

0800a226 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800a226:	b580      	push	{r7, lr}
 800a228:	b082      	sub	sp, #8
 800a22a:	af00      	add	r7, sp, #0
 800a22c:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	68da      	ldr	r2, [r3, #12]
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a238:	b292      	uxth	r2, r2
 800a23a:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a240:	1c9a      	adds	r2, r3, #2
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a24a:	b29b      	uxth	r3, r3
 800a24c:	3b01      	subs	r3, #1
 800a24e:	b29a      	uxth	r2, r3
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a258:	b29b      	uxth	r3, r3
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d10e      	bne.n	800a27c <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	685a      	ldr	r2, [r3, #4]
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800a26c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	2201      	movs	r2, #1
 800a272:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800a276:	6878      	ldr	r0, [r7, #4]
 800a278:	f7ff ff93 	bl	800a1a2 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800a27c:	bf00      	nop
 800a27e:	3708      	adds	r7, #8
 800a280:	46bd      	mov	sp, r7
 800a282:	bd80      	pop	{r7, pc}

0800a284 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b086      	sub	sp, #24
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	689b      	ldr	r3, [r3, #8]
 800a292:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a29a:	b2db      	uxtb	r3, r3
 800a29c:	2b04      	cmp	r3, #4
 800a29e:	d13a      	bne.n	800a316 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800a2a0:	697b      	ldr	r3, [r7, #20]
 800a2a2:	f003 0301 	and.w	r3, r3, #1
 800a2a6:	2b01      	cmp	r3, #1
 800a2a8:	d109      	bne.n	800a2be <I2S_IRQHandler+0x3a>
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	685b      	ldr	r3, [r3, #4]
 800a2b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2b4:	2b40      	cmp	r3, #64	; 0x40
 800a2b6:	d102      	bne.n	800a2be <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800a2b8:	6878      	ldr	r0, [r7, #4]
 800a2ba:	f7ff ffb4 	bl	800a226 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800a2be:	697b      	ldr	r3, [r7, #20]
 800a2c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2c4:	2b40      	cmp	r3, #64	; 0x40
 800a2c6:	d126      	bne.n	800a316 <I2S_IRQHandler+0x92>
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	685b      	ldr	r3, [r3, #4]
 800a2ce:	f003 0320 	and.w	r3, r3, #32
 800a2d2:	2b20      	cmp	r3, #32
 800a2d4:	d11f      	bne.n	800a316 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	685a      	ldr	r2, [r3, #4]
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800a2e4:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	613b      	str	r3, [r7, #16]
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	68db      	ldr	r3, [r3, #12]
 800a2f0:	613b      	str	r3, [r7, #16]
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	689b      	ldr	r3, [r3, #8]
 800a2f8:	613b      	str	r3, [r7, #16]
 800a2fa:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	2201      	movs	r2, #1
 800a300:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a308:	f043 0202 	orr.w	r2, r3, #2
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800a310:	6878      	ldr	r0, [r7, #4]
 800a312:	f7ff ff50 	bl	800a1b6 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a31c:	b2db      	uxtb	r3, r3
 800a31e:	2b03      	cmp	r3, #3
 800a320:	d136      	bne.n	800a390 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800a322:	697b      	ldr	r3, [r7, #20]
 800a324:	f003 0302 	and.w	r3, r3, #2
 800a328:	2b02      	cmp	r3, #2
 800a32a:	d109      	bne.n	800a340 <I2S_IRQHandler+0xbc>
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	685b      	ldr	r3, [r3, #4]
 800a332:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a336:	2b80      	cmp	r3, #128	; 0x80
 800a338:	d102      	bne.n	800a340 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800a33a:	6878      	ldr	r0, [r7, #4]
 800a33c:	f7ff ff45 	bl	800a1ca <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800a340:	697b      	ldr	r3, [r7, #20]
 800a342:	f003 0308 	and.w	r3, r3, #8
 800a346:	2b08      	cmp	r3, #8
 800a348:	d122      	bne.n	800a390 <I2S_IRQHandler+0x10c>
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	685b      	ldr	r3, [r3, #4]
 800a350:	f003 0320 	and.w	r3, r3, #32
 800a354:	2b20      	cmp	r3, #32
 800a356:	d11b      	bne.n	800a390 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	685a      	ldr	r2, [r3, #4]
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a366:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800a368:	2300      	movs	r3, #0
 800a36a:	60fb      	str	r3, [r7, #12]
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	689b      	ldr	r3, [r3, #8]
 800a372:	60fb      	str	r3, [r7, #12]
 800a374:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	2201      	movs	r2, #1
 800a37a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a382:	f043 0204 	orr.w	r2, r3, #4
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800a38a:	6878      	ldr	r0, [r7, #4]
 800a38c:	f7ff ff13 	bl	800a1b6 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800a390:	bf00      	nop
 800a392:	3718      	adds	r7, #24
 800a394:	46bd      	mov	sp, r7
 800a396:	bd80      	pop	{r7, pc}

0800a398 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b086      	sub	sp, #24
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	60f8      	str	r0, [r7, #12]
 800a3a0:	60b9      	str	r1, [r7, #8]
 800a3a2:	603b      	str	r3, [r7, #0]
 800a3a4:	4613      	mov	r3, r2
 800a3a6:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 800a3a8:	f7fe ff56 	bl	8009258 <HAL_GetTick>
 800a3ac:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800a3ae:	e018      	b.n	800a3e2 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3b6:	d014      	beq.n	800a3e2 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 800a3b8:	f7fe ff4e 	bl	8009258 <HAL_GetTick>
 800a3bc:	4602      	mov	r2, r0
 800a3be:	697b      	ldr	r3, [r7, #20]
 800a3c0:	1ad3      	subs	r3, r2, r3
 800a3c2:	683a      	ldr	r2, [r7, #0]
 800a3c4:	429a      	cmp	r2, r3
 800a3c6:	d902      	bls.n	800a3ce <I2S_WaitFlagStateUntilTimeout+0x36>
 800a3c8:	683b      	ldr	r3, [r7, #0]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d109      	bne.n	800a3e2 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	2201      	movs	r2, #1
 800a3d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	2200      	movs	r2, #0
 800a3da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800a3de:	2303      	movs	r3, #3
 800a3e0:	e00f      	b.n	800a402 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	689a      	ldr	r2, [r3, #8]
 800a3e8:	68bb      	ldr	r3, [r7, #8]
 800a3ea:	4013      	ands	r3, r2
 800a3ec:	68ba      	ldr	r2, [r7, #8]
 800a3ee:	429a      	cmp	r2, r3
 800a3f0:	bf0c      	ite	eq
 800a3f2:	2301      	moveq	r3, #1
 800a3f4:	2300      	movne	r3, #0
 800a3f6:	b2db      	uxtb	r3, r3
 800a3f8:	461a      	mov	r2, r3
 800a3fa:	79fb      	ldrb	r3, [r7, #7]
 800a3fc:	429a      	cmp	r2, r3
 800a3fe:	d1d7      	bne.n	800a3b0 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 800a400:	2300      	movs	r3, #0
}
 800a402:	4618      	mov	r0, r3
 800a404:	3718      	adds	r7, #24
 800a406:	46bd      	mov	sp, r7
 800a408:	bd80      	pop	{r7, pc}
	...

0800a40c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b082      	sub	sp, #8
 800a410:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800a412:	2300      	movs	r3, #0
 800a414:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800a416:	2300      	movs	r3, #0
 800a418:	603b      	str	r3, [r7, #0]
 800a41a:	4b20      	ldr	r3, [pc, #128]	; (800a49c <HAL_PWREx_EnableOverDrive+0x90>)
 800a41c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a41e:	4a1f      	ldr	r2, [pc, #124]	; (800a49c <HAL_PWREx_EnableOverDrive+0x90>)
 800a420:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a424:	6413      	str	r3, [r2, #64]	; 0x40
 800a426:	4b1d      	ldr	r3, [pc, #116]	; (800a49c <HAL_PWREx_EnableOverDrive+0x90>)
 800a428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a42a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a42e:	603b      	str	r3, [r7, #0]
 800a430:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800a432:	4b1b      	ldr	r3, [pc, #108]	; (800a4a0 <HAL_PWREx_EnableOverDrive+0x94>)
 800a434:	2201      	movs	r2, #1
 800a436:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a438:	f7fe ff0e 	bl	8009258 <HAL_GetTick>
 800a43c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800a43e:	e009      	b.n	800a454 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800a440:	f7fe ff0a 	bl	8009258 <HAL_GetTick>
 800a444:	4602      	mov	r2, r0
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	1ad3      	subs	r3, r2, r3
 800a44a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a44e:	d901      	bls.n	800a454 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800a450:	2303      	movs	r3, #3
 800a452:	e01f      	b.n	800a494 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800a454:	4b13      	ldr	r3, [pc, #76]	; (800a4a4 <HAL_PWREx_EnableOverDrive+0x98>)
 800a456:	685b      	ldr	r3, [r3, #4]
 800a458:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a45c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a460:	d1ee      	bne.n	800a440 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800a462:	4b11      	ldr	r3, [pc, #68]	; (800a4a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a464:	2201      	movs	r2, #1
 800a466:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a468:	f7fe fef6 	bl	8009258 <HAL_GetTick>
 800a46c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800a46e:	e009      	b.n	800a484 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800a470:	f7fe fef2 	bl	8009258 <HAL_GetTick>
 800a474:	4602      	mov	r2, r0
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	1ad3      	subs	r3, r2, r3
 800a47a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a47e:	d901      	bls.n	800a484 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800a480:	2303      	movs	r3, #3
 800a482:	e007      	b.n	800a494 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800a484:	4b07      	ldr	r3, [pc, #28]	; (800a4a4 <HAL_PWREx_EnableOverDrive+0x98>)
 800a486:	685b      	ldr	r3, [r3, #4]
 800a488:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a48c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a490:	d1ee      	bne.n	800a470 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800a492:	2300      	movs	r3, #0
}
 800a494:	4618      	mov	r0, r3
 800a496:	3708      	adds	r7, #8
 800a498:	46bd      	mov	sp, r7
 800a49a:	bd80      	pop	{r7, pc}
 800a49c:	40023800 	.word	0x40023800
 800a4a0:	420e0040 	.word	0x420e0040
 800a4a4:	40007000 	.word	0x40007000
 800a4a8:	420e0044 	.word	0x420e0044

0800a4ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b084      	sub	sp, #16
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
 800a4b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d101      	bne.n	800a4c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a4bc:	2301      	movs	r3, #1
 800a4be:	e0cc      	b.n	800a65a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a4c0:	4b68      	ldr	r3, [pc, #416]	; (800a664 <HAL_RCC_ClockConfig+0x1b8>)
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	f003 030f 	and.w	r3, r3, #15
 800a4c8:	683a      	ldr	r2, [r7, #0]
 800a4ca:	429a      	cmp	r2, r3
 800a4cc:	d90c      	bls.n	800a4e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a4ce:	4b65      	ldr	r3, [pc, #404]	; (800a664 <HAL_RCC_ClockConfig+0x1b8>)
 800a4d0:	683a      	ldr	r2, [r7, #0]
 800a4d2:	b2d2      	uxtb	r2, r2
 800a4d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a4d6:	4b63      	ldr	r3, [pc, #396]	; (800a664 <HAL_RCC_ClockConfig+0x1b8>)
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	f003 030f 	and.w	r3, r3, #15
 800a4de:	683a      	ldr	r2, [r7, #0]
 800a4e0:	429a      	cmp	r2, r3
 800a4e2:	d001      	beq.n	800a4e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a4e4:	2301      	movs	r3, #1
 800a4e6:	e0b8      	b.n	800a65a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	f003 0302 	and.w	r3, r3, #2
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d020      	beq.n	800a536 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	f003 0304 	and.w	r3, r3, #4
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d005      	beq.n	800a50c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a500:	4b59      	ldr	r3, [pc, #356]	; (800a668 <HAL_RCC_ClockConfig+0x1bc>)
 800a502:	689b      	ldr	r3, [r3, #8]
 800a504:	4a58      	ldr	r2, [pc, #352]	; (800a668 <HAL_RCC_ClockConfig+0x1bc>)
 800a506:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800a50a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	f003 0308 	and.w	r3, r3, #8
 800a514:	2b00      	cmp	r3, #0
 800a516:	d005      	beq.n	800a524 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a518:	4b53      	ldr	r3, [pc, #332]	; (800a668 <HAL_RCC_ClockConfig+0x1bc>)
 800a51a:	689b      	ldr	r3, [r3, #8]
 800a51c:	4a52      	ldr	r2, [pc, #328]	; (800a668 <HAL_RCC_ClockConfig+0x1bc>)
 800a51e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a522:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a524:	4b50      	ldr	r3, [pc, #320]	; (800a668 <HAL_RCC_ClockConfig+0x1bc>)
 800a526:	689b      	ldr	r3, [r3, #8]
 800a528:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	689b      	ldr	r3, [r3, #8]
 800a530:	494d      	ldr	r1, [pc, #308]	; (800a668 <HAL_RCC_ClockConfig+0x1bc>)
 800a532:	4313      	orrs	r3, r2
 800a534:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	f003 0301 	and.w	r3, r3, #1
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d044      	beq.n	800a5cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	685b      	ldr	r3, [r3, #4]
 800a546:	2b01      	cmp	r3, #1
 800a548:	d107      	bne.n	800a55a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a54a:	4b47      	ldr	r3, [pc, #284]	; (800a668 <HAL_RCC_ClockConfig+0x1bc>)
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a552:	2b00      	cmp	r3, #0
 800a554:	d119      	bne.n	800a58a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a556:	2301      	movs	r3, #1
 800a558:	e07f      	b.n	800a65a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	685b      	ldr	r3, [r3, #4]
 800a55e:	2b02      	cmp	r3, #2
 800a560:	d003      	beq.n	800a56a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a566:	2b03      	cmp	r3, #3
 800a568:	d107      	bne.n	800a57a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a56a:	4b3f      	ldr	r3, [pc, #252]	; (800a668 <HAL_RCC_ClockConfig+0x1bc>)
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a572:	2b00      	cmp	r3, #0
 800a574:	d109      	bne.n	800a58a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a576:	2301      	movs	r3, #1
 800a578:	e06f      	b.n	800a65a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a57a:	4b3b      	ldr	r3, [pc, #236]	; (800a668 <HAL_RCC_ClockConfig+0x1bc>)
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	f003 0302 	and.w	r3, r3, #2
 800a582:	2b00      	cmp	r3, #0
 800a584:	d101      	bne.n	800a58a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a586:	2301      	movs	r3, #1
 800a588:	e067      	b.n	800a65a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a58a:	4b37      	ldr	r3, [pc, #220]	; (800a668 <HAL_RCC_ClockConfig+0x1bc>)
 800a58c:	689b      	ldr	r3, [r3, #8]
 800a58e:	f023 0203 	bic.w	r2, r3, #3
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	685b      	ldr	r3, [r3, #4]
 800a596:	4934      	ldr	r1, [pc, #208]	; (800a668 <HAL_RCC_ClockConfig+0x1bc>)
 800a598:	4313      	orrs	r3, r2
 800a59a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a59c:	f7fe fe5c 	bl	8009258 <HAL_GetTick>
 800a5a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a5a2:	e00a      	b.n	800a5ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a5a4:	f7fe fe58 	bl	8009258 <HAL_GetTick>
 800a5a8:	4602      	mov	r2, r0
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	1ad3      	subs	r3, r2, r3
 800a5ae:	f241 3288 	movw	r2, #5000	; 0x1388
 800a5b2:	4293      	cmp	r3, r2
 800a5b4:	d901      	bls.n	800a5ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a5b6:	2303      	movs	r3, #3
 800a5b8:	e04f      	b.n	800a65a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a5ba:	4b2b      	ldr	r3, [pc, #172]	; (800a668 <HAL_RCC_ClockConfig+0x1bc>)
 800a5bc:	689b      	ldr	r3, [r3, #8]
 800a5be:	f003 020c 	and.w	r2, r3, #12
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	685b      	ldr	r3, [r3, #4]
 800a5c6:	009b      	lsls	r3, r3, #2
 800a5c8:	429a      	cmp	r2, r3
 800a5ca:	d1eb      	bne.n	800a5a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a5cc:	4b25      	ldr	r3, [pc, #148]	; (800a664 <HAL_RCC_ClockConfig+0x1b8>)
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	f003 030f 	and.w	r3, r3, #15
 800a5d4:	683a      	ldr	r2, [r7, #0]
 800a5d6:	429a      	cmp	r2, r3
 800a5d8:	d20c      	bcs.n	800a5f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a5da:	4b22      	ldr	r3, [pc, #136]	; (800a664 <HAL_RCC_ClockConfig+0x1b8>)
 800a5dc:	683a      	ldr	r2, [r7, #0]
 800a5de:	b2d2      	uxtb	r2, r2
 800a5e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a5e2:	4b20      	ldr	r3, [pc, #128]	; (800a664 <HAL_RCC_ClockConfig+0x1b8>)
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	f003 030f 	and.w	r3, r3, #15
 800a5ea:	683a      	ldr	r2, [r7, #0]
 800a5ec:	429a      	cmp	r2, r3
 800a5ee:	d001      	beq.n	800a5f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a5f0:	2301      	movs	r3, #1
 800a5f2:	e032      	b.n	800a65a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	f003 0304 	and.w	r3, r3, #4
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d008      	beq.n	800a612 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a600:	4b19      	ldr	r3, [pc, #100]	; (800a668 <HAL_RCC_ClockConfig+0x1bc>)
 800a602:	689b      	ldr	r3, [r3, #8]
 800a604:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	68db      	ldr	r3, [r3, #12]
 800a60c:	4916      	ldr	r1, [pc, #88]	; (800a668 <HAL_RCC_ClockConfig+0x1bc>)
 800a60e:	4313      	orrs	r3, r2
 800a610:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	f003 0308 	and.w	r3, r3, #8
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d009      	beq.n	800a632 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a61e:	4b12      	ldr	r3, [pc, #72]	; (800a668 <HAL_RCC_ClockConfig+0x1bc>)
 800a620:	689b      	ldr	r3, [r3, #8]
 800a622:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	691b      	ldr	r3, [r3, #16]
 800a62a:	00db      	lsls	r3, r3, #3
 800a62c:	490e      	ldr	r1, [pc, #56]	; (800a668 <HAL_RCC_ClockConfig+0x1bc>)
 800a62e:	4313      	orrs	r3, r2
 800a630:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a632:	f000 fdc7 	bl	800b1c4 <HAL_RCC_GetSysClockFreq>
 800a636:	4602      	mov	r2, r0
 800a638:	4b0b      	ldr	r3, [pc, #44]	; (800a668 <HAL_RCC_ClockConfig+0x1bc>)
 800a63a:	689b      	ldr	r3, [r3, #8]
 800a63c:	091b      	lsrs	r3, r3, #4
 800a63e:	f003 030f 	and.w	r3, r3, #15
 800a642:	490a      	ldr	r1, [pc, #40]	; (800a66c <HAL_RCC_ClockConfig+0x1c0>)
 800a644:	5ccb      	ldrb	r3, [r1, r3]
 800a646:	fa22 f303 	lsr.w	r3, r2, r3
 800a64a:	4a09      	ldr	r2, [pc, #36]	; (800a670 <HAL_RCC_ClockConfig+0x1c4>)
 800a64c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800a64e:	4b09      	ldr	r3, [pc, #36]	; (800a674 <HAL_RCC_ClockConfig+0x1c8>)
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	4618      	mov	r0, r3
 800a654:	f7fe fdbc 	bl	80091d0 <HAL_InitTick>

  return HAL_OK;
 800a658:	2300      	movs	r3, #0
}
 800a65a:	4618      	mov	r0, r3
 800a65c:	3710      	adds	r7, #16
 800a65e:	46bd      	mov	sp, r7
 800a660:	bd80      	pop	{r7, pc}
 800a662:	bf00      	nop
 800a664:	40023c00 	.word	0x40023c00
 800a668:	40023800 	.word	0x40023800
 800a66c:	08015998 	.word	0x08015998
 800a670:	20000000 	.word	0x20000000
 800a674:	20000004 	.word	0x20000004

0800a678 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a678:	b480      	push	{r7}
 800a67a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a67c:	4b03      	ldr	r3, [pc, #12]	; (800a68c <HAL_RCC_GetHCLKFreq+0x14>)
 800a67e:	681b      	ldr	r3, [r3, #0]
}
 800a680:	4618      	mov	r0, r3
 800a682:	46bd      	mov	sp, r7
 800a684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a688:	4770      	bx	lr
 800a68a:	bf00      	nop
 800a68c:	20000000 	.word	0x20000000

0800a690 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a690:	b580      	push	{r7, lr}
 800a692:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a694:	f7ff fff0 	bl	800a678 <HAL_RCC_GetHCLKFreq>
 800a698:	4602      	mov	r2, r0
 800a69a:	4b05      	ldr	r3, [pc, #20]	; (800a6b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a69c:	689b      	ldr	r3, [r3, #8]
 800a69e:	0a9b      	lsrs	r3, r3, #10
 800a6a0:	f003 0307 	and.w	r3, r3, #7
 800a6a4:	4903      	ldr	r1, [pc, #12]	; (800a6b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a6a6:	5ccb      	ldrb	r3, [r1, r3]
 800a6a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	bd80      	pop	{r7, pc}
 800a6b0:	40023800 	.word	0x40023800
 800a6b4:	080159a8 	.word	0x080159a8

0800a6b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800a6bc:	f7ff ffdc 	bl	800a678 <HAL_RCC_GetHCLKFreq>
 800a6c0:	4602      	mov	r2, r0
 800a6c2:	4b05      	ldr	r3, [pc, #20]	; (800a6d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a6c4:	689b      	ldr	r3, [r3, #8]
 800a6c6:	0b5b      	lsrs	r3, r3, #13
 800a6c8:	f003 0307 	and.w	r3, r3, #7
 800a6cc:	4903      	ldr	r1, [pc, #12]	; (800a6dc <HAL_RCC_GetPCLK2Freq+0x24>)
 800a6ce:	5ccb      	ldrb	r3, [r1, r3]
 800a6d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	bd80      	pop	{r7, pc}
 800a6d8:	40023800 	.word	0x40023800
 800a6dc:	080159a8 	.word	0x080159a8

0800a6e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b08c      	sub	sp, #48	; 0x30
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 800a700:	2300      	movs	r3, #0
 800a702:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 800a704:	2300      	movs	r3, #0
 800a706:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 800a708:	2300      	movs	r3, #0
 800a70a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	f003 0301 	and.w	r3, r3, #1
 800a714:	2b00      	cmp	r3, #0
 800a716:	d010      	beq.n	800a73a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800a718:	4b6f      	ldr	r3, [pc, #444]	; (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800a71a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a71e:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a726:	496c      	ldr	r1, [pc, #432]	; (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800a728:	4313      	orrs	r3, r2
 800a72a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a732:	2b00      	cmp	r3, #0
 800a734:	d101      	bne.n	800a73a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800a736:	2301      	movs	r3, #1
 800a738:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	f003 0302 	and.w	r3, r3, #2
 800a742:	2b00      	cmp	r3, #0
 800a744:	d010      	beq.n	800a768 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800a746:	4b64      	ldr	r3, [pc, #400]	; (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800a748:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a74c:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a754:	4960      	ldr	r1, [pc, #384]	; (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800a756:	4313      	orrs	r3, r2
 800a758:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a760:	2b00      	cmp	r3, #0
 800a762:	d101      	bne.n	800a768 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 800a764:	2301      	movs	r3, #1
 800a766:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	f003 0304 	and.w	r3, r3, #4
 800a770:	2b00      	cmp	r3, #0
 800a772:	d017      	beq.n	800a7a4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a774:	4b58      	ldr	r3, [pc, #352]	; (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800a776:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a77a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a782:	4955      	ldr	r1, [pc, #340]	; (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800a784:	4313      	orrs	r3, r2
 800a786:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a78e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a792:	d101      	bne.n	800a798 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 800a794:	2301      	movs	r3, #1
 800a796:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d101      	bne.n	800a7a4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 800a7a0:	2301      	movs	r3, #1
 800a7a2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	f003 0308 	and.w	r3, r3, #8
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d017      	beq.n	800a7e0 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800a7b0:	4b49      	ldr	r3, [pc, #292]	; (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800a7b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a7b6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7be:	4946      	ldr	r1, [pc, #280]	; (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800a7c0:	4313      	orrs	r3, r2
 800a7c2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a7ce:	d101      	bne.n	800a7d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 800a7d0:	2301      	movs	r3, #1
 800a7d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d101      	bne.n	800a7e0 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 800a7dc:	2301      	movs	r3, #1
 800a7de:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	f003 0320 	and.w	r3, r3, #32
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	f000 808a 	beq.w	800a902 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	60bb      	str	r3, [r7, #8]
 800a7f2:	4b39      	ldr	r3, [pc, #228]	; (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800a7f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7f6:	4a38      	ldr	r2, [pc, #224]	; (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800a7f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a7fc:	6413      	str	r3, [r2, #64]	; 0x40
 800a7fe:	4b36      	ldr	r3, [pc, #216]	; (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800a800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a802:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a806:	60bb      	str	r3, [r7, #8]
 800a808:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800a80a:	4b34      	ldr	r3, [pc, #208]	; (800a8dc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	4a33      	ldr	r2, [pc, #204]	; (800a8dc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800a810:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a814:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a816:	f7fe fd1f 	bl	8009258 <HAL_GetTick>
 800a81a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800a81c:	e008      	b.n	800a830 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800a81e:	f7fe fd1b 	bl	8009258 <HAL_GetTick>
 800a822:	4602      	mov	r2, r0
 800a824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a826:	1ad3      	subs	r3, r2, r3
 800a828:	2b02      	cmp	r3, #2
 800a82a:	d901      	bls.n	800a830 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 800a82c:	2303      	movs	r3, #3
 800a82e:	e278      	b.n	800ad22 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800a830:	4b2a      	ldr	r3, [pc, #168]	; (800a8dc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d0f0      	beq.n	800a81e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a83c:	4b26      	ldr	r3, [pc, #152]	; (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800a83e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a840:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a844:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a846:	6a3b      	ldr	r3, [r7, #32]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d02f      	beq.n	800a8ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a850:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a854:	6a3a      	ldr	r2, [r7, #32]
 800a856:	429a      	cmp	r2, r3
 800a858:	d028      	beq.n	800a8ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a85a:	4b1f      	ldr	r3, [pc, #124]	; (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800a85c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a85e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a862:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a864:	4b1e      	ldr	r3, [pc, #120]	; (800a8e0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800a866:	2201      	movs	r2, #1
 800a868:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a86a:	4b1d      	ldr	r3, [pc, #116]	; (800a8e0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800a86c:	2200      	movs	r2, #0
 800a86e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800a870:	4a19      	ldr	r2, [pc, #100]	; (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800a872:	6a3b      	ldr	r3, [r7, #32]
 800a874:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800a876:	4b18      	ldr	r3, [pc, #96]	; (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800a878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a87a:	f003 0301 	and.w	r3, r3, #1
 800a87e:	2b01      	cmp	r3, #1
 800a880:	d114      	bne.n	800a8ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800a882:	f7fe fce9 	bl	8009258 <HAL_GetTick>
 800a886:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a888:	e00a      	b.n	800a8a0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a88a:	f7fe fce5 	bl	8009258 <HAL_GetTick>
 800a88e:	4602      	mov	r2, r0
 800a890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a892:	1ad3      	subs	r3, r2, r3
 800a894:	f241 3288 	movw	r2, #5000	; 0x1388
 800a898:	4293      	cmp	r3, r2
 800a89a:	d901      	bls.n	800a8a0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 800a89c:	2303      	movs	r3, #3
 800a89e:	e240      	b.n	800ad22 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a8a0:	4b0d      	ldr	r3, [pc, #52]	; (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800a8a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8a4:	f003 0302 	and.w	r3, r3, #2
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d0ee      	beq.n	800a88a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a8b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a8b8:	d114      	bne.n	800a8e4 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800a8ba:	4b07      	ldr	r3, [pc, #28]	; (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800a8bc:	689b      	ldr	r3, [r3, #8]
 800a8be:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8c6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a8ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a8ce:	4902      	ldr	r1, [pc, #8]	; (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800a8d0:	4313      	orrs	r3, r2
 800a8d2:	608b      	str	r3, [r1, #8]
 800a8d4:	e00c      	b.n	800a8f0 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800a8d6:	bf00      	nop
 800a8d8:	40023800 	.word	0x40023800
 800a8dc:	40007000 	.word	0x40007000
 800a8e0:	42470e40 	.word	0x42470e40
 800a8e4:	4b4a      	ldr	r3, [pc, #296]	; (800aa10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800a8e6:	689b      	ldr	r3, [r3, #8]
 800a8e8:	4a49      	ldr	r2, [pc, #292]	; (800aa10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800a8ea:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800a8ee:	6093      	str	r3, [r2, #8]
 800a8f0:	4b47      	ldr	r3, [pc, #284]	; (800aa10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800a8f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a8fc:	4944      	ldr	r1, [pc, #272]	; (800aa10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800a8fe:	4313      	orrs	r3, r2
 800a900:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	f003 0310 	and.w	r3, r3, #16
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d004      	beq.n	800a918 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800a914:	4b3f      	ldr	r3, [pc, #252]	; (800aa14 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800a916:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a920:	2b00      	cmp	r3, #0
 800a922:	d00a      	beq.n	800a93a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800a924:	4b3a      	ldr	r3, [pc, #232]	; (800aa10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800a926:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a92a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a932:	4937      	ldr	r1, [pc, #220]	; (800aa10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800a934:	4313      	orrs	r3, r2
 800a936:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a942:	2b00      	cmp	r3, #0
 800a944:	d00a      	beq.n	800a95c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a946:	4b32      	ldr	r3, [pc, #200]	; (800aa10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800a948:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a94c:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a954:	492e      	ldr	r1, [pc, #184]	; (800aa10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800a956:	4313      	orrs	r3, r2
 800a958:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a964:	2b00      	cmp	r3, #0
 800a966:	d011      	beq.n	800a98c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800a968:	4b29      	ldr	r3, [pc, #164]	; (800aa10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800a96a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a96e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a976:	4926      	ldr	r1, [pc, #152]	; (800aa10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800a978:	4313      	orrs	r3, r2
 800a97a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a982:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a986:	d101      	bne.n	800a98c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 800a988:	2301      	movs	r3, #1
 800a98a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a994:	2b00      	cmp	r3, #0
 800a996:	d00a      	beq.n	800a9ae <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800a998:	4b1d      	ldr	r3, [pc, #116]	; (800aa10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800a99a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a99e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9a6:	491a      	ldr	r1, [pc, #104]	; (800aa10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800a9a8:	4313      	orrs	r3, r2
 800a9aa:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d011      	beq.n	800a9de <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800a9ba:	4b15      	ldr	r3, [pc, #84]	; (800aa10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800a9bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a9c0:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9c8:	4911      	ldr	r1, [pc, #68]	; (800aa10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800a9ca:	4313      	orrs	r3, r2
 800a9cc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a9d8:	d101      	bne.n	800a9de <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800a9da:	2301      	movs	r3, #1
 800a9dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800a9de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9e0:	2b01      	cmp	r3, #1
 800a9e2:	d005      	beq.n	800a9f0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a9ec:	f040 80ff 	bne.w	800abee <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800a9f0:	4b09      	ldr	r3, [pc, #36]	; (800aa18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a9f6:	f7fe fc2f 	bl	8009258 <HAL_GetTick>
 800a9fa:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a9fc:	e00e      	b.n	800aa1c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800a9fe:	f7fe fc2b 	bl	8009258 <HAL_GetTick>
 800aa02:	4602      	mov	r2, r0
 800aa04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa06:	1ad3      	subs	r3, r2, r3
 800aa08:	2b02      	cmp	r3, #2
 800aa0a:	d907      	bls.n	800aa1c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800aa0c:	2303      	movs	r3, #3
 800aa0e:	e188      	b.n	800ad22 <HAL_RCCEx_PeriphCLKConfig+0x642>
 800aa10:	40023800 	.word	0x40023800
 800aa14:	424711e0 	.word	0x424711e0
 800aa18:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800aa1c:	4b7e      	ldr	r3, [pc, #504]	; (800ac18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d1ea      	bne.n	800a9fe <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	f003 0301 	and.w	r3, r3, #1
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d003      	beq.n	800aa3c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d009      	beq.n	800aa50 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d028      	beq.n	800aa9a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d124      	bne.n	800aa9a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800aa50:	4b71      	ldr	r3, [pc, #452]	; (800ac18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800aa52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aa56:	0c1b      	lsrs	r3, r3, #16
 800aa58:	f003 0303 	and.w	r3, r3, #3
 800aa5c:	3301      	adds	r3, #1
 800aa5e:	005b      	lsls	r3, r3, #1
 800aa60:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800aa62:	4b6d      	ldr	r3, [pc, #436]	; (800ac18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800aa64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aa68:	0e1b      	lsrs	r3, r3, #24
 800aa6a:	f003 030f 	and.w	r3, r3, #15
 800aa6e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	685a      	ldr	r2, [r3, #4]
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	689b      	ldr	r3, [r3, #8]
 800aa78:	019b      	lsls	r3, r3, #6
 800aa7a:	431a      	orrs	r2, r3
 800aa7c:	69fb      	ldr	r3, [r7, #28]
 800aa7e:	085b      	lsrs	r3, r3, #1
 800aa80:	3b01      	subs	r3, #1
 800aa82:	041b      	lsls	r3, r3, #16
 800aa84:	431a      	orrs	r2, r3
 800aa86:	69bb      	ldr	r3, [r7, #24]
 800aa88:	061b      	lsls	r3, r3, #24
 800aa8a:	431a      	orrs	r2, r3
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	695b      	ldr	r3, [r3, #20]
 800aa90:	071b      	lsls	r3, r3, #28
 800aa92:	4961      	ldr	r1, [pc, #388]	; (800ac18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800aa94:	4313      	orrs	r3, r2
 800aa96:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	f003 0304 	and.w	r3, r3, #4
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d004      	beq.n	800aab0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aaaa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aaae:	d00a      	beq.n	800aac6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d035      	beq.n	800ab28 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aac0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aac4:	d130      	bne.n	800ab28 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800aac6:	4b54      	ldr	r3, [pc, #336]	; (800ac18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800aac8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aacc:	0c1b      	lsrs	r3, r3, #16
 800aace:	f003 0303 	and.w	r3, r3, #3
 800aad2:	3301      	adds	r3, #1
 800aad4:	005b      	lsls	r3, r3, #1
 800aad6:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800aad8:	4b4f      	ldr	r3, [pc, #316]	; (800ac18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800aada:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aade:	0f1b      	lsrs	r3, r3, #28
 800aae0:	f003 0307 	and.w	r3, r3, #7
 800aae4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	685a      	ldr	r2, [r3, #4]
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	689b      	ldr	r3, [r3, #8]
 800aaee:	019b      	lsls	r3, r3, #6
 800aaf0:	431a      	orrs	r2, r3
 800aaf2:	69fb      	ldr	r3, [r7, #28]
 800aaf4:	085b      	lsrs	r3, r3, #1
 800aaf6:	3b01      	subs	r3, #1
 800aaf8:	041b      	lsls	r3, r3, #16
 800aafa:	431a      	orrs	r2, r3
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	691b      	ldr	r3, [r3, #16]
 800ab00:	061b      	lsls	r3, r3, #24
 800ab02:	431a      	orrs	r2, r3
 800ab04:	697b      	ldr	r3, [r7, #20]
 800ab06:	071b      	lsls	r3, r3, #28
 800ab08:	4943      	ldr	r1, [pc, #268]	; (800ac18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800ab0a:	4313      	orrs	r3, r2
 800ab0c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800ab10:	4b41      	ldr	r3, [pc, #260]	; (800ac18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800ab12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ab16:	f023 021f 	bic.w	r2, r3, #31
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab1e:	3b01      	subs	r3, #1
 800ab20:	493d      	ldr	r1, [pc, #244]	; (800ac18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800ab22:	4313      	orrs	r3, r2
 800ab24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d029      	beq.n	800ab88 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ab3c:	d124      	bne.n	800ab88 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800ab3e:	4b36      	ldr	r3, [pc, #216]	; (800ac18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800ab40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ab44:	0c1b      	lsrs	r3, r3, #16
 800ab46:	f003 0303 	and.w	r3, r3, #3
 800ab4a:	3301      	adds	r3, #1
 800ab4c:	005b      	lsls	r3, r3, #1
 800ab4e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800ab50:	4b31      	ldr	r3, [pc, #196]	; (800ac18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800ab52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ab56:	0f1b      	lsrs	r3, r3, #28
 800ab58:	f003 0307 	and.w	r3, r3, #7
 800ab5c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	685a      	ldr	r2, [r3, #4]
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	689b      	ldr	r3, [r3, #8]
 800ab66:	019b      	lsls	r3, r3, #6
 800ab68:	431a      	orrs	r2, r3
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	68db      	ldr	r3, [r3, #12]
 800ab6e:	085b      	lsrs	r3, r3, #1
 800ab70:	3b01      	subs	r3, #1
 800ab72:	041b      	lsls	r3, r3, #16
 800ab74:	431a      	orrs	r2, r3
 800ab76:	69bb      	ldr	r3, [r7, #24]
 800ab78:	061b      	lsls	r3, r3, #24
 800ab7a:	431a      	orrs	r2, r3
 800ab7c:	697b      	ldr	r3, [r7, #20]
 800ab7e:	071b      	lsls	r3, r3, #28
 800ab80:	4925      	ldr	r1, [pc, #148]	; (800ac18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800ab82:	4313      	orrs	r3, r2
 800ab84:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d016      	beq.n	800abc2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	685a      	ldr	r2, [r3, #4]
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	689b      	ldr	r3, [r3, #8]
 800ab9c:	019b      	lsls	r3, r3, #6
 800ab9e:	431a      	orrs	r2, r3
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	68db      	ldr	r3, [r3, #12]
 800aba4:	085b      	lsrs	r3, r3, #1
 800aba6:	3b01      	subs	r3, #1
 800aba8:	041b      	lsls	r3, r3, #16
 800abaa:	431a      	orrs	r2, r3
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	691b      	ldr	r3, [r3, #16]
 800abb0:	061b      	lsls	r3, r3, #24
 800abb2:	431a      	orrs	r2, r3
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	695b      	ldr	r3, [r3, #20]
 800abb8:	071b      	lsls	r3, r3, #28
 800abba:	4917      	ldr	r1, [pc, #92]	; (800ac18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800abbc:	4313      	orrs	r3, r2
 800abbe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800abc2:	4b16      	ldr	r3, [pc, #88]	; (800ac1c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 800abc4:	2201      	movs	r2, #1
 800abc6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800abc8:	f7fe fb46 	bl	8009258 <HAL_GetTick>
 800abcc:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800abce:	e008      	b.n	800abe2 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800abd0:	f7fe fb42 	bl	8009258 <HAL_GetTick>
 800abd4:	4602      	mov	r2, r0
 800abd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abd8:	1ad3      	subs	r3, r2, r3
 800abda:	2b02      	cmp	r3, #2
 800abdc:	d901      	bls.n	800abe2 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800abde:	2303      	movs	r3, #3
 800abe0:	e09f      	b.n	800ad22 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800abe2:	4b0d      	ldr	r3, [pc, #52]	; (800ac18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800abea:	2b00      	cmp	r3, #0
 800abec:	d0f0      	beq.n	800abd0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800abee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abf0:	2b01      	cmp	r3, #1
 800abf2:	f040 8095 	bne.w	800ad20 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800abf6:	4b0a      	ldr	r3, [pc, #40]	; (800ac20 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800abf8:	2200      	movs	r2, #0
 800abfa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800abfc:	f7fe fb2c 	bl	8009258 <HAL_GetTick>
 800ac00:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800ac02:	e00f      	b.n	800ac24 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800ac04:	f7fe fb28 	bl	8009258 <HAL_GetTick>
 800ac08:	4602      	mov	r2, r0
 800ac0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac0c:	1ad3      	subs	r3, r2, r3
 800ac0e:	2b02      	cmp	r3, #2
 800ac10:	d908      	bls.n	800ac24 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ac12:	2303      	movs	r3, #3
 800ac14:	e085      	b.n	800ad22 <HAL_RCCEx_PeriphCLKConfig+0x642>
 800ac16:	bf00      	nop
 800ac18:	40023800 	.word	0x40023800
 800ac1c:	42470068 	.word	0x42470068
 800ac20:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800ac24:	4b41      	ldr	r3, [pc, #260]	; (800ad2c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ac2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ac30:	d0e8      	beq.n	800ac04 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	f003 0304 	and.w	r3, r3, #4
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d003      	beq.n	800ac46 <HAL_RCCEx_PeriphCLKConfig+0x566>
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d009      	beq.n	800ac5a <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d02b      	beq.n	800acaa <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d127      	bne.n	800acaa <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800ac5a:	4b34      	ldr	r3, [pc, #208]	; (800ad2c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800ac5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac60:	0c1b      	lsrs	r3, r3, #16
 800ac62:	f003 0303 	and.w	r3, r3, #3
 800ac66:	3301      	adds	r3, #1
 800ac68:	005b      	lsls	r3, r3, #1
 800ac6a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	699a      	ldr	r2, [r3, #24]
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	69db      	ldr	r3, [r3, #28]
 800ac74:	019b      	lsls	r3, r3, #6
 800ac76:	431a      	orrs	r2, r3
 800ac78:	693b      	ldr	r3, [r7, #16]
 800ac7a:	085b      	lsrs	r3, r3, #1
 800ac7c:	3b01      	subs	r3, #1
 800ac7e:	041b      	lsls	r3, r3, #16
 800ac80:	431a      	orrs	r2, r3
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac86:	061b      	lsls	r3, r3, #24
 800ac88:	4928      	ldr	r1, [pc, #160]	; (800ad2c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800ac8a:	4313      	orrs	r3, r2
 800ac8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800ac90:	4b26      	ldr	r3, [pc, #152]	; (800ad2c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800ac92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ac96:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac9e:	3b01      	subs	r3, #1
 800aca0:	021b      	lsls	r3, r3, #8
 800aca2:	4922      	ldr	r1, [pc, #136]	; (800ad2c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800aca4:	4313      	orrs	r3, r2
 800aca6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d01d      	beq.n	800acf2 <HAL_RCCEx_PeriphCLKConfig+0x612>
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800acbe:	d118      	bne.n	800acf2 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800acc0:	4b1a      	ldr	r3, [pc, #104]	; (800ad2c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800acc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acc6:	0e1b      	lsrs	r3, r3, #24
 800acc8:	f003 030f 	and.w	r3, r3, #15
 800accc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	699a      	ldr	r2, [r3, #24]
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	69db      	ldr	r3, [r3, #28]
 800acd6:	019b      	lsls	r3, r3, #6
 800acd8:	431a      	orrs	r2, r3
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	6a1b      	ldr	r3, [r3, #32]
 800acde:	085b      	lsrs	r3, r3, #1
 800ace0:	3b01      	subs	r3, #1
 800ace2:	041b      	lsls	r3, r3, #16
 800ace4:	431a      	orrs	r2, r3
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	061b      	lsls	r3, r3, #24
 800acea:	4910      	ldr	r1, [pc, #64]	; (800ad2c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800acec:	4313      	orrs	r3, r2
 800acee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800acf2:	4b0f      	ldr	r3, [pc, #60]	; (800ad30 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 800acf4:	2201      	movs	r2, #1
 800acf6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800acf8:	f7fe faae 	bl	8009258 <HAL_GetTick>
 800acfc:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800acfe:	e008      	b.n	800ad12 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800ad00:	f7fe faaa 	bl	8009258 <HAL_GetTick>
 800ad04:	4602      	mov	r2, r0
 800ad06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad08:	1ad3      	subs	r3, r2, r3
 800ad0a:	2b02      	cmp	r3, #2
 800ad0c:	d901      	bls.n	800ad12 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ad0e:	2303      	movs	r3, #3
 800ad10:	e007      	b.n	800ad22 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800ad12:	4b06      	ldr	r3, [pc, #24]	; (800ad2c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ad1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad1e:	d1ef      	bne.n	800ad00 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 800ad20:	2300      	movs	r3, #0
}
 800ad22:	4618      	mov	r0, r3
 800ad24:	3730      	adds	r7, #48	; 0x30
 800ad26:	46bd      	mov	sp, r7
 800ad28:	bd80      	pop	{r7, pc}
 800ad2a:	bf00      	nop
 800ad2c:	40023800 	.word	0x40023800
 800ad30:	42470070 	.word	0x42470070

0800ad34 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800ad34:	b480      	push	{r7}
 800ad36:	b089      	sub	sp, #36	; 0x24
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U;
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800ad40:	2300      	movs	r3, #0
 800ad42:	61fb      	str	r3, [r7, #28]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800ad44:	2300      	movs	r3, #0
 800ad46:	61bb      	str	r3, [r7, #24]
  /* This variable used to store the SAI clock source */
  uint32_t saiclocksource = 0U;
 800ad48:	2300      	movs	r3, #0
 800ad4a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800ad50:	2300      	movs	r3, #0
 800ad52:	60bb      	str	r3, [r7, #8]
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	3b01      	subs	r3, #1
 800ad58:	2b07      	cmp	r3, #7
 800ad5a:	f200 8224 	bhi.w	800b1a6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800ad5e:	a201      	add	r2, pc, #4	; (adr r2, 800ad64 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800ad60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad64:	0800af67 	.word	0x0800af67
 800ad68:	0800b091 	.word	0x0800b091
 800ad6c:	0800b1a7 	.word	0x0800b1a7
 800ad70:	0800ad85 	.word	0x0800ad85
 800ad74:	0800b1a7 	.word	0x0800b1a7
 800ad78:	0800b1a7 	.word	0x0800b1a7
 800ad7c:	0800b1a7 	.word	0x0800b1a7
 800ad80:	0800ad85 	.word	0x0800ad85
  switch (PeriphClk)
  {
  case RCC_PERIPHCLK_SAI1:
  case RCC_PERIPHCLK_SAI2:
    {
      saiclocksource = RCC->DCKCFGR;
 800ad84:	4ba8      	ldr	r3, [pc, #672]	; (800b028 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800ad86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ad8a:	613b      	str	r3, [r7, #16]
      saiclocksource &= (RCC_DCKCFGR_SAI1SRC | RCC_DCKCFGR_SAI2SRC);
 800ad8c:	693b      	ldr	r3, [r7, #16]
 800ad8e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 800ad92:	613b      	str	r3, [r7, #16]
 800ad94:	693b      	ldr	r3, [r7, #16]
 800ad96:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800ad9a:	f000 80d6 	beq.w	800af4a <HAL_RCCEx_GetPeriphCLKFreq+0x216>
 800ad9e:	693b      	ldr	r3, [r7, #16]
 800ada0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800ada4:	f200 80dd 	bhi.w	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 800ada8:	693b      	ldr	r3, [r7, #16]
 800adaa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800adae:	f000 809f 	beq.w	800aef0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800adb2:	693b      	ldr	r3, [r7, #16]
 800adb4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800adb8:	f200 80d3 	bhi.w	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 800adbc:	693b      	ldr	r3, [r7, #16]
 800adbe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800adc2:	d05b      	beq.n	800ae7c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 800adc4:	693b      	ldr	r3, [r7, #16]
 800adc6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800adca:	f200 80ca 	bhi.w	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 800adce:	693b      	ldr	r3, [r7, #16]
 800add0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800add4:	f000 80b6 	beq.w	800af44 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
 800add8:	693b      	ldr	r3, [r7, #16]
 800adda:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800adde:	f200 80c0 	bhi.w	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 800ade2:	693b      	ldr	r3, [r7, #16]
 800ade4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ade8:	f000 8082 	beq.w	800aef0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800adec:	693b      	ldr	r3, [r7, #16]
 800adee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800adf2:	f200 80b6 	bhi.w	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 800adf6:	693b      	ldr	r3, [r7, #16]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d004      	beq.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 800adfc:	693b      	ldr	r3, [r7, #16]
 800adfe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ae02:	d03b      	beq.n	800ae7c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
          }
          break;
        }
      default :
        {
          break;
 800ae04:	e0ad      	b.n	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800ae06:	4b88      	ldr	r3, [pc, #544]	; (800b028 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800ae08:	685b      	ldr	r3, [r3, #4]
 800ae0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d109      	bne.n	800ae26 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM));
 800ae12:	4b85      	ldr	r3, [pc, #532]	; (800b028 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800ae14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ae1c:	4a83      	ldr	r2, [pc, #524]	; (800b02c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800ae1e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae22:	61bb      	str	r3, [r7, #24]
 800ae24:	e008      	b.n	800ae38 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM)));
 800ae26:	4b80      	ldr	r3, [pc, #512]	; (800b028 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800ae28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ae30:	4a7f      	ldr	r2, [pc, #508]	; (800b030 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800ae32:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae36:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 800ae38:	4b7b      	ldr	r3, [pc, #492]	; (800b028 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800ae3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae3e:	0e1b      	lsrs	r3, r3, #24
 800ae40:	f003 030f 	and.w	r3, r3, #15
 800ae44:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U))/(tmpreg1);
 800ae46:	4b78      	ldr	r3, [pc, #480]	; (800b028 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800ae48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae4c:	099b      	lsrs	r3, r3, #6
 800ae4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae52:	69ba      	ldr	r2, [r7, #24]
 800ae54:	fb02 f203 	mul.w	r2, r2, r3
 800ae58:	697b      	ldr	r3, [r7, #20]
 800ae5a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae5e:	61fb      	str	r3, [r7, #28]
          tmpreg1 = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 800ae60:	4b71      	ldr	r3, [pc, #452]	; (800b028 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800ae62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ae66:	0a1b      	lsrs	r3, r3, #8
 800ae68:	f003 031f 	and.w	r3, r3, #31
 800ae6c:	3301      	adds	r3, #1
 800ae6e:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 800ae70:	69fa      	ldr	r2, [r7, #28]
 800ae72:	697b      	ldr	r3, [r7, #20]
 800ae74:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae78:	61fb      	str	r3, [r7, #28]
          break;
 800ae7a:	e073      	b.n	800af64 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800ae7c:	4b6a      	ldr	r3, [pc, #424]	; (800b028 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800ae7e:	685b      	ldr	r3, [r3, #4]
 800ae80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d109      	bne.n	800ae9c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800ae88:	4b67      	ldr	r3, [pc, #412]	; (800b028 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800ae8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ae8e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ae92:	4a66      	ldr	r2, [pc, #408]	; (800b02c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800ae94:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae98:	61bb      	str	r3, [r7, #24]
 800ae9a:	e008      	b.n	800aeae <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM)));
 800ae9c:	4b62      	ldr	r3, [pc, #392]	; (800b028 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800ae9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aea2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aea6:	4a62      	ldr	r2, [pc, #392]	; (800b030 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800aea8:	fbb2 f3f3 	udiv	r3, r2, r3
 800aeac:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 800aeae:	4b5e      	ldr	r3, [pc, #376]	; (800b028 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800aeb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aeb4:	0e1b      	lsrs	r3, r3, #24
 800aeb6:	f003 030f 	and.w	r3, r3, #15
 800aeba:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U))/(tmpreg1);
 800aebc:	4b5a      	ldr	r3, [pc, #360]	; (800b028 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800aebe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aec2:	099b      	lsrs	r3, r3, #6
 800aec4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aec8:	69ba      	ldr	r2, [r7, #24]
 800aeca:	fb02 f203 	mul.w	r2, r2, r3
 800aece:	697b      	ldr	r3, [r7, #20]
 800aed0:	fbb2 f3f3 	udiv	r3, r2, r3
 800aed4:	61fb      	str	r3, [r7, #28]
          tmpreg1 = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 800aed6:	4b54      	ldr	r3, [pc, #336]	; (800b028 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800aed8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aedc:	f003 031f 	and.w	r3, r3, #31
 800aee0:	3301      	adds	r3, #1
 800aee2:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 800aee4:	69fa      	ldr	r2, [r7, #28]
 800aee6:	697b      	ldr	r3, [r7, #20]
 800aee8:	fbb2 f3f3 	udiv	r3, r2, r3
 800aeec:	61fb      	str	r3, [r7, #28]
          break;
 800aeee:	e039      	b.n	800af64 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800aef0:	4b4d      	ldr	r3, [pc, #308]	; (800b028 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800aef2:	685b      	ldr	r3, [r3, #4]
 800aef4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d108      	bne.n	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800aefc:	4b4a      	ldr	r3, [pc, #296]	; (800b028 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800aefe:	685b      	ldr	r3, [r3, #4]
 800af00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800af04:	4a49      	ldr	r2, [pc, #292]	; (800b02c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800af06:	fbb2 f3f3 	udiv	r3, r2, r3
 800af0a:	61bb      	str	r3, [r7, #24]
 800af0c:	e007      	b.n	800af1e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800af0e:	4b46      	ldr	r3, [pc, #280]	; (800b028 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800af10:	685b      	ldr	r3, [r3, #4]
 800af12:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800af16:	4a46      	ldr	r2, [pc, #280]	; (800b030 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800af18:	fbb2 f3f3 	udiv	r3, r2, r3
 800af1c:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U;
 800af1e:	4b42      	ldr	r3, [pc, #264]	; (800b028 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800af20:	685b      	ldr	r3, [r3, #4]
 800af22:	0f1b      	lsrs	r3, r3, #28
 800af24:	f003 0307 	and.w	r3, r3, #7
 800af28:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U))/(tmpreg1);
 800af2a:	4b3f      	ldr	r3, [pc, #252]	; (800b028 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800af2c:	685b      	ldr	r3, [r3, #4]
 800af2e:	099b      	lsrs	r3, r3, #6
 800af30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af34:	69ba      	ldr	r2, [r7, #24]
 800af36:	fb02 f203 	mul.w	r2, r2, r3
 800af3a:	697b      	ldr	r3, [r7, #20]
 800af3c:	fbb2 f3f3 	udiv	r3, r2, r3
 800af40:	61fb      	str	r3, [r7, #28]
          break;
 800af42:	e00f      	b.n	800af64 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          frequency = EXTERNAL_CLOCK_VALUE;
 800af44:	4b3b      	ldr	r3, [pc, #236]	; (800b034 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 800af46:	61fb      	str	r3, [r7, #28]
          break;
 800af48:	e00c      	b.n	800af64 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800af4a:	4b37      	ldr	r3, [pc, #220]	; (800b028 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800af4c:	685b      	ldr	r3, [r3, #4]
 800af4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800af52:	2b00      	cmp	r3, #0
 800af54:	d102      	bne.n	800af5c <HAL_RCCEx_GetPeriphCLKFreq+0x228>
            frequency = (uint32_t)(HSI_VALUE);
 800af56:	4b35      	ldr	r3, [pc, #212]	; (800b02c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800af58:	61fb      	str	r3, [r7, #28]
          break;
 800af5a:	e003      	b.n	800af64 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
            frequency = (uint32_t)(HSE_VALUE);
 800af5c:	4b34      	ldr	r3, [pc, #208]	; (800b030 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800af5e:	61fb      	str	r3, [r7, #28]
          break;
 800af60:	e000      	b.n	800af64 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          break;
 800af62:	bf00      	nop
        }
      }
      break;
 800af64:	e11f      	b.n	800b1a6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    }
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 800af66:	4b30      	ldr	r3, [pc, #192]	; (800b028 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800af68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800af6c:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 800af70:	60fb      	str	r3, [r7, #12]
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 800af78:	d079      	beq.n	800b06e <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 800af80:	f200 8082 	bhi.w	800b088 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800af8a:	d03c      	beq.n	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800af92:	d879      	bhi.n	800b088 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d006      	beq.n	800afa8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800afa0:	d172      	bne.n	800b088 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800afa2:	4b24      	ldr	r3, [pc, #144]	; (800b034 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 800afa4:	61fb      	str	r3, [r7, #28]
          break;
 800afa6:	e072      	b.n	800b08e <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800afa8:	4b1f      	ldr	r3, [pc, #124]	; (800b028 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800afaa:	685b      	ldr	r3, [r3, #4]
 800afac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800afb0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800afb4:	d109      	bne.n	800afca <HAL_RCCEx_GetPeriphCLKFreq+0x296>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800afb6:	4b1c      	ldr	r3, [pc, #112]	; (800b028 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800afb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800afbc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800afc0:	4a1b      	ldr	r2, [pc, #108]	; (800b030 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800afc2:	fbb2 f3f3 	udiv	r3, r2, r3
 800afc6:	61bb      	str	r3, [r7, #24]
 800afc8:	e008      	b.n	800afdc <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800afca:	4b17      	ldr	r3, [pc, #92]	; (800b028 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800afcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800afd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800afd4:	4a15      	ldr	r2, [pc, #84]	; (800b02c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800afd6:	fbb2 f3f3 	udiv	r3, r2, r3
 800afda:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800afdc:	4b12      	ldr	r3, [pc, #72]	; (800b028 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800afde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800afe2:	099b      	lsrs	r3, r3, #6
 800afe4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800afe8:	69bb      	ldr	r3, [r7, #24]
 800afea:	fb02 f303 	mul.w	r3, r2, r3
 800afee:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800aff0:	4b0d      	ldr	r3, [pc, #52]	; (800b028 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800aff2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aff6:	0f1b      	lsrs	r3, r3, #28
 800aff8:	f003 0307 	and.w	r3, r3, #7
 800affc:	68ba      	ldr	r2, [r7, #8]
 800affe:	fbb2 f3f3 	udiv	r3, r2, r3
 800b002:	61fb      	str	r3, [r7, #28]
          break;
 800b004:	e043      	b.n	800b08e <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800b006:	4b08      	ldr	r3, [pc, #32]	; (800b028 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800b008:	685b      	ldr	r3, [r3, #4]
 800b00a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b00e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b012:	d111      	bne.n	800b038 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800b014:	4b04      	ldr	r3, [pc, #16]	; (800b028 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800b016:	685b      	ldr	r3, [r3, #4]
 800b018:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b01c:	4a04      	ldr	r2, [pc, #16]	; (800b030 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800b01e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b022:	61bb      	str	r3, [r7, #24]
 800b024:	e010      	b.n	800b048 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 800b026:	bf00      	nop
 800b028:	40023800 	.word	0x40023800
 800b02c:	00f42400 	.word	0x00f42400
 800b030:	007a1200 	.word	0x007a1200
 800b034:	00bb8000 	.word	0x00bb8000
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800b038:	4b5e      	ldr	r3, [pc, #376]	; (800b1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800b03a:	685b      	ldr	r3, [r3, #4]
 800b03c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b040:	4a5d      	ldr	r2, [pc, #372]	; (800b1b8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 800b042:	fbb2 f3f3 	udiv	r3, r2, r3
 800b046:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 800b048:	4b5a      	ldr	r3, [pc, #360]	; (800b1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800b04a:	685b      	ldr	r3, [r3, #4]
 800b04c:	099b      	lsrs	r3, r3, #6
 800b04e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b052:	69bb      	ldr	r3, [r7, #24]
 800b054:	fb02 f303 	mul.w	r3, r2, r3
 800b058:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 800b05a:	4b56      	ldr	r3, [pc, #344]	; (800b1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800b05c:	685b      	ldr	r3, [r3, #4]
 800b05e:	0f1b      	lsrs	r3, r3, #28
 800b060:	f003 0307 	and.w	r3, r3, #7
 800b064:	68ba      	ldr	r2, [r7, #8]
 800b066:	fbb2 f3f3 	udiv	r3, r2, r3
 800b06a:	61fb      	str	r3, [r7, #28]
          break;
 800b06c:	e00f      	b.n	800b08e <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800b06e:	4b51      	ldr	r3, [pc, #324]	; (800b1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800b070:	685b      	ldr	r3, [r3, #4]
 800b072:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b076:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b07a:	d102      	bne.n	800b082 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            frequency = HSE_VALUE;
 800b07c:	4b4f      	ldr	r3, [pc, #316]	; (800b1bc <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 800b07e:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 800b080:	e005      	b.n	800b08e <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
            frequency = HSI_VALUE;
 800b082:	4b4d      	ldr	r3, [pc, #308]	; (800b1b8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 800b084:	61fb      	str	r3, [r7, #28]
          break;
 800b086:	e002      	b.n	800b08e <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800b088:	2300      	movs	r3, #0
 800b08a:	61fb      	str	r3, [r7, #28]
          break;
 800b08c:	bf00      	nop
        }
      }
      break;
 800b08e:	e08a      	b.n	800b1a6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 800b090:	4b48      	ldr	r3, [pc, #288]	; (800b1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800b092:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b096:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 800b09a:	60fb      	str	r3, [r7, #12]
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800b0a2:	d06f      	beq.n	800b184 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800b0aa:	d878      	bhi.n	800b19e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b0b2:	d03c      	beq.n	800b12e <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b0ba:	d870      	bhi.n	800b19e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d006      	beq.n	800b0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b0c8:	d169      	bne.n	800b19e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800b0ca:	4b3d      	ldr	r3, [pc, #244]	; (800b1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 800b0cc:	61fb      	str	r3, [r7, #28]
          break;
 800b0ce:	e069      	b.n	800b1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800b0d0:	4b38      	ldr	r3, [pc, #224]	; (800b1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800b0d2:	685b      	ldr	r3, [r3, #4]
 800b0d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b0d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b0dc:	d109      	bne.n	800b0f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800b0de:	4b35      	ldr	r3, [pc, #212]	; (800b1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800b0e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b0e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b0e8:	4a34      	ldr	r2, [pc, #208]	; (800b1bc <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 800b0ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0ee:	61bb      	str	r3, [r7, #24]
 800b0f0:	e008      	b.n	800b104 <HAL_RCCEx_GetPeriphCLKFreq+0x3d0>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800b0f2:	4b30      	ldr	r3, [pc, #192]	; (800b1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800b0f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b0f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b0fc:	4a2e      	ldr	r2, [pc, #184]	; (800b1b8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 800b0fe:	fbb2 f3f3 	udiv	r3, r2, r3
 800b102:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800b104:	4b2b      	ldr	r3, [pc, #172]	; (800b1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800b106:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b10a:	099b      	lsrs	r3, r3, #6
 800b10c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b110:	69bb      	ldr	r3, [r7, #24]
 800b112:	fb02 f303 	mul.w	r3, r2, r3
 800b116:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800b118:	4b26      	ldr	r3, [pc, #152]	; (800b1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800b11a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b11e:	0f1b      	lsrs	r3, r3, #28
 800b120:	f003 0307 	and.w	r3, r3, #7
 800b124:	68ba      	ldr	r2, [r7, #8]
 800b126:	fbb2 f3f3 	udiv	r3, r2, r3
 800b12a:	61fb      	str	r3, [r7, #28]
          break;
 800b12c:	e03a      	b.n	800b1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800b12e:	4b21      	ldr	r3, [pc, #132]	; (800b1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800b130:	685b      	ldr	r3, [r3, #4]
 800b132:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b136:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b13a:	d108      	bne.n	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800b13c:	4b1d      	ldr	r3, [pc, #116]	; (800b1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800b13e:	685b      	ldr	r3, [r3, #4]
 800b140:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b144:	4a1d      	ldr	r2, [pc, #116]	; (800b1bc <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 800b146:	fbb2 f3f3 	udiv	r3, r2, r3
 800b14a:	61bb      	str	r3, [r7, #24]
 800b14c:	e007      	b.n	800b15e <HAL_RCCEx_GetPeriphCLKFreq+0x42a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800b14e:	4b19      	ldr	r3, [pc, #100]	; (800b1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800b150:	685b      	ldr	r3, [r3, #4]
 800b152:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b156:	4a18      	ldr	r2, [pc, #96]	; (800b1b8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 800b158:	fbb2 f3f3 	udiv	r3, r2, r3
 800b15c:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 800b15e:	4b15      	ldr	r3, [pc, #84]	; (800b1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800b160:	685b      	ldr	r3, [r3, #4]
 800b162:	099b      	lsrs	r3, r3, #6
 800b164:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b168:	69bb      	ldr	r3, [r7, #24]
 800b16a:	fb02 f303 	mul.w	r3, r2, r3
 800b16e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 800b170:	4b10      	ldr	r3, [pc, #64]	; (800b1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800b172:	685b      	ldr	r3, [r3, #4]
 800b174:	0f1b      	lsrs	r3, r3, #28
 800b176:	f003 0307 	and.w	r3, r3, #7
 800b17a:	68ba      	ldr	r2, [r7, #8]
 800b17c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b180:	61fb      	str	r3, [r7, #28]
          break;
 800b182:	e00f      	b.n	800b1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800b184:	4b0b      	ldr	r3, [pc, #44]	; (800b1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800b186:	685b      	ldr	r3, [r3, #4]
 800b188:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b18c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b190:	d102      	bne.n	800b198 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          {
            frequency = HSE_VALUE;
 800b192:	4b0a      	ldr	r3, [pc, #40]	; (800b1bc <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 800b194:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 800b196:	e005      	b.n	800b1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
            frequency = HSI_VALUE;
 800b198:	4b07      	ldr	r3, [pc, #28]	; (800b1b8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 800b19a:	61fb      	str	r3, [r7, #28]
          break;
 800b19c:	e002      	b.n	800b1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800b19e:	2300      	movs	r3, #0
 800b1a0:	61fb      	str	r3, [r7, #28]
          break;
 800b1a2:	bf00      	nop
        }
      }
      break;
 800b1a4:	bf00      	nop
    }
  }
  return frequency;
 800b1a6:	69fb      	ldr	r3, [r7, #28]
}
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	3724      	adds	r7, #36	; 0x24
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b2:	4770      	bx	lr
 800b1b4:	40023800 	.word	0x40023800
 800b1b8:	00f42400 	.word	0x00f42400
 800b1bc:	007a1200 	.word	0x007a1200
 800b1c0:	00bb8000 	.word	0x00bb8000

0800b1c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b1c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b1c8:	b088      	sub	sp, #32
 800b1ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 800b1d8:	2300      	movs	r3, #0
 800b1da:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 800b1dc:	2300      	movs	r3, #0
 800b1de:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b1e0:	4bce      	ldr	r3, [pc, #824]	; (800b51c <HAL_RCC_GetSysClockFreq+0x358>)
 800b1e2:	689b      	ldr	r3, [r3, #8]
 800b1e4:	f003 030c 	and.w	r3, r3, #12
 800b1e8:	2b0c      	cmp	r3, #12
 800b1ea:	f200 818d 	bhi.w	800b508 <HAL_RCC_GetSysClockFreq+0x344>
 800b1ee:	a201      	add	r2, pc, #4	; (adr r2, 800b1f4 <HAL_RCC_GetSysClockFreq+0x30>)
 800b1f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1f4:	0800b229 	.word	0x0800b229
 800b1f8:	0800b509 	.word	0x0800b509
 800b1fc:	0800b509 	.word	0x0800b509
 800b200:	0800b509 	.word	0x0800b509
 800b204:	0800b22f 	.word	0x0800b22f
 800b208:	0800b509 	.word	0x0800b509
 800b20c:	0800b509 	.word	0x0800b509
 800b210:	0800b509 	.word	0x0800b509
 800b214:	0800b235 	.word	0x0800b235
 800b218:	0800b509 	.word	0x0800b509
 800b21c:	0800b509 	.word	0x0800b509
 800b220:	0800b509 	.word	0x0800b509
 800b224:	0800b3a9 	.word	0x0800b3a9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b228:	4bbd      	ldr	r3, [pc, #756]	; (800b520 <HAL_RCC_GetSysClockFreq+0x35c>)
 800b22a:	61bb      	str	r3, [r7, #24]
       break;
 800b22c:	e16f      	b.n	800b50e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b22e:	4bbd      	ldr	r3, [pc, #756]	; (800b524 <HAL_RCC_GetSysClockFreq+0x360>)
 800b230:	61bb      	str	r3, [r7, #24]
      break;
 800b232:	e16c      	b.n	800b50e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b234:	4bb9      	ldr	r3, [pc, #740]	; (800b51c <HAL_RCC_GetSysClockFreq+0x358>)
 800b236:	685b      	ldr	r3, [r3, #4]
 800b238:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b23c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b23e:	4bb7      	ldr	r3, [pc, #732]	; (800b51c <HAL_RCC_GetSysClockFreq+0x358>)
 800b240:	685b      	ldr	r3, [r3, #4]
 800b242:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b246:	2b00      	cmp	r3, #0
 800b248:	d053      	beq.n	800b2f2 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b24a:	4bb4      	ldr	r3, [pc, #720]	; (800b51c <HAL_RCC_GetSysClockFreq+0x358>)
 800b24c:	685b      	ldr	r3, [r3, #4]
 800b24e:	099b      	lsrs	r3, r3, #6
 800b250:	461a      	mov	r2, r3
 800b252:	f04f 0300 	mov.w	r3, #0
 800b256:	f240 10ff 	movw	r0, #511	; 0x1ff
 800b25a:	f04f 0100 	mov.w	r1, #0
 800b25e:	ea02 0400 	and.w	r4, r2, r0
 800b262:	603c      	str	r4, [r7, #0]
 800b264:	400b      	ands	r3, r1
 800b266:	607b      	str	r3, [r7, #4]
 800b268:	e9d7 4500 	ldrd	r4, r5, [r7]
 800b26c:	4620      	mov	r0, r4
 800b26e:	4629      	mov	r1, r5
 800b270:	f04f 0200 	mov.w	r2, #0
 800b274:	f04f 0300 	mov.w	r3, #0
 800b278:	014b      	lsls	r3, r1, #5
 800b27a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800b27e:	0142      	lsls	r2, r0, #5
 800b280:	4610      	mov	r0, r2
 800b282:	4619      	mov	r1, r3
 800b284:	4623      	mov	r3, r4
 800b286:	1ac0      	subs	r0, r0, r3
 800b288:	462b      	mov	r3, r5
 800b28a:	eb61 0103 	sbc.w	r1, r1, r3
 800b28e:	f04f 0200 	mov.w	r2, #0
 800b292:	f04f 0300 	mov.w	r3, #0
 800b296:	018b      	lsls	r3, r1, #6
 800b298:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800b29c:	0182      	lsls	r2, r0, #6
 800b29e:	1a12      	subs	r2, r2, r0
 800b2a0:	eb63 0301 	sbc.w	r3, r3, r1
 800b2a4:	f04f 0000 	mov.w	r0, #0
 800b2a8:	f04f 0100 	mov.w	r1, #0
 800b2ac:	00d9      	lsls	r1, r3, #3
 800b2ae:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b2b2:	00d0      	lsls	r0, r2, #3
 800b2b4:	4602      	mov	r2, r0
 800b2b6:	460b      	mov	r3, r1
 800b2b8:	4621      	mov	r1, r4
 800b2ba:	1852      	adds	r2, r2, r1
 800b2bc:	4629      	mov	r1, r5
 800b2be:	eb43 0101 	adc.w	r1, r3, r1
 800b2c2:	460b      	mov	r3, r1
 800b2c4:	f04f 0000 	mov.w	r0, #0
 800b2c8:	f04f 0100 	mov.w	r1, #0
 800b2cc:	0259      	lsls	r1, r3, #9
 800b2ce:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800b2d2:	0250      	lsls	r0, r2, #9
 800b2d4:	4602      	mov	r2, r0
 800b2d6:	460b      	mov	r3, r1
 800b2d8:	4610      	mov	r0, r2
 800b2da:	4619      	mov	r1, r3
 800b2dc:	697b      	ldr	r3, [r7, #20]
 800b2de:	461a      	mov	r2, r3
 800b2e0:	f04f 0300 	mov.w	r3, #0
 800b2e4:	f7f5 fcc8 	bl	8000c78 <__aeabi_uldivmod>
 800b2e8:	4602      	mov	r2, r0
 800b2ea:	460b      	mov	r3, r1
 800b2ec:	4613      	mov	r3, r2
 800b2ee:	61fb      	str	r3, [r7, #28]
 800b2f0:	e04c      	b.n	800b38c <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b2f2:	4b8a      	ldr	r3, [pc, #552]	; (800b51c <HAL_RCC_GetSysClockFreq+0x358>)
 800b2f4:	685b      	ldr	r3, [r3, #4]
 800b2f6:	099b      	lsrs	r3, r3, #6
 800b2f8:	461a      	mov	r2, r3
 800b2fa:	f04f 0300 	mov.w	r3, #0
 800b2fe:	f240 10ff 	movw	r0, #511	; 0x1ff
 800b302:	f04f 0100 	mov.w	r1, #0
 800b306:	ea02 0a00 	and.w	sl, r2, r0
 800b30a:	ea03 0b01 	and.w	fp, r3, r1
 800b30e:	4650      	mov	r0, sl
 800b310:	4659      	mov	r1, fp
 800b312:	f04f 0200 	mov.w	r2, #0
 800b316:	f04f 0300 	mov.w	r3, #0
 800b31a:	014b      	lsls	r3, r1, #5
 800b31c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800b320:	0142      	lsls	r2, r0, #5
 800b322:	4610      	mov	r0, r2
 800b324:	4619      	mov	r1, r3
 800b326:	ebb0 000a 	subs.w	r0, r0, sl
 800b32a:	eb61 010b 	sbc.w	r1, r1, fp
 800b32e:	f04f 0200 	mov.w	r2, #0
 800b332:	f04f 0300 	mov.w	r3, #0
 800b336:	018b      	lsls	r3, r1, #6
 800b338:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800b33c:	0182      	lsls	r2, r0, #6
 800b33e:	1a12      	subs	r2, r2, r0
 800b340:	eb63 0301 	sbc.w	r3, r3, r1
 800b344:	f04f 0000 	mov.w	r0, #0
 800b348:	f04f 0100 	mov.w	r1, #0
 800b34c:	00d9      	lsls	r1, r3, #3
 800b34e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b352:	00d0      	lsls	r0, r2, #3
 800b354:	4602      	mov	r2, r0
 800b356:	460b      	mov	r3, r1
 800b358:	eb12 020a 	adds.w	r2, r2, sl
 800b35c:	eb43 030b 	adc.w	r3, r3, fp
 800b360:	f04f 0000 	mov.w	r0, #0
 800b364:	f04f 0100 	mov.w	r1, #0
 800b368:	0299      	lsls	r1, r3, #10
 800b36a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800b36e:	0290      	lsls	r0, r2, #10
 800b370:	4602      	mov	r2, r0
 800b372:	460b      	mov	r3, r1
 800b374:	4610      	mov	r0, r2
 800b376:	4619      	mov	r1, r3
 800b378:	697b      	ldr	r3, [r7, #20]
 800b37a:	461a      	mov	r2, r3
 800b37c:	f04f 0300 	mov.w	r3, #0
 800b380:	f7f5 fc7a 	bl	8000c78 <__aeabi_uldivmod>
 800b384:	4602      	mov	r2, r0
 800b386:	460b      	mov	r3, r1
 800b388:	4613      	mov	r3, r2
 800b38a:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800b38c:	4b63      	ldr	r3, [pc, #396]	; (800b51c <HAL_RCC_GetSysClockFreq+0x358>)
 800b38e:	685b      	ldr	r3, [r3, #4]
 800b390:	0c1b      	lsrs	r3, r3, #16
 800b392:	f003 0303 	and.w	r3, r3, #3
 800b396:	3301      	adds	r3, #1
 800b398:	005b      	lsls	r3, r3, #1
 800b39a:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 800b39c:	69fa      	ldr	r2, [r7, #28]
 800b39e:	693b      	ldr	r3, [r7, #16]
 800b3a0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b3a4:	61bb      	str	r3, [r7, #24]
      break;
 800b3a6:	e0b2      	b.n	800b50e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b3a8:	4b5c      	ldr	r3, [pc, #368]	; (800b51c <HAL_RCC_GetSysClockFreq+0x358>)
 800b3aa:	685b      	ldr	r3, [r3, #4]
 800b3ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b3b0:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b3b2:	4b5a      	ldr	r3, [pc, #360]	; (800b51c <HAL_RCC_GetSysClockFreq+0x358>)
 800b3b4:	685b      	ldr	r3, [r3, #4]
 800b3b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d04d      	beq.n	800b45a <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b3be:	4b57      	ldr	r3, [pc, #348]	; (800b51c <HAL_RCC_GetSysClockFreq+0x358>)
 800b3c0:	685b      	ldr	r3, [r3, #4]
 800b3c2:	099b      	lsrs	r3, r3, #6
 800b3c4:	461a      	mov	r2, r3
 800b3c6:	f04f 0300 	mov.w	r3, #0
 800b3ca:	f240 10ff 	movw	r0, #511	; 0x1ff
 800b3ce:	f04f 0100 	mov.w	r1, #0
 800b3d2:	ea02 0800 	and.w	r8, r2, r0
 800b3d6:	ea03 0901 	and.w	r9, r3, r1
 800b3da:	4640      	mov	r0, r8
 800b3dc:	4649      	mov	r1, r9
 800b3de:	f04f 0200 	mov.w	r2, #0
 800b3e2:	f04f 0300 	mov.w	r3, #0
 800b3e6:	014b      	lsls	r3, r1, #5
 800b3e8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800b3ec:	0142      	lsls	r2, r0, #5
 800b3ee:	4610      	mov	r0, r2
 800b3f0:	4619      	mov	r1, r3
 800b3f2:	ebb0 0008 	subs.w	r0, r0, r8
 800b3f6:	eb61 0109 	sbc.w	r1, r1, r9
 800b3fa:	f04f 0200 	mov.w	r2, #0
 800b3fe:	f04f 0300 	mov.w	r3, #0
 800b402:	018b      	lsls	r3, r1, #6
 800b404:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800b408:	0182      	lsls	r2, r0, #6
 800b40a:	1a12      	subs	r2, r2, r0
 800b40c:	eb63 0301 	sbc.w	r3, r3, r1
 800b410:	f04f 0000 	mov.w	r0, #0
 800b414:	f04f 0100 	mov.w	r1, #0
 800b418:	00d9      	lsls	r1, r3, #3
 800b41a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b41e:	00d0      	lsls	r0, r2, #3
 800b420:	4602      	mov	r2, r0
 800b422:	460b      	mov	r3, r1
 800b424:	eb12 0208 	adds.w	r2, r2, r8
 800b428:	eb43 0309 	adc.w	r3, r3, r9
 800b42c:	f04f 0000 	mov.w	r0, #0
 800b430:	f04f 0100 	mov.w	r1, #0
 800b434:	0259      	lsls	r1, r3, #9
 800b436:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800b43a:	0250      	lsls	r0, r2, #9
 800b43c:	4602      	mov	r2, r0
 800b43e:	460b      	mov	r3, r1
 800b440:	4610      	mov	r0, r2
 800b442:	4619      	mov	r1, r3
 800b444:	697b      	ldr	r3, [r7, #20]
 800b446:	461a      	mov	r2, r3
 800b448:	f04f 0300 	mov.w	r3, #0
 800b44c:	f7f5 fc14 	bl	8000c78 <__aeabi_uldivmod>
 800b450:	4602      	mov	r2, r0
 800b452:	460b      	mov	r3, r1
 800b454:	4613      	mov	r3, r2
 800b456:	61fb      	str	r3, [r7, #28]
 800b458:	e04a      	b.n	800b4f0 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b45a:	4b30      	ldr	r3, [pc, #192]	; (800b51c <HAL_RCC_GetSysClockFreq+0x358>)
 800b45c:	685b      	ldr	r3, [r3, #4]
 800b45e:	099b      	lsrs	r3, r3, #6
 800b460:	461a      	mov	r2, r3
 800b462:	f04f 0300 	mov.w	r3, #0
 800b466:	f240 10ff 	movw	r0, #511	; 0x1ff
 800b46a:	f04f 0100 	mov.w	r1, #0
 800b46e:	ea02 0400 	and.w	r4, r2, r0
 800b472:	ea03 0501 	and.w	r5, r3, r1
 800b476:	4620      	mov	r0, r4
 800b478:	4629      	mov	r1, r5
 800b47a:	f04f 0200 	mov.w	r2, #0
 800b47e:	f04f 0300 	mov.w	r3, #0
 800b482:	014b      	lsls	r3, r1, #5
 800b484:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800b488:	0142      	lsls	r2, r0, #5
 800b48a:	4610      	mov	r0, r2
 800b48c:	4619      	mov	r1, r3
 800b48e:	1b00      	subs	r0, r0, r4
 800b490:	eb61 0105 	sbc.w	r1, r1, r5
 800b494:	f04f 0200 	mov.w	r2, #0
 800b498:	f04f 0300 	mov.w	r3, #0
 800b49c:	018b      	lsls	r3, r1, #6
 800b49e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800b4a2:	0182      	lsls	r2, r0, #6
 800b4a4:	1a12      	subs	r2, r2, r0
 800b4a6:	eb63 0301 	sbc.w	r3, r3, r1
 800b4aa:	f04f 0000 	mov.w	r0, #0
 800b4ae:	f04f 0100 	mov.w	r1, #0
 800b4b2:	00d9      	lsls	r1, r3, #3
 800b4b4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b4b8:	00d0      	lsls	r0, r2, #3
 800b4ba:	4602      	mov	r2, r0
 800b4bc:	460b      	mov	r3, r1
 800b4be:	1912      	adds	r2, r2, r4
 800b4c0:	eb45 0303 	adc.w	r3, r5, r3
 800b4c4:	f04f 0000 	mov.w	r0, #0
 800b4c8:	f04f 0100 	mov.w	r1, #0
 800b4cc:	0299      	lsls	r1, r3, #10
 800b4ce:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800b4d2:	0290      	lsls	r0, r2, #10
 800b4d4:	4602      	mov	r2, r0
 800b4d6:	460b      	mov	r3, r1
 800b4d8:	4610      	mov	r0, r2
 800b4da:	4619      	mov	r1, r3
 800b4dc:	697b      	ldr	r3, [r7, #20]
 800b4de:	461a      	mov	r2, r3
 800b4e0:	f04f 0300 	mov.w	r3, #0
 800b4e4:	f7f5 fbc8 	bl	8000c78 <__aeabi_uldivmod>
 800b4e8:	4602      	mov	r2, r0
 800b4ea:	460b      	mov	r3, r1
 800b4ec:	4613      	mov	r3, r2
 800b4ee:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800b4f0:	4b0a      	ldr	r3, [pc, #40]	; (800b51c <HAL_RCC_GetSysClockFreq+0x358>)
 800b4f2:	685b      	ldr	r3, [r3, #4]
 800b4f4:	0f1b      	lsrs	r3, r3, #28
 800b4f6:	f003 0307 	and.w	r3, r3, #7
 800b4fa:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 800b4fc:	69fa      	ldr	r2, [r7, #28]
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	fbb2 f3f3 	udiv	r3, r2, r3
 800b504:	61bb      	str	r3, [r7, #24]
      break;
 800b506:	e002      	b.n	800b50e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b508:	4b05      	ldr	r3, [pc, #20]	; (800b520 <HAL_RCC_GetSysClockFreq+0x35c>)
 800b50a:	61bb      	str	r3, [r7, #24]
      break;
 800b50c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b50e:	69bb      	ldr	r3, [r7, #24]
}
 800b510:	4618      	mov	r0, r3
 800b512:	3720      	adds	r7, #32
 800b514:	46bd      	mov	sp, r7
 800b516:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b51a:	bf00      	nop
 800b51c:	40023800 	.word	0x40023800
 800b520:	00f42400 	.word	0x00f42400
 800b524:	007a1200 	.word	0x007a1200

0800b528 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b528:	b580      	push	{r7, lr}
 800b52a:	b086      	sub	sp, #24
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	2b00      	cmp	r3, #0
 800b534:	d101      	bne.n	800b53a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b536:	2301      	movs	r3, #1
 800b538:	e28d      	b.n	800ba56 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	f003 0301 	and.w	r3, r3, #1
 800b542:	2b00      	cmp	r3, #0
 800b544:	f000 8083 	beq.w	800b64e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800b548:	4b94      	ldr	r3, [pc, #592]	; (800b79c <HAL_RCC_OscConfig+0x274>)
 800b54a:	689b      	ldr	r3, [r3, #8]
 800b54c:	f003 030c 	and.w	r3, r3, #12
 800b550:	2b04      	cmp	r3, #4
 800b552:	d019      	beq.n	800b588 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800b554:	4b91      	ldr	r3, [pc, #580]	; (800b79c <HAL_RCC_OscConfig+0x274>)
 800b556:	689b      	ldr	r3, [r3, #8]
 800b558:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800b55c:	2b08      	cmp	r3, #8
 800b55e:	d106      	bne.n	800b56e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800b560:	4b8e      	ldr	r3, [pc, #568]	; (800b79c <HAL_RCC_OscConfig+0x274>)
 800b562:	685b      	ldr	r3, [r3, #4]
 800b564:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b568:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b56c:	d00c      	beq.n	800b588 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b56e:	4b8b      	ldr	r3, [pc, #556]	; (800b79c <HAL_RCC_OscConfig+0x274>)
 800b570:	689b      	ldr	r3, [r3, #8]
 800b572:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800b576:	2b0c      	cmp	r3, #12
 800b578:	d112      	bne.n	800b5a0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b57a:	4b88      	ldr	r3, [pc, #544]	; (800b79c <HAL_RCC_OscConfig+0x274>)
 800b57c:	685b      	ldr	r3, [r3, #4]
 800b57e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b582:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b586:	d10b      	bne.n	800b5a0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b588:	4b84      	ldr	r3, [pc, #528]	; (800b79c <HAL_RCC_OscConfig+0x274>)
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b590:	2b00      	cmp	r3, #0
 800b592:	d05b      	beq.n	800b64c <HAL_RCC_OscConfig+0x124>
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	685b      	ldr	r3, [r3, #4]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d157      	bne.n	800b64c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800b59c:	2301      	movs	r3, #1
 800b59e:	e25a      	b.n	800ba56 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	685b      	ldr	r3, [r3, #4]
 800b5a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b5a8:	d106      	bne.n	800b5b8 <HAL_RCC_OscConfig+0x90>
 800b5aa:	4b7c      	ldr	r3, [pc, #496]	; (800b79c <HAL_RCC_OscConfig+0x274>)
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	4a7b      	ldr	r2, [pc, #492]	; (800b79c <HAL_RCC_OscConfig+0x274>)
 800b5b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b5b4:	6013      	str	r3, [r2, #0]
 800b5b6:	e01d      	b.n	800b5f4 <HAL_RCC_OscConfig+0xcc>
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	685b      	ldr	r3, [r3, #4]
 800b5bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b5c0:	d10c      	bne.n	800b5dc <HAL_RCC_OscConfig+0xb4>
 800b5c2:	4b76      	ldr	r3, [pc, #472]	; (800b79c <HAL_RCC_OscConfig+0x274>)
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	4a75      	ldr	r2, [pc, #468]	; (800b79c <HAL_RCC_OscConfig+0x274>)
 800b5c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b5cc:	6013      	str	r3, [r2, #0]
 800b5ce:	4b73      	ldr	r3, [pc, #460]	; (800b79c <HAL_RCC_OscConfig+0x274>)
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	4a72      	ldr	r2, [pc, #456]	; (800b79c <HAL_RCC_OscConfig+0x274>)
 800b5d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b5d8:	6013      	str	r3, [r2, #0]
 800b5da:	e00b      	b.n	800b5f4 <HAL_RCC_OscConfig+0xcc>
 800b5dc:	4b6f      	ldr	r3, [pc, #444]	; (800b79c <HAL_RCC_OscConfig+0x274>)
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	4a6e      	ldr	r2, [pc, #440]	; (800b79c <HAL_RCC_OscConfig+0x274>)
 800b5e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b5e6:	6013      	str	r3, [r2, #0]
 800b5e8:	4b6c      	ldr	r3, [pc, #432]	; (800b79c <HAL_RCC_OscConfig+0x274>)
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	4a6b      	ldr	r2, [pc, #428]	; (800b79c <HAL_RCC_OscConfig+0x274>)
 800b5ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b5f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	685b      	ldr	r3, [r3, #4]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d013      	beq.n	800b624 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b5fc:	f7fd fe2c 	bl	8009258 <HAL_GetTick>
 800b600:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b602:	e008      	b.n	800b616 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b604:	f7fd fe28 	bl	8009258 <HAL_GetTick>
 800b608:	4602      	mov	r2, r0
 800b60a:	693b      	ldr	r3, [r7, #16]
 800b60c:	1ad3      	subs	r3, r2, r3
 800b60e:	2b64      	cmp	r3, #100	; 0x64
 800b610:	d901      	bls.n	800b616 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800b612:	2303      	movs	r3, #3
 800b614:	e21f      	b.n	800ba56 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b616:	4b61      	ldr	r3, [pc, #388]	; (800b79c <HAL_RCC_OscConfig+0x274>)
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d0f0      	beq.n	800b604 <HAL_RCC_OscConfig+0xdc>
 800b622:	e014      	b.n	800b64e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b624:	f7fd fe18 	bl	8009258 <HAL_GetTick>
 800b628:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b62a:	e008      	b.n	800b63e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b62c:	f7fd fe14 	bl	8009258 <HAL_GetTick>
 800b630:	4602      	mov	r2, r0
 800b632:	693b      	ldr	r3, [r7, #16]
 800b634:	1ad3      	subs	r3, r2, r3
 800b636:	2b64      	cmp	r3, #100	; 0x64
 800b638:	d901      	bls.n	800b63e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800b63a:	2303      	movs	r3, #3
 800b63c:	e20b      	b.n	800ba56 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b63e:	4b57      	ldr	r3, [pc, #348]	; (800b79c <HAL_RCC_OscConfig+0x274>)
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b646:	2b00      	cmp	r3, #0
 800b648:	d1f0      	bne.n	800b62c <HAL_RCC_OscConfig+0x104>
 800b64a:	e000      	b.n	800b64e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b64c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	f003 0302 	and.w	r3, r3, #2
 800b656:	2b00      	cmp	r3, #0
 800b658:	d06f      	beq.n	800b73a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800b65a:	4b50      	ldr	r3, [pc, #320]	; (800b79c <HAL_RCC_OscConfig+0x274>)
 800b65c:	689b      	ldr	r3, [r3, #8]
 800b65e:	f003 030c 	and.w	r3, r3, #12
 800b662:	2b00      	cmp	r3, #0
 800b664:	d017      	beq.n	800b696 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800b666:	4b4d      	ldr	r3, [pc, #308]	; (800b79c <HAL_RCC_OscConfig+0x274>)
 800b668:	689b      	ldr	r3, [r3, #8]
 800b66a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800b66e:	2b08      	cmp	r3, #8
 800b670:	d105      	bne.n	800b67e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800b672:	4b4a      	ldr	r3, [pc, #296]	; (800b79c <HAL_RCC_OscConfig+0x274>)
 800b674:	685b      	ldr	r3, [r3, #4]
 800b676:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d00b      	beq.n	800b696 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b67e:	4b47      	ldr	r3, [pc, #284]	; (800b79c <HAL_RCC_OscConfig+0x274>)
 800b680:	689b      	ldr	r3, [r3, #8]
 800b682:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800b686:	2b0c      	cmp	r3, #12
 800b688:	d11c      	bne.n	800b6c4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b68a:	4b44      	ldr	r3, [pc, #272]	; (800b79c <HAL_RCC_OscConfig+0x274>)
 800b68c:	685b      	ldr	r3, [r3, #4]
 800b68e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b692:	2b00      	cmp	r3, #0
 800b694:	d116      	bne.n	800b6c4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b696:	4b41      	ldr	r3, [pc, #260]	; (800b79c <HAL_RCC_OscConfig+0x274>)
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	f003 0302 	and.w	r3, r3, #2
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d005      	beq.n	800b6ae <HAL_RCC_OscConfig+0x186>
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	68db      	ldr	r3, [r3, #12]
 800b6a6:	2b01      	cmp	r3, #1
 800b6a8:	d001      	beq.n	800b6ae <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800b6aa:	2301      	movs	r3, #1
 800b6ac:	e1d3      	b.n	800ba56 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b6ae:	4b3b      	ldr	r3, [pc, #236]	; (800b79c <HAL_RCC_OscConfig+0x274>)
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	691b      	ldr	r3, [r3, #16]
 800b6ba:	00db      	lsls	r3, r3, #3
 800b6bc:	4937      	ldr	r1, [pc, #220]	; (800b79c <HAL_RCC_OscConfig+0x274>)
 800b6be:	4313      	orrs	r3, r2
 800b6c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b6c2:	e03a      	b.n	800b73a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	68db      	ldr	r3, [r3, #12]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d020      	beq.n	800b70e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b6cc:	4b34      	ldr	r3, [pc, #208]	; (800b7a0 <HAL_RCC_OscConfig+0x278>)
 800b6ce:	2201      	movs	r2, #1
 800b6d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b6d2:	f7fd fdc1 	bl	8009258 <HAL_GetTick>
 800b6d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b6d8:	e008      	b.n	800b6ec <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b6da:	f7fd fdbd 	bl	8009258 <HAL_GetTick>
 800b6de:	4602      	mov	r2, r0
 800b6e0:	693b      	ldr	r3, [r7, #16]
 800b6e2:	1ad3      	subs	r3, r2, r3
 800b6e4:	2b02      	cmp	r3, #2
 800b6e6:	d901      	bls.n	800b6ec <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800b6e8:	2303      	movs	r3, #3
 800b6ea:	e1b4      	b.n	800ba56 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b6ec:	4b2b      	ldr	r3, [pc, #172]	; (800b79c <HAL_RCC_OscConfig+0x274>)
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	f003 0302 	and.w	r3, r3, #2
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d0f0      	beq.n	800b6da <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b6f8:	4b28      	ldr	r3, [pc, #160]	; (800b79c <HAL_RCC_OscConfig+0x274>)
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	691b      	ldr	r3, [r3, #16]
 800b704:	00db      	lsls	r3, r3, #3
 800b706:	4925      	ldr	r1, [pc, #148]	; (800b79c <HAL_RCC_OscConfig+0x274>)
 800b708:	4313      	orrs	r3, r2
 800b70a:	600b      	str	r3, [r1, #0]
 800b70c:	e015      	b.n	800b73a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b70e:	4b24      	ldr	r3, [pc, #144]	; (800b7a0 <HAL_RCC_OscConfig+0x278>)
 800b710:	2200      	movs	r2, #0
 800b712:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b714:	f7fd fda0 	bl	8009258 <HAL_GetTick>
 800b718:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b71a:	e008      	b.n	800b72e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b71c:	f7fd fd9c 	bl	8009258 <HAL_GetTick>
 800b720:	4602      	mov	r2, r0
 800b722:	693b      	ldr	r3, [r7, #16]
 800b724:	1ad3      	subs	r3, r2, r3
 800b726:	2b02      	cmp	r3, #2
 800b728:	d901      	bls.n	800b72e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800b72a:	2303      	movs	r3, #3
 800b72c:	e193      	b.n	800ba56 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b72e:	4b1b      	ldr	r3, [pc, #108]	; (800b79c <HAL_RCC_OscConfig+0x274>)
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	f003 0302 	and.w	r3, r3, #2
 800b736:	2b00      	cmp	r3, #0
 800b738:	d1f0      	bne.n	800b71c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	f003 0308 	and.w	r3, r3, #8
 800b742:	2b00      	cmp	r3, #0
 800b744:	d036      	beq.n	800b7b4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	695b      	ldr	r3, [r3, #20]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d016      	beq.n	800b77c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b74e:	4b15      	ldr	r3, [pc, #84]	; (800b7a4 <HAL_RCC_OscConfig+0x27c>)
 800b750:	2201      	movs	r2, #1
 800b752:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b754:	f7fd fd80 	bl	8009258 <HAL_GetTick>
 800b758:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b75a:	e008      	b.n	800b76e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b75c:	f7fd fd7c 	bl	8009258 <HAL_GetTick>
 800b760:	4602      	mov	r2, r0
 800b762:	693b      	ldr	r3, [r7, #16]
 800b764:	1ad3      	subs	r3, r2, r3
 800b766:	2b02      	cmp	r3, #2
 800b768:	d901      	bls.n	800b76e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800b76a:	2303      	movs	r3, #3
 800b76c:	e173      	b.n	800ba56 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b76e:	4b0b      	ldr	r3, [pc, #44]	; (800b79c <HAL_RCC_OscConfig+0x274>)
 800b770:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b772:	f003 0302 	and.w	r3, r3, #2
 800b776:	2b00      	cmp	r3, #0
 800b778:	d0f0      	beq.n	800b75c <HAL_RCC_OscConfig+0x234>
 800b77a:	e01b      	b.n	800b7b4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b77c:	4b09      	ldr	r3, [pc, #36]	; (800b7a4 <HAL_RCC_OscConfig+0x27c>)
 800b77e:	2200      	movs	r2, #0
 800b780:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b782:	f7fd fd69 	bl	8009258 <HAL_GetTick>
 800b786:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b788:	e00e      	b.n	800b7a8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b78a:	f7fd fd65 	bl	8009258 <HAL_GetTick>
 800b78e:	4602      	mov	r2, r0
 800b790:	693b      	ldr	r3, [r7, #16]
 800b792:	1ad3      	subs	r3, r2, r3
 800b794:	2b02      	cmp	r3, #2
 800b796:	d907      	bls.n	800b7a8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800b798:	2303      	movs	r3, #3
 800b79a:	e15c      	b.n	800ba56 <HAL_RCC_OscConfig+0x52e>
 800b79c:	40023800 	.word	0x40023800
 800b7a0:	42470000 	.word	0x42470000
 800b7a4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b7a8:	4b8a      	ldr	r3, [pc, #552]	; (800b9d4 <HAL_RCC_OscConfig+0x4ac>)
 800b7aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b7ac:	f003 0302 	and.w	r3, r3, #2
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d1ea      	bne.n	800b78a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	f003 0304 	and.w	r3, r3, #4
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	f000 8097 	beq.w	800b8f0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b7c6:	4b83      	ldr	r3, [pc, #524]	; (800b9d4 <HAL_RCC_OscConfig+0x4ac>)
 800b7c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d10f      	bne.n	800b7f2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	60bb      	str	r3, [r7, #8]
 800b7d6:	4b7f      	ldr	r3, [pc, #508]	; (800b9d4 <HAL_RCC_OscConfig+0x4ac>)
 800b7d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7da:	4a7e      	ldr	r2, [pc, #504]	; (800b9d4 <HAL_RCC_OscConfig+0x4ac>)
 800b7dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b7e0:	6413      	str	r3, [r2, #64]	; 0x40
 800b7e2:	4b7c      	ldr	r3, [pc, #496]	; (800b9d4 <HAL_RCC_OscConfig+0x4ac>)
 800b7e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b7ea:	60bb      	str	r3, [r7, #8]
 800b7ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b7ee:	2301      	movs	r3, #1
 800b7f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b7f2:	4b79      	ldr	r3, [pc, #484]	; (800b9d8 <HAL_RCC_OscConfig+0x4b0>)
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d118      	bne.n	800b830 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b7fe:	4b76      	ldr	r3, [pc, #472]	; (800b9d8 <HAL_RCC_OscConfig+0x4b0>)
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	4a75      	ldr	r2, [pc, #468]	; (800b9d8 <HAL_RCC_OscConfig+0x4b0>)
 800b804:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b808:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b80a:	f7fd fd25 	bl	8009258 <HAL_GetTick>
 800b80e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b810:	e008      	b.n	800b824 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b812:	f7fd fd21 	bl	8009258 <HAL_GetTick>
 800b816:	4602      	mov	r2, r0
 800b818:	693b      	ldr	r3, [r7, #16]
 800b81a:	1ad3      	subs	r3, r2, r3
 800b81c:	2b02      	cmp	r3, #2
 800b81e:	d901      	bls.n	800b824 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800b820:	2303      	movs	r3, #3
 800b822:	e118      	b.n	800ba56 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b824:	4b6c      	ldr	r3, [pc, #432]	; (800b9d8 <HAL_RCC_OscConfig+0x4b0>)
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d0f0      	beq.n	800b812 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	689b      	ldr	r3, [r3, #8]
 800b834:	2b01      	cmp	r3, #1
 800b836:	d106      	bne.n	800b846 <HAL_RCC_OscConfig+0x31e>
 800b838:	4b66      	ldr	r3, [pc, #408]	; (800b9d4 <HAL_RCC_OscConfig+0x4ac>)
 800b83a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b83c:	4a65      	ldr	r2, [pc, #404]	; (800b9d4 <HAL_RCC_OscConfig+0x4ac>)
 800b83e:	f043 0301 	orr.w	r3, r3, #1
 800b842:	6713      	str	r3, [r2, #112]	; 0x70
 800b844:	e01c      	b.n	800b880 <HAL_RCC_OscConfig+0x358>
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	689b      	ldr	r3, [r3, #8]
 800b84a:	2b05      	cmp	r3, #5
 800b84c:	d10c      	bne.n	800b868 <HAL_RCC_OscConfig+0x340>
 800b84e:	4b61      	ldr	r3, [pc, #388]	; (800b9d4 <HAL_RCC_OscConfig+0x4ac>)
 800b850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b852:	4a60      	ldr	r2, [pc, #384]	; (800b9d4 <HAL_RCC_OscConfig+0x4ac>)
 800b854:	f043 0304 	orr.w	r3, r3, #4
 800b858:	6713      	str	r3, [r2, #112]	; 0x70
 800b85a:	4b5e      	ldr	r3, [pc, #376]	; (800b9d4 <HAL_RCC_OscConfig+0x4ac>)
 800b85c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b85e:	4a5d      	ldr	r2, [pc, #372]	; (800b9d4 <HAL_RCC_OscConfig+0x4ac>)
 800b860:	f043 0301 	orr.w	r3, r3, #1
 800b864:	6713      	str	r3, [r2, #112]	; 0x70
 800b866:	e00b      	b.n	800b880 <HAL_RCC_OscConfig+0x358>
 800b868:	4b5a      	ldr	r3, [pc, #360]	; (800b9d4 <HAL_RCC_OscConfig+0x4ac>)
 800b86a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b86c:	4a59      	ldr	r2, [pc, #356]	; (800b9d4 <HAL_RCC_OscConfig+0x4ac>)
 800b86e:	f023 0301 	bic.w	r3, r3, #1
 800b872:	6713      	str	r3, [r2, #112]	; 0x70
 800b874:	4b57      	ldr	r3, [pc, #348]	; (800b9d4 <HAL_RCC_OscConfig+0x4ac>)
 800b876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b878:	4a56      	ldr	r2, [pc, #344]	; (800b9d4 <HAL_RCC_OscConfig+0x4ac>)
 800b87a:	f023 0304 	bic.w	r3, r3, #4
 800b87e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	689b      	ldr	r3, [r3, #8]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d015      	beq.n	800b8b4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b888:	f7fd fce6 	bl	8009258 <HAL_GetTick>
 800b88c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b88e:	e00a      	b.n	800b8a6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b890:	f7fd fce2 	bl	8009258 <HAL_GetTick>
 800b894:	4602      	mov	r2, r0
 800b896:	693b      	ldr	r3, [r7, #16]
 800b898:	1ad3      	subs	r3, r2, r3
 800b89a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b89e:	4293      	cmp	r3, r2
 800b8a0:	d901      	bls.n	800b8a6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800b8a2:	2303      	movs	r3, #3
 800b8a4:	e0d7      	b.n	800ba56 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b8a6:	4b4b      	ldr	r3, [pc, #300]	; (800b9d4 <HAL_RCC_OscConfig+0x4ac>)
 800b8a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8aa:	f003 0302 	and.w	r3, r3, #2
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d0ee      	beq.n	800b890 <HAL_RCC_OscConfig+0x368>
 800b8b2:	e014      	b.n	800b8de <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b8b4:	f7fd fcd0 	bl	8009258 <HAL_GetTick>
 800b8b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b8ba:	e00a      	b.n	800b8d2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b8bc:	f7fd fccc 	bl	8009258 <HAL_GetTick>
 800b8c0:	4602      	mov	r2, r0
 800b8c2:	693b      	ldr	r3, [r7, #16]
 800b8c4:	1ad3      	subs	r3, r2, r3
 800b8c6:	f241 3288 	movw	r2, #5000	; 0x1388
 800b8ca:	4293      	cmp	r3, r2
 800b8cc:	d901      	bls.n	800b8d2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800b8ce:	2303      	movs	r3, #3
 800b8d0:	e0c1      	b.n	800ba56 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b8d2:	4b40      	ldr	r3, [pc, #256]	; (800b9d4 <HAL_RCC_OscConfig+0x4ac>)
 800b8d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8d6:	f003 0302 	and.w	r3, r3, #2
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d1ee      	bne.n	800b8bc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b8de:	7dfb      	ldrb	r3, [r7, #23]
 800b8e0:	2b01      	cmp	r3, #1
 800b8e2:	d105      	bne.n	800b8f0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b8e4:	4b3b      	ldr	r3, [pc, #236]	; (800b9d4 <HAL_RCC_OscConfig+0x4ac>)
 800b8e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8e8:	4a3a      	ldr	r2, [pc, #232]	; (800b9d4 <HAL_RCC_OscConfig+0x4ac>)
 800b8ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b8ee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	699b      	ldr	r3, [r3, #24]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	f000 80ad 	beq.w	800ba54 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b8fa:	4b36      	ldr	r3, [pc, #216]	; (800b9d4 <HAL_RCC_OscConfig+0x4ac>)
 800b8fc:	689b      	ldr	r3, [r3, #8]
 800b8fe:	f003 030c 	and.w	r3, r3, #12
 800b902:	2b08      	cmp	r3, #8
 800b904:	d060      	beq.n	800b9c8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	699b      	ldr	r3, [r3, #24]
 800b90a:	2b02      	cmp	r3, #2
 800b90c:	d145      	bne.n	800b99a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b90e:	4b33      	ldr	r3, [pc, #204]	; (800b9dc <HAL_RCC_OscConfig+0x4b4>)
 800b910:	2200      	movs	r2, #0
 800b912:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b914:	f7fd fca0 	bl	8009258 <HAL_GetTick>
 800b918:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b91a:	e008      	b.n	800b92e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b91c:	f7fd fc9c 	bl	8009258 <HAL_GetTick>
 800b920:	4602      	mov	r2, r0
 800b922:	693b      	ldr	r3, [r7, #16]
 800b924:	1ad3      	subs	r3, r2, r3
 800b926:	2b02      	cmp	r3, #2
 800b928:	d901      	bls.n	800b92e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800b92a:	2303      	movs	r3, #3
 800b92c:	e093      	b.n	800ba56 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b92e:	4b29      	ldr	r3, [pc, #164]	; (800b9d4 <HAL_RCC_OscConfig+0x4ac>)
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b936:	2b00      	cmp	r3, #0
 800b938:	d1f0      	bne.n	800b91c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	69da      	ldr	r2, [r3, #28]
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	6a1b      	ldr	r3, [r3, #32]
 800b942:	431a      	orrs	r2, r3
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b948:	019b      	lsls	r3, r3, #6
 800b94a:	431a      	orrs	r2, r3
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b950:	085b      	lsrs	r3, r3, #1
 800b952:	3b01      	subs	r3, #1
 800b954:	041b      	lsls	r3, r3, #16
 800b956:	431a      	orrs	r2, r3
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b95c:	061b      	lsls	r3, r3, #24
 800b95e:	431a      	orrs	r2, r3
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b964:	071b      	lsls	r3, r3, #28
 800b966:	491b      	ldr	r1, [pc, #108]	; (800b9d4 <HAL_RCC_OscConfig+0x4ac>)
 800b968:	4313      	orrs	r3, r2
 800b96a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b96c:	4b1b      	ldr	r3, [pc, #108]	; (800b9dc <HAL_RCC_OscConfig+0x4b4>)
 800b96e:	2201      	movs	r2, #1
 800b970:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b972:	f7fd fc71 	bl	8009258 <HAL_GetTick>
 800b976:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b978:	e008      	b.n	800b98c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b97a:	f7fd fc6d 	bl	8009258 <HAL_GetTick>
 800b97e:	4602      	mov	r2, r0
 800b980:	693b      	ldr	r3, [r7, #16]
 800b982:	1ad3      	subs	r3, r2, r3
 800b984:	2b02      	cmp	r3, #2
 800b986:	d901      	bls.n	800b98c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800b988:	2303      	movs	r3, #3
 800b98a:	e064      	b.n	800ba56 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b98c:	4b11      	ldr	r3, [pc, #68]	; (800b9d4 <HAL_RCC_OscConfig+0x4ac>)
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b994:	2b00      	cmp	r3, #0
 800b996:	d0f0      	beq.n	800b97a <HAL_RCC_OscConfig+0x452>
 800b998:	e05c      	b.n	800ba54 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b99a:	4b10      	ldr	r3, [pc, #64]	; (800b9dc <HAL_RCC_OscConfig+0x4b4>)
 800b99c:	2200      	movs	r2, #0
 800b99e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b9a0:	f7fd fc5a 	bl	8009258 <HAL_GetTick>
 800b9a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b9a6:	e008      	b.n	800b9ba <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b9a8:	f7fd fc56 	bl	8009258 <HAL_GetTick>
 800b9ac:	4602      	mov	r2, r0
 800b9ae:	693b      	ldr	r3, [r7, #16]
 800b9b0:	1ad3      	subs	r3, r2, r3
 800b9b2:	2b02      	cmp	r3, #2
 800b9b4:	d901      	bls.n	800b9ba <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800b9b6:	2303      	movs	r3, #3
 800b9b8:	e04d      	b.n	800ba56 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b9ba:	4b06      	ldr	r3, [pc, #24]	; (800b9d4 <HAL_RCC_OscConfig+0x4ac>)
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d1f0      	bne.n	800b9a8 <HAL_RCC_OscConfig+0x480>
 800b9c6:	e045      	b.n	800ba54 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	699b      	ldr	r3, [r3, #24]
 800b9cc:	2b01      	cmp	r3, #1
 800b9ce:	d107      	bne.n	800b9e0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800b9d0:	2301      	movs	r3, #1
 800b9d2:	e040      	b.n	800ba56 <HAL_RCC_OscConfig+0x52e>
 800b9d4:	40023800 	.word	0x40023800
 800b9d8:	40007000 	.word	0x40007000
 800b9dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800b9e0:	4b1f      	ldr	r3, [pc, #124]	; (800ba60 <HAL_RCC_OscConfig+0x538>)
 800b9e2:	685b      	ldr	r3, [r3, #4]
 800b9e4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	699b      	ldr	r3, [r3, #24]
 800b9ea:	2b01      	cmp	r3, #1
 800b9ec:	d030      	beq.n	800ba50 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b9f8:	429a      	cmp	r2, r3
 800b9fa:	d129      	bne.n	800ba50 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ba06:	429a      	cmp	r2, r3
 800ba08:	d122      	bne.n	800ba50 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800ba0a:	68fa      	ldr	r2, [r7, #12]
 800ba0c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800ba10:	4013      	ands	r3, r2
 800ba12:	687a      	ldr	r2, [r7, #4]
 800ba14:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800ba16:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800ba18:	4293      	cmp	r3, r2
 800ba1a:	d119      	bne.n	800ba50 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba26:	085b      	lsrs	r3, r3, #1
 800ba28:	3b01      	subs	r3, #1
 800ba2a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800ba2c:	429a      	cmp	r2, r3
 800ba2e:	d10f      	bne.n	800ba50 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba3a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800ba3c:	429a      	cmp	r2, r3
 800ba3e:	d107      	bne.n	800ba50 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba4a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ba4c:	429a      	cmp	r2, r3
 800ba4e:	d001      	beq.n	800ba54 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800ba50:	2301      	movs	r3, #1
 800ba52:	e000      	b.n	800ba56 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800ba54:	2300      	movs	r3, #0
}
 800ba56:	4618      	mov	r0, r3
 800ba58:	3718      	adds	r7, #24
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	bd80      	pop	{r7, pc}
 800ba5e:	bf00      	nop
 800ba60:	40023800 	.word	0x40023800

0800ba64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ba64:	b580      	push	{r7, lr}
 800ba66:	b082      	sub	sp, #8
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d101      	bne.n	800ba76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ba72:	2301      	movs	r3, #1
 800ba74:	e041      	b.n	800bafa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ba7c:	b2db      	uxtb	r3, r3
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d106      	bne.n	800ba90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	2200      	movs	r2, #0
 800ba86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ba8a:	6878      	ldr	r0, [r7, #4]
 800ba8c:	f7f7 f9ea 	bl	8002e64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	2202      	movs	r2, #2
 800ba94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	681a      	ldr	r2, [r3, #0]
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	3304      	adds	r3, #4
 800baa0:	4619      	mov	r1, r3
 800baa2:	4610      	mov	r0, r2
 800baa4:	f000 fc0a 	bl	800c2bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	2201      	movs	r2, #1
 800baac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	2201      	movs	r2, #1
 800bab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	2201      	movs	r2, #1
 800babc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	2201      	movs	r2, #1
 800bac4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	2201      	movs	r2, #1
 800bacc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	2201      	movs	r2, #1
 800bad4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	2201      	movs	r2, #1
 800badc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	2201      	movs	r2, #1
 800bae4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	2201      	movs	r2, #1
 800baec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	2201      	movs	r2, #1
 800baf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800baf8:	2300      	movs	r3, #0
}
 800bafa:	4618      	mov	r0, r3
 800bafc:	3708      	adds	r7, #8
 800bafe:	46bd      	mov	sp, r7
 800bb00:	bd80      	pop	{r7, pc}

0800bb02 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800bb02:	b580      	push	{r7, lr}
 800bb04:	b082      	sub	sp, #8
 800bb06:	af00      	add	r7, sp, #0
 800bb08:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d101      	bne.n	800bb14 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800bb10:	2301      	movs	r3, #1
 800bb12:	e041      	b.n	800bb98 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bb1a:	b2db      	uxtb	r3, r3
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d106      	bne.n	800bb2e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	2200      	movs	r2, #0
 800bb24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800bb28:	6878      	ldr	r0, [r7, #4]
 800bb2a:	f000 f839 	bl	800bba0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	2202      	movs	r2, #2
 800bb32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	681a      	ldr	r2, [r3, #0]
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	3304      	adds	r3, #4
 800bb3e:	4619      	mov	r1, r3
 800bb40:	4610      	mov	r0, r2
 800bb42:	f000 fbbb 	bl	800c2bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	2201      	movs	r2, #1
 800bb4a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	2201      	movs	r2, #1
 800bb52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	2201      	movs	r2, #1
 800bb5a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	2201      	movs	r2, #1
 800bb62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	2201      	movs	r2, #1
 800bb6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	2201      	movs	r2, #1
 800bb72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	2201      	movs	r2, #1
 800bb7a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	2201      	movs	r2, #1
 800bb82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	2201      	movs	r2, #1
 800bb8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	2201      	movs	r2, #1
 800bb92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bb96:	2300      	movs	r3, #0
}
 800bb98:	4618      	mov	r0, r3
 800bb9a:	3708      	adds	r7, #8
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	bd80      	pop	{r7, pc}

0800bba0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800bba0:	b480      	push	{r7}
 800bba2:	b083      	sub	sp, #12
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800bba8:	bf00      	nop
 800bbaa:	370c      	adds	r7, #12
 800bbac:	46bd      	mov	sp, r7
 800bbae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb2:	4770      	bx	lr

0800bbb4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bbb4:	b580      	push	{r7, lr}
 800bbb6:	b084      	sub	sp, #16
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	6078      	str	r0, [r7, #4]
 800bbbc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800bbbe:	683b      	ldr	r3, [r7, #0]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d109      	bne.n	800bbd8 <HAL_TIM_PWM_Start+0x24>
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bbca:	b2db      	uxtb	r3, r3
 800bbcc:	2b01      	cmp	r3, #1
 800bbce:	bf14      	ite	ne
 800bbd0:	2301      	movne	r3, #1
 800bbd2:	2300      	moveq	r3, #0
 800bbd4:	b2db      	uxtb	r3, r3
 800bbd6:	e022      	b.n	800bc1e <HAL_TIM_PWM_Start+0x6a>
 800bbd8:	683b      	ldr	r3, [r7, #0]
 800bbda:	2b04      	cmp	r3, #4
 800bbdc:	d109      	bne.n	800bbf2 <HAL_TIM_PWM_Start+0x3e>
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800bbe4:	b2db      	uxtb	r3, r3
 800bbe6:	2b01      	cmp	r3, #1
 800bbe8:	bf14      	ite	ne
 800bbea:	2301      	movne	r3, #1
 800bbec:	2300      	moveq	r3, #0
 800bbee:	b2db      	uxtb	r3, r3
 800bbf0:	e015      	b.n	800bc1e <HAL_TIM_PWM_Start+0x6a>
 800bbf2:	683b      	ldr	r3, [r7, #0]
 800bbf4:	2b08      	cmp	r3, #8
 800bbf6:	d109      	bne.n	800bc0c <HAL_TIM_PWM_Start+0x58>
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bbfe:	b2db      	uxtb	r3, r3
 800bc00:	2b01      	cmp	r3, #1
 800bc02:	bf14      	ite	ne
 800bc04:	2301      	movne	r3, #1
 800bc06:	2300      	moveq	r3, #0
 800bc08:	b2db      	uxtb	r3, r3
 800bc0a:	e008      	b.n	800bc1e <HAL_TIM_PWM_Start+0x6a>
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bc12:	b2db      	uxtb	r3, r3
 800bc14:	2b01      	cmp	r3, #1
 800bc16:	bf14      	ite	ne
 800bc18:	2301      	movne	r3, #1
 800bc1a:	2300      	moveq	r3, #0
 800bc1c:	b2db      	uxtb	r3, r3
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d001      	beq.n	800bc26 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800bc22:	2301      	movs	r3, #1
 800bc24:	e07c      	b.n	800bd20 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800bc26:	683b      	ldr	r3, [r7, #0]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d104      	bne.n	800bc36 <HAL_TIM_PWM_Start+0x82>
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	2202      	movs	r2, #2
 800bc30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bc34:	e013      	b.n	800bc5e <HAL_TIM_PWM_Start+0xaa>
 800bc36:	683b      	ldr	r3, [r7, #0]
 800bc38:	2b04      	cmp	r3, #4
 800bc3a:	d104      	bne.n	800bc46 <HAL_TIM_PWM_Start+0x92>
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	2202      	movs	r2, #2
 800bc40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bc44:	e00b      	b.n	800bc5e <HAL_TIM_PWM_Start+0xaa>
 800bc46:	683b      	ldr	r3, [r7, #0]
 800bc48:	2b08      	cmp	r3, #8
 800bc4a:	d104      	bne.n	800bc56 <HAL_TIM_PWM_Start+0xa2>
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	2202      	movs	r2, #2
 800bc50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bc54:	e003      	b.n	800bc5e <HAL_TIM_PWM_Start+0xaa>
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	2202      	movs	r2, #2
 800bc5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	2201      	movs	r2, #1
 800bc64:	6839      	ldr	r1, [r7, #0]
 800bc66:	4618      	mov	r0, r3
 800bc68:	f000 fe12 	bl	800c890 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	4a2d      	ldr	r2, [pc, #180]	; (800bd28 <HAL_TIM_PWM_Start+0x174>)
 800bc72:	4293      	cmp	r3, r2
 800bc74:	d004      	beq.n	800bc80 <HAL_TIM_PWM_Start+0xcc>
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	4a2c      	ldr	r2, [pc, #176]	; (800bd2c <HAL_TIM_PWM_Start+0x178>)
 800bc7c:	4293      	cmp	r3, r2
 800bc7e:	d101      	bne.n	800bc84 <HAL_TIM_PWM_Start+0xd0>
 800bc80:	2301      	movs	r3, #1
 800bc82:	e000      	b.n	800bc86 <HAL_TIM_PWM_Start+0xd2>
 800bc84:	2300      	movs	r3, #0
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d007      	beq.n	800bc9a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bc98:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	4a22      	ldr	r2, [pc, #136]	; (800bd28 <HAL_TIM_PWM_Start+0x174>)
 800bca0:	4293      	cmp	r3, r2
 800bca2:	d022      	beq.n	800bcea <HAL_TIM_PWM_Start+0x136>
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bcac:	d01d      	beq.n	800bcea <HAL_TIM_PWM_Start+0x136>
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	4a1f      	ldr	r2, [pc, #124]	; (800bd30 <HAL_TIM_PWM_Start+0x17c>)
 800bcb4:	4293      	cmp	r3, r2
 800bcb6:	d018      	beq.n	800bcea <HAL_TIM_PWM_Start+0x136>
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	4a1d      	ldr	r2, [pc, #116]	; (800bd34 <HAL_TIM_PWM_Start+0x180>)
 800bcbe:	4293      	cmp	r3, r2
 800bcc0:	d013      	beq.n	800bcea <HAL_TIM_PWM_Start+0x136>
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	4a1c      	ldr	r2, [pc, #112]	; (800bd38 <HAL_TIM_PWM_Start+0x184>)
 800bcc8:	4293      	cmp	r3, r2
 800bcca:	d00e      	beq.n	800bcea <HAL_TIM_PWM_Start+0x136>
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	4a16      	ldr	r2, [pc, #88]	; (800bd2c <HAL_TIM_PWM_Start+0x178>)
 800bcd2:	4293      	cmp	r3, r2
 800bcd4:	d009      	beq.n	800bcea <HAL_TIM_PWM_Start+0x136>
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	4a18      	ldr	r2, [pc, #96]	; (800bd3c <HAL_TIM_PWM_Start+0x188>)
 800bcdc:	4293      	cmp	r3, r2
 800bcde:	d004      	beq.n	800bcea <HAL_TIM_PWM_Start+0x136>
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	4a16      	ldr	r2, [pc, #88]	; (800bd40 <HAL_TIM_PWM_Start+0x18c>)
 800bce6:	4293      	cmp	r3, r2
 800bce8:	d111      	bne.n	800bd0e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	689b      	ldr	r3, [r3, #8]
 800bcf0:	f003 0307 	and.w	r3, r3, #7
 800bcf4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	2b06      	cmp	r3, #6
 800bcfa:	d010      	beq.n	800bd1e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	681a      	ldr	r2, [r3, #0]
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	f042 0201 	orr.w	r2, r2, #1
 800bd0a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bd0c:	e007      	b.n	800bd1e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	681a      	ldr	r2, [r3, #0]
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	f042 0201 	orr.w	r2, r2, #1
 800bd1c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800bd1e:	2300      	movs	r3, #0
}
 800bd20:	4618      	mov	r0, r3
 800bd22:	3710      	adds	r7, #16
 800bd24:	46bd      	mov	sp, r7
 800bd26:	bd80      	pop	{r7, pc}
 800bd28:	40010000 	.word	0x40010000
 800bd2c:	40010400 	.word	0x40010400
 800bd30:	40000400 	.word	0x40000400
 800bd34:	40000800 	.word	0x40000800
 800bd38:	40000c00 	.word	0x40000c00
 800bd3c:	40014000 	.word	0x40014000
 800bd40:	40001800 	.word	0x40001800

0800bd44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bd44:	b580      	push	{r7, lr}
 800bd46:	b082      	sub	sp, #8
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	691b      	ldr	r3, [r3, #16]
 800bd52:	f003 0302 	and.w	r3, r3, #2
 800bd56:	2b02      	cmp	r3, #2
 800bd58:	d122      	bne.n	800bda0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	68db      	ldr	r3, [r3, #12]
 800bd60:	f003 0302 	and.w	r3, r3, #2
 800bd64:	2b02      	cmp	r3, #2
 800bd66:	d11b      	bne.n	800bda0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	f06f 0202 	mvn.w	r2, #2
 800bd70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	2201      	movs	r2, #1
 800bd76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	699b      	ldr	r3, [r3, #24]
 800bd7e:	f003 0303 	and.w	r3, r3, #3
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d003      	beq.n	800bd8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bd86:	6878      	ldr	r0, [r7, #4]
 800bd88:	f000 fa7a 	bl	800c280 <HAL_TIM_IC_CaptureCallback>
 800bd8c:	e005      	b.n	800bd9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bd8e:	6878      	ldr	r0, [r7, #4]
 800bd90:	f000 fa6c 	bl	800c26c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bd94:	6878      	ldr	r0, [r7, #4]
 800bd96:	f000 fa7d 	bl	800c294 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	2200      	movs	r2, #0
 800bd9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	691b      	ldr	r3, [r3, #16]
 800bda6:	f003 0304 	and.w	r3, r3, #4
 800bdaa:	2b04      	cmp	r3, #4
 800bdac:	d122      	bne.n	800bdf4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	68db      	ldr	r3, [r3, #12]
 800bdb4:	f003 0304 	and.w	r3, r3, #4
 800bdb8:	2b04      	cmp	r3, #4
 800bdba:	d11b      	bne.n	800bdf4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	f06f 0204 	mvn.w	r2, #4
 800bdc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	2202      	movs	r2, #2
 800bdca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	699b      	ldr	r3, [r3, #24]
 800bdd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d003      	beq.n	800bde2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bdda:	6878      	ldr	r0, [r7, #4]
 800bddc:	f000 fa50 	bl	800c280 <HAL_TIM_IC_CaptureCallback>
 800bde0:	e005      	b.n	800bdee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bde2:	6878      	ldr	r0, [r7, #4]
 800bde4:	f000 fa42 	bl	800c26c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bde8:	6878      	ldr	r0, [r7, #4]
 800bdea:	f000 fa53 	bl	800c294 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	2200      	movs	r2, #0
 800bdf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	691b      	ldr	r3, [r3, #16]
 800bdfa:	f003 0308 	and.w	r3, r3, #8
 800bdfe:	2b08      	cmp	r3, #8
 800be00:	d122      	bne.n	800be48 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	68db      	ldr	r3, [r3, #12]
 800be08:	f003 0308 	and.w	r3, r3, #8
 800be0c:	2b08      	cmp	r3, #8
 800be0e:	d11b      	bne.n	800be48 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	f06f 0208 	mvn.w	r2, #8
 800be18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	2204      	movs	r2, #4
 800be1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	69db      	ldr	r3, [r3, #28]
 800be26:	f003 0303 	and.w	r3, r3, #3
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d003      	beq.n	800be36 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800be2e:	6878      	ldr	r0, [r7, #4]
 800be30:	f000 fa26 	bl	800c280 <HAL_TIM_IC_CaptureCallback>
 800be34:	e005      	b.n	800be42 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800be36:	6878      	ldr	r0, [r7, #4]
 800be38:	f000 fa18 	bl	800c26c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800be3c:	6878      	ldr	r0, [r7, #4]
 800be3e:	f000 fa29 	bl	800c294 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	2200      	movs	r2, #0
 800be46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	691b      	ldr	r3, [r3, #16]
 800be4e:	f003 0310 	and.w	r3, r3, #16
 800be52:	2b10      	cmp	r3, #16
 800be54:	d122      	bne.n	800be9c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	68db      	ldr	r3, [r3, #12]
 800be5c:	f003 0310 	and.w	r3, r3, #16
 800be60:	2b10      	cmp	r3, #16
 800be62:	d11b      	bne.n	800be9c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	f06f 0210 	mvn.w	r2, #16
 800be6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	2208      	movs	r2, #8
 800be72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	69db      	ldr	r3, [r3, #28]
 800be7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d003      	beq.n	800be8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800be82:	6878      	ldr	r0, [r7, #4]
 800be84:	f000 f9fc 	bl	800c280 <HAL_TIM_IC_CaptureCallback>
 800be88:	e005      	b.n	800be96 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800be8a:	6878      	ldr	r0, [r7, #4]
 800be8c:	f000 f9ee 	bl	800c26c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800be90:	6878      	ldr	r0, [r7, #4]
 800be92:	f000 f9ff 	bl	800c294 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	2200      	movs	r2, #0
 800be9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	691b      	ldr	r3, [r3, #16]
 800bea2:	f003 0301 	and.w	r3, r3, #1
 800bea6:	2b01      	cmp	r3, #1
 800bea8:	d10e      	bne.n	800bec8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	68db      	ldr	r3, [r3, #12]
 800beb0:	f003 0301 	and.w	r3, r3, #1
 800beb4:	2b01      	cmp	r3, #1
 800beb6:	d107      	bne.n	800bec8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	f06f 0201 	mvn.w	r2, #1
 800bec0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bec2:	6878      	ldr	r0, [r7, #4]
 800bec4:	f000 f9c8 	bl	800c258 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	691b      	ldr	r3, [r3, #16]
 800bece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bed2:	2b80      	cmp	r3, #128	; 0x80
 800bed4:	d10e      	bne.n	800bef4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	68db      	ldr	r3, [r3, #12]
 800bedc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bee0:	2b80      	cmp	r3, #128	; 0x80
 800bee2:	d107      	bne.n	800bef4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800beec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800beee:	6878      	ldr	r0, [r7, #4]
 800bef0:	f000 fd7a 	bl	800c9e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	691b      	ldr	r3, [r3, #16]
 800befa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800befe:	2b40      	cmp	r3, #64	; 0x40
 800bf00:	d10e      	bne.n	800bf20 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	68db      	ldr	r3, [r3, #12]
 800bf08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf0c:	2b40      	cmp	r3, #64	; 0x40
 800bf0e:	d107      	bne.n	800bf20 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bf18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bf1a:	6878      	ldr	r0, [r7, #4]
 800bf1c:	f000 f9c4 	bl	800c2a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	691b      	ldr	r3, [r3, #16]
 800bf26:	f003 0320 	and.w	r3, r3, #32
 800bf2a:	2b20      	cmp	r3, #32
 800bf2c:	d10e      	bne.n	800bf4c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	68db      	ldr	r3, [r3, #12]
 800bf34:	f003 0320 	and.w	r3, r3, #32
 800bf38:	2b20      	cmp	r3, #32
 800bf3a:	d107      	bne.n	800bf4c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	f06f 0220 	mvn.w	r2, #32
 800bf44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bf46:	6878      	ldr	r0, [r7, #4]
 800bf48:	f000 fd44 	bl	800c9d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bf4c:	bf00      	nop
 800bf4e:	3708      	adds	r7, #8
 800bf50:	46bd      	mov	sp, r7
 800bf52:	bd80      	pop	{r7, pc}

0800bf54 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800bf54:	b580      	push	{r7, lr}
 800bf56:	b084      	sub	sp, #16
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	60f8      	str	r0, [r7, #12]
 800bf5c:	60b9      	str	r1, [r7, #8]
 800bf5e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bf66:	2b01      	cmp	r3, #1
 800bf68:	d101      	bne.n	800bf6e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800bf6a:	2302      	movs	r3, #2
 800bf6c:	e0ac      	b.n	800c0c8 <HAL_TIM_PWM_ConfigChannel+0x174>
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	2201      	movs	r2, #1
 800bf72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	2b0c      	cmp	r3, #12
 800bf7a:	f200 809f 	bhi.w	800c0bc <HAL_TIM_PWM_ConfigChannel+0x168>
 800bf7e:	a201      	add	r2, pc, #4	; (adr r2, 800bf84 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800bf80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf84:	0800bfb9 	.word	0x0800bfb9
 800bf88:	0800c0bd 	.word	0x0800c0bd
 800bf8c:	0800c0bd 	.word	0x0800c0bd
 800bf90:	0800c0bd 	.word	0x0800c0bd
 800bf94:	0800bff9 	.word	0x0800bff9
 800bf98:	0800c0bd 	.word	0x0800c0bd
 800bf9c:	0800c0bd 	.word	0x0800c0bd
 800bfa0:	0800c0bd 	.word	0x0800c0bd
 800bfa4:	0800c03b 	.word	0x0800c03b
 800bfa8:	0800c0bd 	.word	0x0800c0bd
 800bfac:	0800c0bd 	.word	0x0800c0bd
 800bfb0:	0800c0bd 	.word	0x0800c0bd
 800bfb4:	0800c07b 	.word	0x0800c07b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	68b9      	ldr	r1, [r7, #8]
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	f000 fa1c 	bl	800c3fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	699a      	ldr	r2, [r3, #24]
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	f042 0208 	orr.w	r2, r2, #8
 800bfd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	699a      	ldr	r2, [r3, #24]
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	f022 0204 	bic.w	r2, r2, #4
 800bfe2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	6999      	ldr	r1, [r3, #24]
 800bfea:	68bb      	ldr	r3, [r7, #8]
 800bfec:	691a      	ldr	r2, [r3, #16]
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	430a      	orrs	r2, r1
 800bff4:	619a      	str	r2, [r3, #24]
      break;
 800bff6:	e062      	b.n	800c0be <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	68b9      	ldr	r1, [r7, #8]
 800bffe:	4618      	mov	r0, r3
 800c000:	f000 fa6c 	bl	800c4dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	699a      	ldr	r2, [r3, #24]
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c012:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	699a      	ldr	r2, [r3, #24]
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c022:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	6999      	ldr	r1, [r3, #24]
 800c02a:	68bb      	ldr	r3, [r7, #8]
 800c02c:	691b      	ldr	r3, [r3, #16]
 800c02e:	021a      	lsls	r2, r3, #8
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	430a      	orrs	r2, r1
 800c036:	619a      	str	r2, [r3, #24]
      break;
 800c038:	e041      	b.n	800c0be <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	68b9      	ldr	r1, [r7, #8]
 800c040:	4618      	mov	r0, r3
 800c042:	f000 fac1 	bl	800c5c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	69da      	ldr	r2, [r3, #28]
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	f042 0208 	orr.w	r2, r2, #8
 800c054:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	69da      	ldr	r2, [r3, #28]
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	f022 0204 	bic.w	r2, r2, #4
 800c064:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	69d9      	ldr	r1, [r3, #28]
 800c06c:	68bb      	ldr	r3, [r7, #8]
 800c06e:	691a      	ldr	r2, [r3, #16]
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	430a      	orrs	r2, r1
 800c076:	61da      	str	r2, [r3, #28]
      break;
 800c078:	e021      	b.n	800c0be <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	68b9      	ldr	r1, [r7, #8]
 800c080:	4618      	mov	r0, r3
 800c082:	f000 fb15 	bl	800c6b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	69da      	ldr	r2, [r3, #28]
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c094:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	69da      	ldr	r2, [r3, #28]
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c0a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	69d9      	ldr	r1, [r3, #28]
 800c0ac:	68bb      	ldr	r3, [r7, #8]
 800c0ae:	691b      	ldr	r3, [r3, #16]
 800c0b0:	021a      	lsls	r2, r3, #8
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	430a      	orrs	r2, r1
 800c0b8:	61da      	str	r2, [r3, #28]
      break;
 800c0ba:	e000      	b.n	800c0be <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800c0bc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	2200      	movs	r2, #0
 800c0c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c0c6:	2300      	movs	r3, #0
}
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	3710      	adds	r7, #16
 800c0cc:	46bd      	mov	sp, r7
 800c0ce:	bd80      	pop	{r7, pc}

0800c0d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c0d0:	b580      	push	{r7, lr}
 800c0d2:	b084      	sub	sp, #16
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	6078      	str	r0, [r7, #4]
 800c0d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c0e0:	2b01      	cmp	r3, #1
 800c0e2:	d101      	bne.n	800c0e8 <HAL_TIM_ConfigClockSource+0x18>
 800c0e4:	2302      	movs	r3, #2
 800c0e6:	e0b3      	b.n	800c250 <HAL_TIM_ConfigClockSource+0x180>
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	2201      	movs	r2, #1
 800c0ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	2202      	movs	r2, #2
 800c0f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	689b      	ldr	r3, [r3, #8]
 800c0fe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800c106:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c10e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	68fa      	ldr	r2, [r7, #12]
 800c116:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c118:	683b      	ldr	r3, [r7, #0]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c120:	d03e      	beq.n	800c1a0 <HAL_TIM_ConfigClockSource+0xd0>
 800c122:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c126:	f200 8087 	bhi.w	800c238 <HAL_TIM_ConfigClockSource+0x168>
 800c12a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c12e:	f000 8085 	beq.w	800c23c <HAL_TIM_ConfigClockSource+0x16c>
 800c132:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c136:	d87f      	bhi.n	800c238 <HAL_TIM_ConfigClockSource+0x168>
 800c138:	2b70      	cmp	r3, #112	; 0x70
 800c13a:	d01a      	beq.n	800c172 <HAL_TIM_ConfigClockSource+0xa2>
 800c13c:	2b70      	cmp	r3, #112	; 0x70
 800c13e:	d87b      	bhi.n	800c238 <HAL_TIM_ConfigClockSource+0x168>
 800c140:	2b60      	cmp	r3, #96	; 0x60
 800c142:	d050      	beq.n	800c1e6 <HAL_TIM_ConfigClockSource+0x116>
 800c144:	2b60      	cmp	r3, #96	; 0x60
 800c146:	d877      	bhi.n	800c238 <HAL_TIM_ConfigClockSource+0x168>
 800c148:	2b50      	cmp	r3, #80	; 0x50
 800c14a:	d03c      	beq.n	800c1c6 <HAL_TIM_ConfigClockSource+0xf6>
 800c14c:	2b50      	cmp	r3, #80	; 0x50
 800c14e:	d873      	bhi.n	800c238 <HAL_TIM_ConfigClockSource+0x168>
 800c150:	2b40      	cmp	r3, #64	; 0x40
 800c152:	d058      	beq.n	800c206 <HAL_TIM_ConfigClockSource+0x136>
 800c154:	2b40      	cmp	r3, #64	; 0x40
 800c156:	d86f      	bhi.n	800c238 <HAL_TIM_ConfigClockSource+0x168>
 800c158:	2b30      	cmp	r3, #48	; 0x30
 800c15a:	d064      	beq.n	800c226 <HAL_TIM_ConfigClockSource+0x156>
 800c15c:	2b30      	cmp	r3, #48	; 0x30
 800c15e:	d86b      	bhi.n	800c238 <HAL_TIM_ConfigClockSource+0x168>
 800c160:	2b20      	cmp	r3, #32
 800c162:	d060      	beq.n	800c226 <HAL_TIM_ConfigClockSource+0x156>
 800c164:	2b20      	cmp	r3, #32
 800c166:	d867      	bhi.n	800c238 <HAL_TIM_ConfigClockSource+0x168>
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d05c      	beq.n	800c226 <HAL_TIM_ConfigClockSource+0x156>
 800c16c:	2b10      	cmp	r3, #16
 800c16e:	d05a      	beq.n	800c226 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800c170:	e062      	b.n	800c238 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	6818      	ldr	r0, [r3, #0]
 800c176:	683b      	ldr	r3, [r7, #0]
 800c178:	6899      	ldr	r1, [r3, #8]
 800c17a:	683b      	ldr	r3, [r7, #0]
 800c17c:	685a      	ldr	r2, [r3, #4]
 800c17e:	683b      	ldr	r3, [r7, #0]
 800c180:	68db      	ldr	r3, [r3, #12]
 800c182:	f000 fb65 	bl	800c850 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	689b      	ldr	r3, [r3, #8]
 800c18c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c194:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	68fa      	ldr	r2, [r7, #12]
 800c19c:	609a      	str	r2, [r3, #8]
      break;
 800c19e:	e04e      	b.n	800c23e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	6818      	ldr	r0, [r3, #0]
 800c1a4:	683b      	ldr	r3, [r7, #0]
 800c1a6:	6899      	ldr	r1, [r3, #8]
 800c1a8:	683b      	ldr	r3, [r7, #0]
 800c1aa:	685a      	ldr	r2, [r3, #4]
 800c1ac:	683b      	ldr	r3, [r7, #0]
 800c1ae:	68db      	ldr	r3, [r3, #12]
 800c1b0:	f000 fb4e 	bl	800c850 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	689a      	ldr	r2, [r3, #8]
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c1c2:	609a      	str	r2, [r3, #8]
      break;
 800c1c4:	e03b      	b.n	800c23e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	6818      	ldr	r0, [r3, #0]
 800c1ca:	683b      	ldr	r3, [r7, #0]
 800c1cc:	6859      	ldr	r1, [r3, #4]
 800c1ce:	683b      	ldr	r3, [r7, #0]
 800c1d0:	68db      	ldr	r3, [r3, #12]
 800c1d2:	461a      	mov	r2, r3
 800c1d4:	f000 fac2 	bl	800c75c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	2150      	movs	r1, #80	; 0x50
 800c1de:	4618      	mov	r0, r3
 800c1e0:	f000 fb1b 	bl	800c81a <TIM_ITRx_SetConfig>
      break;
 800c1e4:	e02b      	b.n	800c23e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	6818      	ldr	r0, [r3, #0]
 800c1ea:	683b      	ldr	r3, [r7, #0]
 800c1ec:	6859      	ldr	r1, [r3, #4]
 800c1ee:	683b      	ldr	r3, [r7, #0]
 800c1f0:	68db      	ldr	r3, [r3, #12]
 800c1f2:	461a      	mov	r2, r3
 800c1f4:	f000 fae1 	bl	800c7ba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	2160      	movs	r1, #96	; 0x60
 800c1fe:	4618      	mov	r0, r3
 800c200:	f000 fb0b 	bl	800c81a <TIM_ITRx_SetConfig>
      break;
 800c204:	e01b      	b.n	800c23e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	6818      	ldr	r0, [r3, #0]
 800c20a:	683b      	ldr	r3, [r7, #0]
 800c20c:	6859      	ldr	r1, [r3, #4]
 800c20e:	683b      	ldr	r3, [r7, #0]
 800c210:	68db      	ldr	r3, [r3, #12]
 800c212:	461a      	mov	r2, r3
 800c214:	f000 faa2 	bl	800c75c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	2140      	movs	r1, #64	; 0x40
 800c21e:	4618      	mov	r0, r3
 800c220:	f000 fafb 	bl	800c81a <TIM_ITRx_SetConfig>
      break;
 800c224:	e00b      	b.n	800c23e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	681a      	ldr	r2, [r3, #0]
 800c22a:	683b      	ldr	r3, [r7, #0]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	4619      	mov	r1, r3
 800c230:	4610      	mov	r0, r2
 800c232:	f000 faf2 	bl	800c81a <TIM_ITRx_SetConfig>
        break;
 800c236:	e002      	b.n	800c23e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800c238:	bf00      	nop
 800c23a:	e000      	b.n	800c23e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800c23c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	2201      	movs	r2, #1
 800c242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	2200      	movs	r2, #0
 800c24a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c24e:	2300      	movs	r3, #0
}
 800c250:	4618      	mov	r0, r3
 800c252:	3710      	adds	r7, #16
 800c254:	46bd      	mov	sp, r7
 800c256:	bd80      	pop	{r7, pc}

0800c258 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c258:	b480      	push	{r7}
 800c25a:	b083      	sub	sp, #12
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800c260:	bf00      	nop
 800c262:	370c      	adds	r7, #12
 800c264:	46bd      	mov	sp, r7
 800c266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c26a:	4770      	bx	lr

0800c26c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c26c:	b480      	push	{r7}
 800c26e:	b083      	sub	sp, #12
 800c270:	af00      	add	r7, sp, #0
 800c272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c274:	bf00      	nop
 800c276:	370c      	adds	r7, #12
 800c278:	46bd      	mov	sp, r7
 800c27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c27e:	4770      	bx	lr

0800c280 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c280:	b480      	push	{r7}
 800c282:	b083      	sub	sp, #12
 800c284:	af00      	add	r7, sp, #0
 800c286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c288:	bf00      	nop
 800c28a:	370c      	adds	r7, #12
 800c28c:	46bd      	mov	sp, r7
 800c28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c292:	4770      	bx	lr

0800c294 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c294:	b480      	push	{r7}
 800c296:	b083      	sub	sp, #12
 800c298:	af00      	add	r7, sp, #0
 800c29a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c29c:	bf00      	nop
 800c29e:	370c      	adds	r7, #12
 800c2a0:	46bd      	mov	sp, r7
 800c2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a6:	4770      	bx	lr

0800c2a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c2a8:	b480      	push	{r7}
 800c2aa:	b083      	sub	sp, #12
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c2b0:	bf00      	nop
 800c2b2:	370c      	adds	r7, #12
 800c2b4:	46bd      	mov	sp, r7
 800c2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ba:	4770      	bx	lr

0800c2bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c2bc:	b480      	push	{r7}
 800c2be:	b085      	sub	sp, #20
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	6078      	str	r0, [r7, #4]
 800c2c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	4a40      	ldr	r2, [pc, #256]	; (800c3d0 <TIM_Base_SetConfig+0x114>)
 800c2d0:	4293      	cmp	r3, r2
 800c2d2:	d013      	beq.n	800c2fc <TIM_Base_SetConfig+0x40>
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c2da:	d00f      	beq.n	800c2fc <TIM_Base_SetConfig+0x40>
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	4a3d      	ldr	r2, [pc, #244]	; (800c3d4 <TIM_Base_SetConfig+0x118>)
 800c2e0:	4293      	cmp	r3, r2
 800c2e2:	d00b      	beq.n	800c2fc <TIM_Base_SetConfig+0x40>
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	4a3c      	ldr	r2, [pc, #240]	; (800c3d8 <TIM_Base_SetConfig+0x11c>)
 800c2e8:	4293      	cmp	r3, r2
 800c2ea:	d007      	beq.n	800c2fc <TIM_Base_SetConfig+0x40>
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	4a3b      	ldr	r2, [pc, #236]	; (800c3dc <TIM_Base_SetConfig+0x120>)
 800c2f0:	4293      	cmp	r3, r2
 800c2f2:	d003      	beq.n	800c2fc <TIM_Base_SetConfig+0x40>
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	4a3a      	ldr	r2, [pc, #232]	; (800c3e0 <TIM_Base_SetConfig+0x124>)
 800c2f8:	4293      	cmp	r3, r2
 800c2fa:	d108      	bne.n	800c30e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c302:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c304:	683b      	ldr	r3, [r7, #0]
 800c306:	685b      	ldr	r3, [r3, #4]
 800c308:	68fa      	ldr	r2, [r7, #12]
 800c30a:	4313      	orrs	r3, r2
 800c30c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	4a2f      	ldr	r2, [pc, #188]	; (800c3d0 <TIM_Base_SetConfig+0x114>)
 800c312:	4293      	cmp	r3, r2
 800c314:	d02b      	beq.n	800c36e <TIM_Base_SetConfig+0xb2>
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c31c:	d027      	beq.n	800c36e <TIM_Base_SetConfig+0xb2>
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	4a2c      	ldr	r2, [pc, #176]	; (800c3d4 <TIM_Base_SetConfig+0x118>)
 800c322:	4293      	cmp	r3, r2
 800c324:	d023      	beq.n	800c36e <TIM_Base_SetConfig+0xb2>
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	4a2b      	ldr	r2, [pc, #172]	; (800c3d8 <TIM_Base_SetConfig+0x11c>)
 800c32a:	4293      	cmp	r3, r2
 800c32c:	d01f      	beq.n	800c36e <TIM_Base_SetConfig+0xb2>
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	4a2a      	ldr	r2, [pc, #168]	; (800c3dc <TIM_Base_SetConfig+0x120>)
 800c332:	4293      	cmp	r3, r2
 800c334:	d01b      	beq.n	800c36e <TIM_Base_SetConfig+0xb2>
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	4a29      	ldr	r2, [pc, #164]	; (800c3e0 <TIM_Base_SetConfig+0x124>)
 800c33a:	4293      	cmp	r3, r2
 800c33c:	d017      	beq.n	800c36e <TIM_Base_SetConfig+0xb2>
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	4a28      	ldr	r2, [pc, #160]	; (800c3e4 <TIM_Base_SetConfig+0x128>)
 800c342:	4293      	cmp	r3, r2
 800c344:	d013      	beq.n	800c36e <TIM_Base_SetConfig+0xb2>
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	4a27      	ldr	r2, [pc, #156]	; (800c3e8 <TIM_Base_SetConfig+0x12c>)
 800c34a:	4293      	cmp	r3, r2
 800c34c:	d00f      	beq.n	800c36e <TIM_Base_SetConfig+0xb2>
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	4a26      	ldr	r2, [pc, #152]	; (800c3ec <TIM_Base_SetConfig+0x130>)
 800c352:	4293      	cmp	r3, r2
 800c354:	d00b      	beq.n	800c36e <TIM_Base_SetConfig+0xb2>
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	4a25      	ldr	r2, [pc, #148]	; (800c3f0 <TIM_Base_SetConfig+0x134>)
 800c35a:	4293      	cmp	r3, r2
 800c35c:	d007      	beq.n	800c36e <TIM_Base_SetConfig+0xb2>
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	4a24      	ldr	r2, [pc, #144]	; (800c3f4 <TIM_Base_SetConfig+0x138>)
 800c362:	4293      	cmp	r3, r2
 800c364:	d003      	beq.n	800c36e <TIM_Base_SetConfig+0xb2>
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	4a23      	ldr	r2, [pc, #140]	; (800c3f8 <TIM_Base_SetConfig+0x13c>)
 800c36a:	4293      	cmp	r3, r2
 800c36c:	d108      	bne.n	800c380 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c374:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c376:	683b      	ldr	r3, [r7, #0]
 800c378:	68db      	ldr	r3, [r3, #12]
 800c37a:	68fa      	ldr	r2, [r7, #12]
 800c37c:	4313      	orrs	r3, r2
 800c37e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c386:	683b      	ldr	r3, [r7, #0]
 800c388:	695b      	ldr	r3, [r3, #20]
 800c38a:	4313      	orrs	r3, r2
 800c38c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	68fa      	ldr	r2, [r7, #12]
 800c392:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c394:	683b      	ldr	r3, [r7, #0]
 800c396:	689a      	ldr	r2, [r3, #8]
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c39c:	683b      	ldr	r3, [r7, #0]
 800c39e:	681a      	ldr	r2, [r3, #0]
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	4a0a      	ldr	r2, [pc, #40]	; (800c3d0 <TIM_Base_SetConfig+0x114>)
 800c3a8:	4293      	cmp	r3, r2
 800c3aa:	d003      	beq.n	800c3b4 <TIM_Base_SetConfig+0xf8>
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	4a0c      	ldr	r2, [pc, #48]	; (800c3e0 <TIM_Base_SetConfig+0x124>)
 800c3b0:	4293      	cmp	r3, r2
 800c3b2:	d103      	bne.n	800c3bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c3b4:	683b      	ldr	r3, [r7, #0]
 800c3b6:	691a      	ldr	r2, [r3, #16]
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	2201      	movs	r2, #1
 800c3c0:	615a      	str	r2, [r3, #20]
}
 800c3c2:	bf00      	nop
 800c3c4:	3714      	adds	r7, #20
 800c3c6:	46bd      	mov	sp, r7
 800c3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3cc:	4770      	bx	lr
 800c3ce:	bf00      	nop
 800c3d0:	40010000 	.word	0x40010000
 800c3d4:	40000400 	.word	0x40000400
 800c3d8:	40000800 	.word	0x40000800
 800c3dc:	40000c00 	.word	0x40000c00
 800c3e0:	40010400 	.word	0x40010400
 800c3e4:	40014000 	.word	0x40014000
 800c3e8:	40014400 	.word	0x40014400
 800c3ec:	40014800 	.word	0x40014800
 800c3f0:	40001800 	.word	0x40001800
 800c3f4:	40001c00 	.word	0x40001c00
 800c3f8:	40002000 	.word	0x40002000

0800c3fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c3fc:	b480      	push	{r7}
 800c3fe:	b087      	sub	sp, #28
 800c400:	af00      	add	r7, sp, #0
 800c402:	6078      	str	r0, [r7, #4]
 800c404:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	6a1b      	ldr	r3, [r3, #32]
 800c40a:	f023 0201 	bic.w	r2, r3, #1
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	6a1b      	ldr	r3, [r3, #32]
 800c416:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	685b      	ldr	r3, [r3, #4]
 800c41c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	699b      	ldr	r3, [r3, #24]
 800c422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c42a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	f023 0303 	bic.w	r3, r3, #3
 800c432:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c434:	683b      	ldr	r3, [r7, #0]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	68fa      	ldr	r2, [r7, #12]
 800c43a:	4313      	orrs	r3, r2
 800c43c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c43e:	697b      	ldr	r3, [r7, #20]
 800c440:	f023 0302 	bic.w	r3, r3, #2
 800c444:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c446:	683b      	ldr	r3, [r7, #0]
 800c448:	689b      	ldr	r3, [r3, #8]
 800c44a:	697a      	ldr	r2, [r7, #20]
 800c44c:	4313      	orrs	r3, r2
 800c44e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	4a20      	ldr	r2, [pc, #128]	; (800c4d4 <TIM_OC1_SetConfig+0xd8>)
 800c454:	4293      	cmp	r3, r2
 800c456:	d003      	beq.n	800c460 <TIM_OC1_SetConfig+0x64>
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	4a1f      	ldr	r2, [pc, #124]	; (800c4d8 <TIM_OC1_SetConfig+0xdc>)
 800c45c:	4293      	cmp	r3, r2
 800c45e:	d10c      	bne.n	800c47a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c460:	697b      	ldr	r3, [r7, #20]
 800c462:	f023 0308 	bic.w	r3, r3, #8
 800c466:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c468:	683b      	ldr	r3, [r7, #0]
 800c46a:	68db      	ldr	r3, [r3, #12]
 800c46c:	697a      	ldr	r2, [r7, #20]
 800c46e:	4313      	orrs	r3, r2
 800c470:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c472:	697b      	ldr	r3, [r7, #20]
 800c474:	f023 0304 	bic.w	r3, r3, #4
 800c478:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	4a15      	ldr	r2, [pc, #84]	; (800c4d4 <TIM_OC1_SetConfig+0xd8>)
 800c47e:	4293      	cmp	r3, r2
 800c480:	d003      	beq.n	800c48a <TIM_OC1_SetConfig+0x8e>
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	4a14      	ldr	r2, [pc, #80]	; (800c4d8 <TIM_OC1_SetConfig+0xdc>)
 800c486:	4293      	cmp	r3, r2
 800c488:	d111      	bne.n	800c4ae <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c48a:	693b      	ldr	r3, [r7, #16]
 800c48c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c490:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c492:	693b      	ldr	r3, [r7, #16]
 800c494:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c498:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c49a:	683b      	ldr	r3, [r7, #0]
 800c49c:	695b      	ldr	r3, [r3, #20]
 800c49e:	693a      	ldr	r2, [r7, #16]
 800c4a0:	4313      	orrs	r3, r2
 800c4a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c4a4:	683b      	ldr	r3, [r7, #0]
 800c4a6:	699b      	ldr	r3, [r3, #24]
 800c4a8:	693a      	ldr	r2, [r7, #16]
 800c4aa:	4313      	orrs	r3, r2
 800c4ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	693a      	ldr	r2, [r7, #16]
 800c4b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	68fa      	ldr	r2, [r7, #12]
 800c4b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c4ba:	683b      	ldr	r3, [r7, #0]
 800c4bc:	685a      	ldr	r2, [r3, #4]
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	697a      	ldr	r2, [r7, #20]
 800c4c6:	621a      	str	r2, [r3, #32]
}
 800c4c8:	bf00      	nop
 800c4ca:	371c      	adds	r7, #28
 800c4cc:	46bd      	mov	sp, r7
 800c4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d2:	4770      	bx	lr
 800c4d4:	40010000 	.word	0x40010000
 800c4d8:	40010400 	.word	0x40010400

0800c4dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c4dc:	b480      	push	{r7}
 800c4de:	b087      	sub	sp, #28
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
 800c4e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	6a1b      	ldr	r3, [r3, #32]
 800c4ea:	f023 0210 	bic.w	r2, r3, #16
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	6a1b      	ldr	r3, [r3, #32]
 800c4f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	685b      	ldr	r3, [r3, #4]
 800c4fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	699b      	ldr	r3, [r3, #24]
 800c502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c50a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c512:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c514:	683b      	ldr	r3, [r7, #0]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	021b      	lsls	r3, r3, #8
 800c51a:	68fa      	ldr	r2, [r7, #12]
 800c51c:	4313      	orrs	r3, r2
 800c51e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c520:	697b      	ldr	r3, [r7, #20]
 800c522:	f023 0320 	bic.w	r3, r3, #32
 800c526:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c528:	683b      	ldr	r3, [r7, #0]
 800c52a:	689b      	ldr	r3, [r3, #8]
 800c52c:	011b      	lsls	r3, r3, #4
 800c52e:	697a      	ldr	r2, [r7, #20]
 800c530:	4313      	orrs	r3, r2
 800c532:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	4a22      	ldr	r2, [pc, #136]	; (800c5c0 <TIM_OC2_SetConfig+0xe4>)
 800c538:	4293      	cmp	r3, r2
 800c53a:	d003      	beq.n	800c544 <TIM_OC2_SetConfig+0x68>
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	4a21      	ldr	r2, [pc, #132]	; (800c5c4 <TIM_OC2_SetConfig+0xe8>)
 800c540:	4293      	cmp	r3, r2
 800c542:	d10d      	bne.n	800c560 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c544:	697b      	ldr	r3, [r7, #20]
 800c546:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c54a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c54c:	683b      	ldr	r3, [r7, #0]
 800c54e:	68db      	ldr	r3, [r3, #12]
 800c550:	011b      	lsls	r3, r3, #4
 800c552:	697a      	ldr	r2, [r7, #20]
 800c554:	4313      	orrs	r3, r2
 800c556:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c558:	697b      	ldr	r3, [r7, #20]
 800c55a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c55e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	4a17      	ldr	r2, [pc, #92]	; (800c5c0 <TIM_OC2_SetConfig+0xe4>)
 800c564:	4293      	cmp	r3, r2
 800c566:	d003      	beq.n	800c570 <TIM_OC2_SetConfig+0x94>
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	4a16      	ldr	r2, [pc, #88]	; (800c5c4 <TIM_OC2_SetConfig+0xe8>)
 800c56c:	4293      	cmp	r3, r2
 800c56e:	d113      	bne.n	800c598 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c570:	693b      	ldr	r3, [r7, #16]
 800c572:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c576:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c578:	693b      	ldr	r3, [r7, #16]
 800c57a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c57e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c580:	683b      	ldr	r3, [r7, #0]
 800c582:	695b      	ldr	r3, [r3, #20]
 800c584:	009b      	lsls	r3, r3, #2
 800c586:	693a      	ldr	r2, [r7, #16]
 800c588:	4313      	orrs	r3, r2
 800c58a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c58c:	683b      	ldr	r3, [r7, #0]
 800c58e:	699b      	ldr	r3, [r3, #24]
 800c590:	009b      	lsls	r3, r3, #2
 800c592:	693a      	ldr	r2, [r7, #16]
 800c594:	4313      	orrs	r3, r2
 800c596:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	693a      	ldr	r2, [r7, #16]
 800c59c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	68fa      	ldr	r2, [r7, #12]
 800c5a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c5a4:	683b      	ldr	r3, [r7, #0]
 800c5a6:	685a      	ldr	r2, [r3, #4]
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	697a      	ldr	r2, [r7, #20]
 800c5b0:	621a      	str	r2, [r3, #32]
}
 800c5b2:	bf00      	nop
 800c5b4:	371c      	adds	r7, #28
 800c5b6:	46bd      	mov	sp, r7
 800c5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5bc:	4770      	bx	lr
 800c5be:	bf00      	nop
 800c5c0:	40010000 	.word	0x40010000
 800c5c4:	40010400 	.word	0x40010400

0800c5c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c5c8:	b480      	push	{r7}
 800c5ca:	b087      	sub	sp, #28
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	6078      	str	r0, [r7, #4]
 800c5d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	6a1b      	ldr	r3, [r3, #32]
 800c5d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	6a1b      	ldr	r3, [r3, #32]
 800c5e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	685b      	ldr	r3, [r3, #4]
 800c5e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	69db      	ldr	r3, [r3, #28]
 800c5ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c5f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	f023 0303 	bic.w	r3, r3, #3
 800c5fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c600:	683b      	ldr	r3, [r7, #0]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	68fa      	ldr	r2, [r7, #12]
 800c606:	4313      	orrs	r3, r2
 800c608:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c60a:	697b      	ldr	r3, [r7, #20]
 800c60c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c610:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c612:	683b      	ldr	r3, [r7, #0]
 800c614:	689b      	ldr	r3, [r3, #8]
 800c616:	021b      	lsls	r3, r3, #8
 800c618:	697a      	ldr	r2, [r7, #20]
 800c61a:	4313      	orrs	r3, r2
 800c61c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	4a21      	ldr	r2, [pc, #132]	; (800c6a8 <TIM_OC3_SetConfig+0xe0>)
 800c622:	4293      	cmp	r3, r2
 800c624:	d003      	beq.n	800c62e <TIM_OC3_SetConfig+0x66>
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	4a20      	ldr	r2, [pc, #128]	; (800c6ac <TIM_OC3_SetConfig+0xe4>)
 800c62a:	4293      	cmp	r3, r2
 800c62c:	d10d      	bne.n	800c64a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c62e:	697b      	ldr	r3, [r7, #20]
 800c630:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c634:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c636:	683b      	ldr	r3, [r7, #0]
 800c638:	68db      	ldr	r3, [r3, #12]
 800c63a:	021b      	lsls	r3, r3, #8
 800c63c:	697a      	ldr	r2, [r7, #20]
 800c63e:	4313      	orrs	r3, r2
 800c640:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c642:	697b      	ldr	r3, [r7, #20]
 800c644:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c648:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	4a16      	ldr	r2, [pc, #88]	; (800c6a8 <TIM_OC3_SetConfig+0xe0>)
 800c64e:	4293      	cmp	r3, r2
 800c650:	d003      	beq.n	800c65a <TIM_OC3_SetConfig+0x92>
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	4a15      	ldr	r2, [pc, #84]	; (800c6ac <TIM_OC3_SetConfig+0xe4>)
 800c656:	4293      	cmp	r3, r2
 800c658:	d113      	bne.n	800c682 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c65a:	693b      	ldr	r3, [r7, #16]
 800c65c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c660:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c662:	693b      	ldr	r3, [r7, #16]
 800c664:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c668:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c66a:	683b      	ldr	r3, [r7, #0]
 800c66c:	695b      	ldr	r3, [r3, #20]
 800c66e:	011b      	lsls	r3, r3, #4
 800c670:	693a      	ldr	r2, [r7, #16]
 800c672:	4313      	orrs	r3, r2
 800c674:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c676:	683b      	ldr	r3, [r7, #0]
 800c678:	699b      	ldr	r3, [r3, #24]
 800c67a:	011b      	lsls	r3, r3, #4
 800c67c:	693a      	ldr	r2, [r7, #16]
 800c67e:	4313      	orrs	r3, r2
 800c680:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	693a      	ldr	r2, [r7, #16]
 800c686:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	68fa      	ldr	r2, [r7, #12]
 800c68c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c68e:	683b      	ldr	r3, [r7, #0]
 800c690:	685a      	ldr	r2, [r3, #4]
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	697a      	ldr	r2, [r7, #20]
 800c69a:	621a      	str	r2, [r3, #32]
}
 800c69c:	bf00      	nop
 800c69e:	371c      	adds	r7, #28
 800c6a0:	46bd      	mov	sp, r7
 800c6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a6:	4770      	bx	lr
 800c6a8:	40010000 	.word	0x40010000
 800c6ac:	40010400 	.word	0x40010400

0800c6b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c6b0:	b480      	push	{r7}
 800c6b2:	b087      	sub	sp, #28
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	6078      	str	r0, [r7, #4]
 800c6b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	6a1b      	ldr	r3, [r3, #32]
 800c6be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	6a1b      	ldr	r3, [r3, #32]
 800c6ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	685b      	ldr	r3, [r3, #4]
 800c6d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	69db      	ldr	r3, [r3, #28]
 800c6d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c6de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c6e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c6e8:	683b      	ldr	r3, [r7, #0]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	021b      	lsls	r3, r3, #8
 800c6ee:	68fa      	ldr	r2, [r7, #12]
 800c6f0:	4313      	orrs	r3, r2
 800c6f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c6f4:	693b      	ldr	r3, [r7, #16]
 800c6f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c6fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c6fc:	683b      	ldr	r3, [r7, #0]
 800c6fe:	689b      	ldr	r3, [r3, #8]
 800c700:	031b      	lsls	r3, r3, #12
 800c702:	693a      	ldr	r2, [r7, #16]
 800c704:	4313      	orrs	r3, r2
 800c706:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	4a12      	ldr	r2, [pc, #72]	; (800c754 <TIM_OC4_SetConfig+0xa4>)
 800c70c:	4293      	cmp	r3, r2
 800c70e:	d003      	beq.n	800c718 <TIM_OC4_SetConfig+0x68>
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	4a11      	ldr	r2, [pc, #68]	; (800c758 <TIM_OC4_SetConfig+0xa8>)
 800c714:	4293      	cmp	r3, r2
 800c716:	d109      	bne.n	800c72c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c718:	697b      	ldr	r3, [r7, #20]
 800c71a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c71e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c720:	683b      	ldr	r3, [r7, #0]
 800c722:	695b      	ldr	r3, [r3, #20]
 800c724:	019b      	lsls	r3, r3, #6
 800c726:	697a      	ldr	r2, [r7, #20]
 800c728:	4313      	orrs	r3, r2
 800c72a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	697a      	ldr	r2, [r7, #20]
 800c730:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	68fa      	ldr	r2, [r7, #12]
 800c736:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c738:	683b      	ldr	r3, [r7, #0]
 800c73a:	685a      	ldr	r2, [r3, #4]
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	693a      	ldr	r2, [r7, #16]
 800c744:	621a      	str	r2, [r3, #32]
}
 800c746:	bf00      	nop
 800c748:	371c      	adds	r7, #28
 800c74a:	46bd      	mov	sp, r7
 800c74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c750:	4770      	bx	lr
 800c752:	bf00      	nop
 800c754:	40010000 	.word	0x40010000
 800c758:	40010400 	.word	0x40010400

0800c75c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c75c:	b480      	push	{r7}
 800c75e:	b087      	sub	sp, #28
 800c760:	af00      	add	r7, sp, #0
 800c762:	60f8      	str	r0, [r7, #12]
 800c764:	60b9      	str	r1, [r7, #8]
 800c766:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	6a1b      	ldr	r3, [r3, #32]
 800c76c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	6a1b      	ldr	r3, [r3, #32]
 800c772:	f023 0201 	bic.w	r2, r3, #1
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	699b      	ldr	r3, [r3, #24]
 800c77e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c780:	693b      	ldr	r3, [r7, #16]
 800c782:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c786:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	011b      	lsls	r3, r3, #4
 800c78c:	693a      	ldr	r2, [r7, #16]
 800c78e:	4313      	orrs	r3, r2
 800c790:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c792:	697b      	ldr	r3, [r7, #20]
 800c794:	f023 030a 	bic.w	r3, r3, #10
 800c798:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c79a:	697a      	ldr	r2, [r7, #20]
 800c79c:	68bb      	ldr	r3, [r7, #8]
 800c79e:	4313      	orrs	r3, r2
 800c7a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	693a      	ldr	r2, [r7, #16]
 800c7a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	697a      	ldr	r2, [r7, #20]
 800c7ac:	621a      	str	r2, [r3, #32]
}
 800c7ae:	bf00      	nop
 800c7b0:	371c      	adds	r7, #28
 800c7b2:	46bd      	mov	sp, r7
 800c7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b8:	4770      	bx	lr

0800c7ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c7ba:	b480      	push	{r7}
 800c7bc:	b087      	sub	sp, #28
 800c7be:	af00      	add	r7, sp, #0
 800c7c0:	60f8      	str	r0, [r7, #12]
 800c7c2:	60b9      	str	r1, [r7, #8]
 800c7c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	6a1b      	ldr	r3, [r3, #32]
 800c7ca:	f023 0210 	bic.w	r2, r3, #16
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	699b      	ldr	r3, [r3, #24]
 800c7d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	6a1b      	ldr	r3, [r3, #32]
 800c7dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c7de:	697b      	ldr	r3, [r7, #20]
 800c7e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c7e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	031b      	lsls	r3, r3, #12
 800c7ea:	697a      	ldr	r2, [r7, #20]
 800c7ec:	4313      	orrs	r3, r2
 800c7ee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c7f0:	693b      	ldr	r3, [r7, #16]
 800c7f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c7f6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c7f8:	68bb      	ldr	r3, [r7, #8]
 800c7fa:	011b      	lsls	r3, r3, #4
 800c7fc:	693a      	ldr	r2, [r7, #16]
 800c7fe:	4313      	orrs	r3, r2
 800c800:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	697a      	ldr	r2, [r7, #20]
 800c806:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	693a      	ldr	r2, [r7, #16]
 800c80c:	621a      	str	r2, [r3, #32]
}
 800c80e:	bf00      	nop
 800c810:	371c      	adds	r7, #28
 800c812:	46bd      	mov	sp, r7
 800c814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c818:	4770      	bx	lr

0800c81a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c81a:	b480      	push	{r7}
 800c81c:	b085      	sub	sp, #20
 800c81e:	af00      	add	r7, sp, #0
 800c820:	6078      	str	r0, [r7, #4]
 800c822:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	689b      	ldr	r3, [r3, #8]
 800c828:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c830:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c832:	683a      	ldr	r2, [r7, #0]
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	4313      	orrs	r3, r2
 800c838:	f043 0307 	orr.w	r3, r3, #7
 800c83c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	68fa      	ldr	r2, [r7, #12]
 800c842:	609a      	str	r2, [r3, #8]
}
 800c844:	bf00      	nop
 800c846:	3714      	adds	r7, #20
 800c848:	46bd      	mov	sp, r7
 800c84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c84e:	4770      	bx	lr

0800c850 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c850:	b480      	push	{r7}
 800c852:	b087      	sub	sp, #28
 800c854:	af00      	add	r7, sp, #0
 800c856:	60f8      	str	r0, [r7, #12]
 800c858:	60b9      	str	r1, [r7, #8]
 800c85a:	607a      	str	r2, [r7, #4]
 800c85c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	689b      	ldr	r3, [r3, #8]
 800c862:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c864:	697b      	ldr	r3, [r7, #20]
 800c866:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c86a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c86c:	683b      	ldr	r3, [r7, #0]
 800c86e:	021a      	lsls	r2, r3, #8
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	431a      	orrs	r2, r3
 800c874:	68bb      	ldr	r3, [r7, #8]
 800c876:	4313      	orrs	r3, r2
 800c878:	697a      	ldr	r2, [r7, #20]
 800c87a:	4313      	orrs	r3, r2
 800c87c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	697a      	ldr	r2, [r7, #20]
 800c882:	609a      	str	r2, [r3, #8]
}
 800c884:	bf00      	nop
 800c886:	371c      	adds	r7, #28
 800c888:	46bd      	mov	sp, r7
 800c88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c88e:	4770      	bx	lr

0800c890 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c890:	b480      	push	{r7}
 800c892:	b087      	sub	sp, #28
 800c894:	af00      	add	r7, sp, #0
 800c896:	60f8      	str	r0, [r7, #12]
 800c898:	60b9      	str	r1, [r7, #8]
 800c89a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c89c:	68bb      	ldr	r3, [r7, #8]
 800c89e:	f003 031f 	and.w	r3, r3, #31
 800c8a2:	2201      	movs	r2, #1
 800c8a4:	fa02 f303 	lsl.w	r3, r2, r3
 800c8a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	6a1a      	ldr	r2, [r3, #32]
 800c8ae:	697b      	ldr	r3, [r7, #20]
 800c8b0:	43db      	mvns	r3, r3
 800c8b2:	401a      	ands	r2, r3
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	6a1a      	ldr	r2, [r3, #32]
 800c8bc:	68bb      	ldr	r3, [r7, #8]
 800c8be:	f003 031f 	and.w	r3, r3, #31
 800c8c2:	6879      	ldr	r1, [r7, #4]
 800c8c4:	fa01 f303 	lsl.w	r3, r1, r3
 800c8c8:	431a      	orrs	r2, r3
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	621a      	str	r2, [r3, #32]
}
 800c8ce:	bf00      	nop
 800c8d0:	371c      	adds	r7, #28
 800c8d2:	46bd      	mov	sp, r7
 800c8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d8:	4770      	bx	lr
	...

0800c8dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c8dc:	b480      	push	{r7}
 800c8de:	b085      	sub	sp, #20
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	6078      	str	r0, [r7, #4]
 800c8e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c8ec:	2b01      	cmp	r3, #1
 800c8ee:	d101      	bne.n	800c8f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c8f0:	2302      	movs	r3, #2
 800c8f2:	e05a      	b.n	800c9aa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	2201      	movs	r2, #1
 800c8f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	2202      	movs	r2, #2
 800c900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	685b      	ldr	r3, [r3, #4]
 800c90a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	689b      	ldr	r3, [r3, #8]
 800c912:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c91a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c91c:	683b      	ldr	r3, [r7, #0]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	68fa      	ldr	r2, [r7, #12]
 800c922:	4313      	orrs	r3, r2
 800c924:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	68fa      	ldr	r2, [r7, #12]
 800c92c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	4a21      	ldr	r2, [pc, #132]	; (800c9b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800c934:	4293      	cmp	r3, r2
 800c936:	d022      	beq.n	800c97e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c940:	d01d      	beq.n	800c97e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	4a1d      	ldr	r2, [pc, #116]	; (800c9bc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800c948:	4293      	cmp	r3, r2
 800c94a:	d018      	beq.n	800c97e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	4a1b      	ldr	r2, [pc, #108]	; (800c9c0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800c952:	4293      	cmp	r3, r2
 800c954:	d013      	beq.n	800c97e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	4a1a      	ldr	r2, [pc, #104]	; (800c9c4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800c95c:	4293      	cmp	r3, r2
 800c95e:	d00e      	beq.n	800c97e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	4a18      	ldr	r2, [pc, #96]	; (800c9c8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800c966:	4293      	cmp	r3, r2
 800c968:	d009      	beq.n	800c97e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	4a17      	ldr	r2, [pc, #92]	; (800c9cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800c970:	4293      	cmp	r3, r2
 800c972:	d004      	beq.n	800c97e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	4a15      	ldr	r2, [pc, #84]	; (800c9d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800c97a:	4293      	cmp	r3, r2
 800c97c:	d10c      	bne.n	800c998 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c97e:	68bb      	ldr	r3, [r7, #8]
 800c980:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c984:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c986:	683b      	ldr	r3, [r7, #0]
 800c988:	685b      	ldr	r3, [r3, #4]
 800c98a:	68ba      	ldr	r2, [r7, #8]
 800c98c:	4313      	orrs	r3, r2
 800c98e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	68ba      	ldr	r2, [r7, #8]
 800c996:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	2201      	movs	r2, #1
 800c99c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	2200      	movs	r2, #0
 800c9a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c9a8:	2300      	movs	r3, #0
}
 800c9aa:	4618      	mov	r0, r3
 800c9ac:	3714      	adds	r7, #20
 800c9ae:	46bd      	mov	sp, r7
 800c9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b4:	4770      	bx	lr
 800c9b6:	bf00      	nop
 800c9b8:	40010000 	.word	0x40010000
 800c9bc:	40000400 	.word	0x40000400
 800c9c0:	40000800 	.word	0x40000800
 800c9c4:	40000c00 	.word	0x40000c00
 800c9c8:	40010400 	.word	0x40010400
 800c9cc:	40014000 	.word	0x40014000
 800c9d0:	40001800 	.word	0x40001800

0800c9d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c9d4:	b480      	push	{r7}
 800c9d6:	b083      	sub	sp, #12
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c9dc:	bf00      	nop
 800c9de:	370c      	adds	r7, #12
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e6:	4770      	bx	lr

0800c9e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c9e8:	b480      	push	{r7}
 800c9ea:	b083      	sub	sp, #12
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c9f0:	bf00      	nop
 800c9f2:	370c      	adds	r7, #12
 800c9f4:	46bd      	mov	sp, r7
 800c9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fa:	4770      	bx	lr

0800c9fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c9fc:	b580      	push	{r7, lr}
 800c9fe:	b082      	sub	sp, #8
 800ca00:	af00      	add	r7, sp, #0
 800ca02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d101      	bne.n	800ca0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ca0a:	2301      	movs	r3, #1
 800ca0c:	e03f      	b.n	800ca8e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ca14:	b2db      	uxtb	r3, r3
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d106      	bne.n	800ca28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	2200      	movs	r2, #0
 800ca1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ca22:	6878      	ldr	r0, [r7, #4]
 800ca24:	f7f6 fac0 	bl	8002fa8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	2224      	movs	r2, #36	; 0x24
 800ca2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	68da      	ldr	r2, [r3, #12]
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ca3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ca40:	6878      	ldr	r0, [r7, #4]
 800ca42:	f000 f905 	bl	800cc50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	691a      	ldr	r2, [r3, #16]
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ca54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	695a      	ldr	r2, [r3, #20]
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ca64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	68da      	ldr	r2, [r3, #12]
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ca74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	2200      	movs	r2, #0
 800ca7a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	2220      	movs	r2, #32
 800ca80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	2220      	movs	r2, #32
 800ca88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800ca8c:	2300      	movs	r3, #0
}
 800ca8e:	4618      	mov	r0, r3
 800ca90:	3708      	adds	r7, #8
 800ca92:	46bd      	mov	sp, r7
 800ca94:	bd80      	pop	{r7, pc}

0800ca96 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ca96:	b580      	push	{r7, lr}
 800ca98:	b08a      	sub	sp, #40	; 0x28
 800ca9a:	af02      	add	r7, sp, #8
 800ca9c:	60f8      	str	r0, [r7, #12]
 800ca9e:	60b9      	str	r1, [r7, #8]
 800caa0:	603b      	str	r3, [r7, #0]
 800caa2:	4613      	mov	r3, r2
 800caa4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800caa6:	2300      	movs	r3, #0
 800caa8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cab0:	b2db      	uxtb	r3, r3
 800cab2:	2b20      	cmp	r3, #32
 800cab4:	d17c      	bne.n	800cbb0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800cab6:	68bb      	ldr	r3, [r7, #8]
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d002      	beq.n	800cac2 <HAL_UART_Transmit+0x2c>
 800cabc:	88fb      	ldrh	r3, [r7, #6]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d101      	bne.n	800cac6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800cac2:	2301      	movs	r3, #1
 800cac4:	e075      	b.n	800cbb2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cacc:	2b01      	cmp	r3, #1
 800cace:	d101      	bne.n	800cad4 <HAL_UART_Transmit+0x3e>
 800cad0:	2302      	movs	r3, #2
 800cad2:	e06e      	b.n	800cbb2 <HAL_UART_Transmit+0x11c>
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	2201      	movs	r2, #1
 800cad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	2200      	movs	r2, #0
 800cae0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	2221      	movs	r2, #33	; 0x21
 800cae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800caea:	f7fc fbb5 	bl	8009258 <HAL_GetTick>
 800caee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	88fa      	ldrh	r2, [r7, #6]
 800caf4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	88fa      	ldrh	r2, [r7, #6]
 800cafa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	689b      	ldr	r3, [r3, #8]
 800cb00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cb04:	d108      	bne.n	800cb18 <HAL_UART_Transmit+0x82>
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	691b      	ldr	r3, [r3, #16]
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d104      	bne.n	800cb18 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800cb0e:	2300      	movs	r3, #0
 800cb10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800cb12:	68bb      	ldr	r3, [r7, #8]
 800cb14:	61bb      	str	r3, [r7, #24]
 800cb16:	e003      	b.n	800cb20 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800cb18:	68bb      	ldr	r3, [r7, #8]
 800cb1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	2200      	movs	r2, #0
 800cb24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800cb28:	e02a      	b.n	800cb80 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800cb2a:	683b      	ldr	r3, [r7, #0]
 800cb2c:	9300      	str	r3, [sp, #0]
 800cb2e:	697b      	ldr	r3, [r7, #20]
 800cb30:	2200      	movs	r2, #0
 800cb32:	2180      	movs	r1, #128	; 0x80
 800cb34:	68f8      	ldr	r0, [r7, #12]
 800cb36:	f000 f840 	bl	800cbba <UART_WaitOnFlagUntilTimeout>
 800cb3a:	4603      	mov	r3, r0
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d001      	beq.n	800cb44 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800cb40:	2303      	movs	r3, #3
 800cb42:	e036      	b.n	800cbb2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800cb44:	69fb      	ldr	r3, [r7, #28]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d10b      	bne.n	800cb62 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800cb4a:	69bb      	ldr	r3, [r7, #24]
 800cb4c:	881b      	ldrh	r3, [r3, #0]
 800cb4e:	461a      	mov	r2, r3
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cb58:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800cb5a:	69bb      	ldr	r3, [r7, #24]
 800cb5c:	3302      	adds	r3, #2
 800cb5e:	61bb      	str	r3, [r7, #24]
 800cb60:	e007      	b.n	800cb72 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800cb62:	69fb      	ldr	r3, [r7, #28]
 800cb64:	781a      	ldrb	r2, [r3, #0]
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800cb6c:	69fb      	ldr	r3, [r7, #28]
 800cb6e:	3301      	adds	r3, #1
 800cb70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800cb76:	b29b      	uxth	r3, r3
 800cb78:	3b01      	subs	r3, #1
 800cb7a:	b29a      	uxth	r2, r3
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800cb84:	b29b      	uxth	r3, r3
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d1cf      	bne.n	800cb2a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800cb8a:	683b      	ldr	r3, [r7, #0]
 800cb8c:	9300      	str	r3, [sp, #0]
 800cb8e:	697b      	ldr	r3, [r7, #20]
 800cb90:	2200      	movs	r2, #0
 800cb92:	2140      	movs	r1, #64	; 0x40
 800cb94:	68f8      	ldr	r0, [r7, #12]
 800cb96:	f000 f810 	bl	800cbba <UART_WaitOnFlagUntilTimeout>
 800cb9a:	4603      	mov	r3, r0
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d001      	beq.n	800cba4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800cba0:	2303      	movs	r3, #3
 800cba2:	e006      	b.n	800cbb2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	2220      	movs	r2, #32
 800cba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800cbac:	2300      	movs	r3, #0
 800cbae:	e000      	b.n	800cbb2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800cbb0:	2302      	movs	r3, #2
  }
}
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	3720      	adds	r7, #32
 800cbb6:	46bd      	mov	sp, r7
 800cbb8:	bd80      	pop	{r7, pc}

0800cbba <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800cbba:	b580      	push	{r7, lr}
 800cbbc:	b084      	sub	sp, #16
 800cbbe:	af00      	add	r7, sp, #0
 800cbc0:	60f8      	str	r0, [r7, #12]
 800cbc2:	60b9      	str	r1, [r7, #8]
 800cbc4:	603b      	str	r3, [r7, #0]
 800cbc6:	4613      	mov	r3, r2
 800cbc8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cbca:	e02c      	b.n	800cc26 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cbcc:	69bb      	ldr	r3, [r7, #24]
 800cbce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbd2:	d028      	beq.n	800cc26 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800cbd4:	69bb      	ldr	r3, [r7, #24]
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d007      	beq.n	800cbea <UART_WaitOnFlagUntilTimeout+0x30>
 800cbda:	f7fc fb3d 	bl	8009258 <HAL_GetTick>
 800cbde:	4602      	mov	r2, r0
 800cbe0:	683b      	ldr	r3, [r7, #0]
 800cbe2:	1ad3      	subs	r3, r2, r3
 800cbe4:	69ba      	ldr	r2, [r7, #24]
 800cbe6:	429a      	cmp	r2, r3
 800cbe8:	d21d      	bcs.n	800cc26 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	68da      	ldr	r2, [r3, #12]
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800cbf8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	695a      	ldr	r2, [r3, #20]
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	f022 0201 	bic.w	r2, r2, #1
 800cc08:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	2220      	movs	r2, #32
 800cc0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	2220      	movs	r2, #32
 800cc16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	2200      	movs	r2, #0
 800cc1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800cc22:	2303      	movs	r3, #3
 800cc24:	e00f      	b.n	800cc46 <UART_WaitOnFlagUntilTimeout+0x8c>
while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	681a      	ldr	r2, [r3, #0]
 800cc2c:	68bb      	ldr	r3, [r7, #8]
 800cc2e:	4013      	ands	r3, r2
 800cc30:	68ba      	ldr	r2, [r7, #8]
 800cc32:	429a      	cmp	r2, r3
 800cc34:	bf0c      	ite	eq
 800cc36:	2301      	moveq	r3, #1
 800cc38:	2300      	movne	r3, #0
 800cc3a:	b2db      	uxtb	r3, r3
 800cc3c:	461a      	mov	r2, r3
 800cc3e:	79fb      	ldrb	r3, [r7, #7]
 800cc40:	429a      	cmp	r2, r3
 800cc42:	d0c3      	beq.n	800cbcc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800cc44:	2300      	movs	r3, #0
}
 800cc46:	4618      	mov	r0, r3
 800cc48:	3710      	adds	r7, #16
 800cc4a:	46bd      	mov	sp, r7
 800cc4c:	bd80      	pop	{r7, pc}
	...

0800cc50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cc50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc54:	b09f      	sub	sp, #124	; 0x7c
 800cc56:	af00      	add	r7, sp, #0
 800cc58:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cc5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	691b      	ldr	r3, [r3, #16]
 800cc60:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800cc64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc66:	68d9      	ldr	r1, [r3, #12]
 800cc68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc6a:	681a      	ldr	r2, [r3, #0]
 800cc6c:	ea40 0301 	orr.w	r3, r0, r1
 800cc70:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800cc72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc74:	689a      	ldr	r2, [r3, #8]
 800cc76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc78:	691b      	ldr	r3, [r3, #16]
 800cc7a:	431a      	orrs	r2, r3
 800cc7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc7e:	695b      	ldr	r3, [r3, #20]
 800cc80:	431a      	orrs	r2, r3
 800cc82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc84:	69db      	ldr	r3, [r3, #28]
 800cc86:	4313      	orrs	r3, r2
 800cc88:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800cc8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	68db      	ldr	r3, [r3, #12]
 800cc90:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800cc94:	f021 010c 	bic.w	r1, r1, #12
 800cc98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc9a:	681a      	ldr	r2, [r3, #0]
 800cc9c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cc9e:	430b      	orrs	r3, r1
 800cca0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800cca2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	695b      	ldr	r3, [r3, #20]
 800cca8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800ccac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ccae:	6999      	ldr	r1, [r3, #24]
 800ccb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ccb2:	681a      	ldr	r2, [r3, #0]
 800ccb4:	ea40 0301 	orr.w	r3, r0, r1
 800ccb8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ccba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ccbc:	681a      	ldr	r2, [r3, #0]
 800ccbe:	4bc5      	ldr	r3, [pc, #788]	; (800cfd4 <UART_SetConfig+0x384>)
 800ccc0:	429a      	cmp	r2, r3
 800ccc2:	d004      	beq.n	800ccce <UART_SetConfig+0x7e>
 800ccc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ccc6:	681a      	ldr	r2, [r3, #0]
 800ccc8:	4bc3      	ldr	r3, [pc, #780]	; (800cfd8 <UART_SetConfig+0x388>)
 800ccca:	429a      	cmp	r2, r3
 800cccc:	d103      	bne.n	800ccd6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ccce:	f7fd fcf3 	bl	800a6b8 <HAL_RCC_GetPCLK2Freq>
 800ccd2:	6778      	str	r0, [r7, #116]	; 0x74
 800ccd4:	e002      	b.n	800ccdc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ccd6:	f7fd fcdb 	bl	800a690 <HAL_RCC_GetPCLK1Freq>
 800ccda:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ccdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ccde:	69db      	ldr	r3, [r3, #28]
 800cce0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cce4:	f040 80b6 	bne.w	800ce54 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800cce8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ccea:	461c      	mov	r4, r3
 800ccec:	f04f 0500 	mov.w	r5, #0
 800ccf0:	4622      	mov	r2, r4
 800ccf2:	462b      	mov	r3, r5
 800ccf4:	1891      	adds	r1, r2, r2
 800ccf6:	6439      	str	r1, [r7, #64]	; 0x40
 800ccf8:	415b      	adcs	r3, r3
 800ccfa:	647b      	str	r3, [r7, #68]	; 0x44
 800ccfc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800cd00:	1912      	adds	r2, r2, r4
 800cd02:	eb45 0303 	adc.w	r3, r5, r3
 800cd06:	f04f 0000 	mov.w	r0, #0
 800cd0a:	f04f 0100 	mov.w	r1, #0
 800cd0e:	00d9      	lsls	r1, r3, #3
 800cd10:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800cd14:	00d0      	lsls	r0, r2, #3
 800cd16:	4602      	mov	r2, r0
 800cd18:	460b      	mov	r3, r1
 800cd1a:	1911      	adds	r1, r2, r4
 800cd1c:	6639      	str	r1, [r7, #96]	; 0x60
 800cd1e:	416b      	adcs	r3, r5
 800cd20:	667b      	str	r3, [r7, #100]	; 0x64
 800cd22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cd24:	685b      	ldr	r3, [r3, #4]
 800cd26:	461a      	mov	r2, r3
 800cd28:	f04f 0300 	mov.w	r3, #0
 800cd2c:	1891      	adds	r1, r2, r2
 800cd2e:	63b9      	str	r1, [r7, #56]	; 0x38
 800cd30:	415b      	adcs	r3, r3
 800cd32:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cd34:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800cd38:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800cd3c:	f7f3 ff9c 	bl	8000c78 <__aeabi_uldivmod>
 800cd40:	4602      	mov	r2, r0
 800cd42:	460b      	mov	r3, r1
 800cd44:	4ba5      	ldr	r3, [pc, #660]	; (800cfdc <UART_SetConfig+0x38c>)
 800cd46:	fba3 2302 	umull	r2, r3, r3, r2
 800cd4a:	095b      	lsrs	r3, r3, #5
 800cd4c:	011e      	lsls	r6, r3, #4
 800cd4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cd50:	461c      	mov	r4, r3
 800cd52:	f04f 0500 	mov.w	r5, #0
 800cd56:	4622      	mov	r2, r4
 800cd58:	462b      	mov	r3, r5
 800cd5a:	1891      	adds	r1, r2, r2
 800cd5c:	6339      	str	r1, [r7, #48]	; 0x30
 800cd5e:	415b      	adcs	r3, r3
 800cd60:	637b      	str	r3, [r7, #52]	; 0x34
 800cd62:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800cd66:	1912      	adds	r2, r2, r4
 800cd68:	eb45 0303 	adc.w	r3, r5, r3
 800cd6c:	f04f 0000 	mov.w	r0, #0
 800cd70:	f04f 0100 	mov.w	r1, #0
 800cd74:	00d9      	lsls	r1, r3, #3
 800cd76:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800cd7a:	00d0      	lsls	r0, r2, #3
 800cd7c:	4602      	mov	r2, r0
 800cd7e:	460b      	mov	r3, r1
 800cd80:	1911      	adds	r1, r2, r4
 800cd82:	65b9      	str	r1, [r7, #88]	; 0x58
 800cd84:	416b      	adcs	r3, r5
 800cd86:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cd88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cd8a:	685b      	ldr	r3, [r3, #4]
 800cd8c:	461a      	mov	r2, r3
 800cd8e:	f04f 0300 	mov.w	r3, #0
 800cd92:	1891      	adds	r1, r2, r2
 800cd94:	62b9      	str	r1, [r7, #40]	; 0x28
 800cd96:	415b      	adcs	r3, r3
 800cd98:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cd9a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800cd9e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800cda2:	f7f3 ff69 	bl	8000c78 <__aeabi_uldivmod>
 800cda6:	4602      	mov	r2, r0
 800cda8:	460b      	mov	r3, r1
 800cdaa:	4b8c      	ldr	r3, [pc, #560]	; (800cfdc <UART_SetConfig+0x38c>)
 800cdac:	fba3 1302 	umull	r1, r3, r3, r2
 800cdb0:	095b      	lsrs	r3, r3, #5
 800cdb2:	2164      	movs	r1, #100	; 0x64
 800cdb4:	fb01 f303 	mul.w	r3, r1, r3
 800cdb8:	1ad3      	subs	r3, r2, r3
 800cdba:	00db      	lsls	r3, r3, #3
 800cdbc:	3332      	adds	r3, #50	; 0x32
 800cdbe:	4a87      	ldr	r2, [pc, #540]	; (800cfdc <UART_SetConfig+0x38c>)
 800cdc0:	fba2 2303 	umull	r2, r3, r2, r3
 800cdc4:	095b      	lsrs	r3, r3, #5
 800cdc6:	005b      	lsls	r3, r3, #1
 800cdc8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800cdcc:	441e      	add	r6, r3
 800cdce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cdd0:	4618      	mov	r0, r3
 800cdd2:	f04f 0100 	mov.w	r1, #0
 800cdd6:	4602      	mov	r2, r0
 800cdd8:	460b      	mov	r3, r1
 800cdda:	1894      	adds	r4, r2, r2
 800cddc:	623c      	str	r4, [r7, #32]
 800cdde:	415b      	adcs	r3, r3
 800cde0:	627b      	str	r3, [r7, #36]	; 0x24
 800cde2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800cde6:	1812      	adds	r2, r2, r0
 800cde8:	eb41 0303 	adc.w	r3, r1, r3
 800cdec:	f04f 0400 	mov.w	r4, #0
 800cdf0:	f04f 0500 	mov.w	r5, #0
 800cdf4:	00dd      	lsls	r5, r3, #3
 800cdf6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800cdfa:	00d4      	lsls	r4, r2, #3
 800cdfc:	4622      	mov	r2, r4
 800cdfe:	462b      	mov	r3, r5
 800ce00:	1814      	adds	r4, r2, r0
 800ce02:	653c      	str	r4, [r7, #80]	; 0x50
 800ce04:	414b      	adcs	r3, r1
 800ce06:	657b      	str	r3, [r7, #84]	; 0x54
 800ce08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ce0a:	685b      	ldr	r3, [r3, #4]
 800ce0c:	461a      	mov	r2, r3
 800ce0e:	f04f 0300 	mov.w	r3, #0
 800ce12:	1891      	adds	r1, r2, r2
 800ce14:	61b9      	str	r1, [r7, #24]
 800ce16:	415b      	adcs	r3, r3
 800ce18:	61fb      	str	r3, [r7, #28]
 800ce1a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ce1e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800ce22:	f7f3 ff29 	bl	8000c78 <__aeabi_uldivmod>
 800ce26:	4602      	mov	r2, r0
 800ce28:	460b      	mov	r3, r1
 800ce2a:	4b6c      	ldr	r3, [pc, #432]	; (800cfdc <UART_SetConfig+0x38c>)
 800ce2c:	fba3 1302 	umull	r1, r3, r3, r2
 800ce30:	095b      	lsrs	r3, r3, #5
 800ce32:	2164      	movs	r1, #100	; 0x64
 800ce34:	fb01 f303 	mul.w	r3, r1, r3
 800ce38:	1ad3      	subs	r3, r2, r3
 800ce3a:	00db      	lsls	r3, r3, #3
 800ce3c:	3332      	adds	r3, #50	; 0x32
 800ce3e:	4a67      	ldr	r2, [pc, #412]	; (800cfdc <UART_SetConfig+0x38c>)
 800ce40:	fba2 2303 	umull	r2, r3, r2, r3
 800ce44:	095b      	lsrs	r3, r3, #5
 800ce46:	f003 0207 	and.w	r2, r3, #7
 800ce4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	4432      	add	r2, r6
 800ce50:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800ce52:	e0b9      	b.n	800cfc8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ce54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ce56:	461c      	mov	r4, r3
 800ce58:	f04f 0500 	mov.w	r5, #0
 800ce5c:	4622      	mov	r2, r4
 800ce5e:	462b      	mov	r3, r5
 800ce60:	1891      	adds	r1, r2, r2
 800ce62:	6139      	str	r1, [r7, #16]
 800ce64:	415b      	adcs	r3, r3
 800ce66:	617b      	str	r3, [r7, #20]
 800ce68:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ce6c:	1912      	adds	r2, r2, r4
 800ce6e:	eb45 0303 	adc.w	r3, r5, r3
 800ce72:	f04f 0000 	mov.w	r0, #0
 800ce76:	f04f 0100 	mov.w	r1, #0
 800ce7a:	00d9      	lsls	r1, r3, #3
 800ce7c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ce80:	00d0      	lsls	r0, r2, #3
 800ce82:	4602      	mov	r2, r0
 800ce84:	460b      	mov	r3, r1
 800ce86:	eb12 0804 	adds.w	r8, r2, r4
 800ce8a:	eb43 0905 	adc.w	r9, r3, r5
 800ce8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ce90:	685b      	ldr	r3, [r3, #4]
 800ce92:	4618      	mov	r0, r3
 800ce94:	f04f 0100 	mov.w	r1, #0
 800ce98:	f04f 0200 	mov.w	r2, #0
 800ce9c:	f04f 0300 	mov.w	r3, #0
 800cea0:	008b      	lsls	r3, r1, #2
 800cea2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800cea6:	0082      	lsls	r2, r0, #2
 800cea8:	4640      	mov	r0, r8
 800ceaa:	4649      	mov	r1, r9
 800ceac:	f7f3 fee4 	bl	8000c78 <__aeabi_uldivmod>
 800ceb0:	4602      	mov	r2, r0
 800ceb2:	460b      	mov	r3, r1
 800ceb4:	4b49      	ldr	r3, [pc, #292]	; (800cfdc <UART_SetConfig+0x38c>)
 800ceb6:	fba3 2302 	umull	r2, r3, r3, r2
 800ceba:	095b      	lsrs	r3, r3, #5
 800cebc:	011e      	lsls	r6, r3, #4
 800cebe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cec0:	4618      	mov	r0, r3
 800cec2:	f04f 0100 	mov.w	r1, #0
 800cec6:	4602      	mov	r2, r0
 800cec8:	460b      	mov	r3, r1
 800ceca:	1894      	adds	r4, r2, r2
 800cecc:	60bc      	str	r4, [r7, #8]
 800cece:	415b      	adcs	r3, r3
 800ced0:	60fb      	str	r3, [r7, #12]
 800ced2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ced6:	1812      	adds	r2, r2, r0
 800ced8:	eb41 0303 	adc.w	r3, r1, r3
 800cedc:	f04f 0400 	mov.w	r4, #0
 800cee0:	f04f 0500 	mov.w	r5, #0
 800cee4:	00dd      	lsls	r5, r3, #3
 800cee6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800ceea:	00d4      	lsls	r4, r2, #3
 800ceec:	4622      	mov	r2, r4
 800ceee:	462b      	mov	r3, r5
 800cef0:	1814      	adds	r4, r2, r0
 800cef2:	64bc      	str	r4, [r7, #72]	; 0x48
 800cef4:	414b      	adcs	r3, r1
 800cef6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cef8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cefa:	685b      	ldr	r3, [r3, #4]
 800cefc:	4618      	mov	r0, r3
 800cefe:	f04f 0100 	mov.w	r1, #0
 800cf02:	f04f 0200 	mov.w	r2, #0
 800cf06:	f04f 0300 	mov.w	r3, #0
 800cf0a:	008b      	lsls	r3, r1, #2
 800cf0c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800cf10:	0082      	lsls	r2, r0, #2
 800cf12:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800cf16:	f7f3 feaf 	bl	8000c78 <__aeabi_uldivmod>
 800cf1a:	4602      	mov	r2, r0
 800cf1c:	460b      	mov	r3, r1
 800cf1e:	4b2f      	ldr	r3, [pc, #188]	; (800cfdc <UART_SetConfig+0x38c>)
 800cf20:	fba3 1302 	umull	r1, r3, r3, r2
 800cf24:	095b      	lsrs	r3, r3, #5
 800cf26:	2164      	movs	r1, #100	; 0x64
 800cf28:	fb01 f303 	mul.w	r3, r1, r3
 800cf2c:	1ad3      	subs	r3, r2, r3
 800cf2e:	011b      	lsls	r3, r3, #4
 800cf30:	3332      	adds	r3, #50	; 0x32
 800cf32:	4a2a      	ldr	r2, [pc, #168]	; (800cfdc <UART_SetConfig+0x38c>)
 800cf34:	fba2 2303 	umull	r2, r3, r2, r3
 800cf38:	095b      	lsrs	r3, r3, #5
 800cf3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cf3e:	441e      	add	r6, r3
 800cf40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cf42:	4618      	mov	r0, r3
 800cf44:	f04f 0100 	mov.w	r1, #0
 800cf48:	4602      	mov	r2, r0
 800cf4a:	460b      	mov	r3, r1
 800cf4c:	1894      	adds	r4, r2, r2
 800cf4e:	603c      	str	r4, [r7, #0]
 800cf50:	415b      	adcs	r3, r3
 800cf52:	607b      	str	r3, [r7, #4]
 800cf54:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cf58:	1812      	adds	r2, r2, r0
 800cf5a:	eb41 0303 	adc.w	r3, r1, r3
 800cf5e:	f04f 0400 	mov.w	r4, #0
 800cf62:	f04f 0500 	mov.w	r5, #0
 800cf66:	00dd      	lsls	r5, r3, #3
 800cf68:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800cf6c:	00d4      	lsls	r4, r2, #3
 800cf6e:	4622      	mov	r2, r4
 800cf70:	462b      	mov	r3, r5
 800cf72:	eb12 0a00 	adds.w	sl, r2, r0
 800cf76:	eb43 0b01 	adc.w	fp, r3, r1
 800cf7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cf7c:	685b      	ldr	r3, [r3, #4]
 800cf7e:	4618      	mov	r0, r3
 800cf80:	f04f 0100 	mov.w	r1, #0
 800cf84:	f04f 0200 	mov.w	r2, #0
 800cf88:	f04f 0300 	mov.w	r3, #0
 800cf8c:	008b      	lsls	r3, r1, #2
 800cf8e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800cf92:	0082      	lsls	r2, r0, #2
 800cf94:	4650      	mov	r0, sl
 800cf96:	4659      	mov	r1, fp
 800cf98:	f7f3 fe6e 	bl	8000c78 <__aeabi_uldivmod>
 800cf9c:	4602      	mov	r2, r0
 800cf9e:	460b      	mov	r3, r1
 800cfa0:	4b0e      	ldr	r3, [pc, #56]	; (800cfdc <UART_SetConfig+0x38c>)
 800cfa2:	fba3 1302 	umull	r1, r3, r3, r2
 800cfa6:	095b      	lsrs	r3, r3, #5
 800cfa8:	2164      	movs	r1, #100	; 0x64
 800cfaa:	fb01 f303 	mul.w	r3, r1, r3
 800cfae:	1ad3      	subs	r3, r2, r3
 800cfb0:	011b      	lsls	r3, r3, #4
 800cfb2:	3332      	adds	r3, #50	; 0x32
 800cfb4:	4a09      	ldr	r2, [pc, #36]	; (800cfdc <UART_SetConfig+0x38c>)
 800cfb6:	fba2 2303 	umull	r2, r3, r2, r3
 800cfba:	095b      	lsrs	r3, r3, #5
 800cfbc:	f003 020f 	and.w	r2, r3, #15
 800cfc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	4432      	add	r2, r6
 800cfc6:	609a      	str	r2, [r3, #8]
}
 800cfc8:	bf00      	nop
 800cfca:	377c      	adds	r7, #124	; 0x7c
 800cfcc:	46bd      	mov	sp, r7
 800cfce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfd2:	bf00      	nop
 800cfd4:	40011000 	.word	0x40011000
 800cfd8:	40011400 	.word	0x40011400
 800cfdc:	51eb851f 	.word	0x51eb851f

0800cfe0 <_ZdlPvj>:
 800cfe0:	f000 b818 	b.w	800d014 <_ZdlPv>

0800cfe4 <_ZdaPv>:
 800cfe4:	f000 b816 	b.w	800d014 <_ZdlPv>

0800cfe8 <_Znwj>:
 800cfe8:	2801      	cmp	r0, #1
 800cfea:	bf38      	it	cc
 800cfec:	2001      	movcc	r0, #1
 800cfee:	b510      	push	{r4, lr}
 800cff0:	4604      	mov	r4, r0
 800cff2:	4620      	mov	r0, r4
 800cff4:	f002 fbbe 	bl	800f774 <malloc>
 800cff8:	b930      	cbnz	r0, 800d008 <_Znwj+0x20>
 800cffa:	f000 f81f 	bl	800d03c <_ZSt15get_new_handlerv>
 800cffe:	b908      	cbnz	r0, 800d004 <_Znwj+0x1c>
 800d000:	f002 fb86 	bl	800f710 <abort>
 800d004:	4780      	blx	r0
 800d006:	e7f4      	b.n	800cff2 <_Znwj+0xa>
 800d008:	bd10      	pop	{r4, pc}

0800d00a <_Znaj>:
 800d00a:	f7ff bfed 	b.w	800cfe8 <_Znwj>

0800d00e <__cxa_pure_virtual>:
 800d00e:	b508      	push	{r3, lr}
 800d010:	f000 f80e 	bl	800d030 <_ZSt9terminatev>

0800d014 <_ZdlPv>:
 800d014:	f002 bbb6 	b.w	800f784 <free>

0800d018 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800d018:	b508      	push	{r3, lr}
 800d01a:	4780      	blx	r0
 800d01c:	f002 fb78 	bl	800f710 <abort>

0800d020 <_ZSt13get_terminatev>:
 800d020:	4b02      	ldr	r3, [pc, #8]	; (800d02c <_ZSt13get_terminatev+0xc>)
 800d022:	6818      	ldr	r0, [r3, #0]
 800d024:	f3bf 8f5b 	dmb	ish
 800d028:	4770      	bx	lr
 800d02a:	bf00      	nop
 800d02c:	2000000c 	.word	0x2000000c

0800d030 <_ZSt9terminatev>:
 800d030:	b508      	push	{r3, lr}
 800d032:	f7ff fff5 	bl	800d020 <_ZSt13get_terminatev>
 800d036:	f7ff ffef 	bl	800d018 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0800d03c <_ZSt15get_new_handlerv>:
 800d03c:	4b02      	ldr	r3, [pc, #8]	; (800d048 <_ZSt15get_new_handlerv+0xc>)
 800d03e:	6818      	ldr	r0, [r3, #0]
 800d040:	f3bf 8f5b 	dmb	ish
 800d044:	4770      	bx	lr
 800d046:	bf00      	nop
 800d048:	20007f88 	.word	0x20007f88
 800d04c:	00000000 	.word	0x00000000

0800d050 <ceil>:
 800d050:	ec51 0b10 	vmov	r0, r1, d0
 800d054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d058:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800d05c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800d060:	2e13      	cmp	r6, #19
 800d062:	ee10 5a10 	vmov	r5, s0
 800d066:	ee10 8a10 	vmov	r8, s0
 800d06a:	460c      	mov	r4, r1
 800d06c:	dc30      	bgt.n	800d0d0 <ceil+0x80>
 800d06e:	2e00      	cmp	r6, #0
 800d070:	da12      	bge.n	800d098 <ceil+0x48>
 800d072:	a335      	add	r3, pc, #212	; (adr r3, 800d148 <ceil+0xf8>)
 800d074:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d078:	f7f3 f920 	bl	80002bc <__adddf3>
 800d07c:	2200      	movs	r2, #0
 800d07e:	2300      	movs	r3, #0
 800d080:	f7f3 fd62 	bl	8000b48 <__aeabi_dcmpgt>
 800d084:	b128      	cbz	r0, 800d092 <ceil+0x42>
 800d086:	2c00      	cmp	r4, #0
 800d088:	db55      	blt.n	800d136 <ceil+0xe6>
 800d08a:	432c      	orrs	r4, r5
 800d08c:	d057      	beq.n	800d13e <ceil+0xee>
 800d08e:	4c30      	ldr	r4, [pc, #192]	; (800d150 <ceil+0x100>)
 800d090:	2500      	movs	r5, #0
 800d092:	4621      	mov	r1, r4
 800d094:	4628      	mov	r0, r5
 800d096:	e025      	b.n	800d0e4 <ceil+0x94>
 800d098:	4f2e      	ldr	r7, [pc, #184]	; (800d154 <ceil+0x104>)
 800d09a:	4137      	asrs	r7, r6
 800d09c:	ea01 0307 	and.w	r3, r1, r7
 800d0a0:	4303      	orrs	r3, r0
 800d0a2:	d01f      	beq.n	800d0e4 <ceil+0x94>
 800d0a4:	a328      	add	r3, pc, #160	; (adr r3, 800d148 <ceil+0xf8>)
 800d0a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0aa:	f7f3 f907 	bl	80002bc <__adddf3>
 800d0ae:	2200      	movs	r2, #0
 800d0b0:	2300      	movs	r3, #0
 800d0b2:	f7f3 fd49 	bl	8000b48 <__aeabi_dcmpgt>
 800d0b6:	2800      	cmp	r0, #0
 800d0b8:	d0eb      	beq.n	800d092 <ceil+0x42>
 800d0ba:	2c00      	cmp	r4, #0
 800d0bc:	bfc2      	ittt	gt
 800d0be:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 800d0c2:	fa43 f606 	asrgt.w	r6, r3, r6
 800d0c6:	19a4      	addgt	r4, r4, r6
 800d0c8:	ea24 0407 	bic.w	r4, r4, r7
 800d0cc:	2500      	movs	r5, #0
 800d0ce:	e7e0      	b.n	800d092 <ceil+0x42>
 800d0d0:	2e33      	cmp	r6, #51	; 0x33
 800d0d2:	dd0b      	ble.n	800d0ec <ceil+0x9c>
 800d0d4:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800d0d8:	d104      	bne.n	800d0e4 <ceil+0x94>
 800d0da:	ee10 2a10 	vmov	r2, s0
 800d0de:	460b      	mov	r3, r1
 800d0e0:	f7f3 f8ec 	bl	80002bc <__adddf3>
 800d0e4:	ec41 0b10 	vmov	d0, r0, r1
 800d0e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0ec:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800d0f0:	f04f 33ff 	mov.w	r3, #4294967295
 800d0f4:	fa23 f707 	lsr.w	r7, r3, r7
 800d0f8:	4207      	tst	r7, r0
 800d0fa:	d0f3      	beq.n	800d0e4 <ceil+0x94>
 800d0fc:	a312      	add	r3, pc, #72	; (adr r3, 800d148 <ceil+0xf8>)
 800d0fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d102:	f7f3 f8db 	bl	80002bc <__adddf3>
 800d106:	2200      	movs	r2, #0
 800d108:	2300      	movs	r3, #0
 800d10a:	f7f3 fd1d 	bl	8000b48 <__aeabi_dcmpgt>
 800d10e:	2800      	cmp	r0, #0
 800d110:	d0bf      	beq.n	800d092 <ceil+0x42>
 800d112:	2c00      	cmp	r4, #0
 800d114:	dd02      	ble.n	800d11c <ceil+0xcc>
 800d116:	2e14      	cmp	r6, #20
 800d118:	d103      	bne.n	800d122 <ceil+0xd2>
 800d11a:	3401      	adds	r4, #1
 800d11c:	ea25 0507 	bic.w	r5, r5, r7
 800d120:	e7b7      	b.n	800d092 <ceil+0x42>
 800d122:	2301      	movs	r3, #1
 800d124:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800d128:	fa03 f606 	lsl.w	r6, r3, r6
 800d12c:	4435      	add	r5, r6
 800d12e:	4545      	cmp	r5, r8
 800d130:	bf38      	it	cc
 800d132:	18e4      	addcc	r4, r4, r3
 800d134:	e7f2      	b.n	800d11c <ceil+0xcc>
 800d136:	2500      	movs	r5, #0
 800d138:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800d13c:	e7a9      	b.n	800d092 <ceil+0x42>
 800d13e:	4625      	mov	r5, r4
 800d140:	e7a7      	b.n	800d092 <ceil+0x42>
 800d142:	bf00      	nop
 800d144:	f3af 8000 	nop.w
 800d148:	8800759c 	.word	0x8800759c
 800d14c:	7e37e43c 	.word	0x7e37e43c
 800d150:	3ff00000 	.word	0x3ff00000
 800d154:	000fffff 	.word	0x000fffff

0800d158 <cos>:
 800d158:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d15a:	ec53 2b10 	vmov	r2, r3, d0
 800d15e:	4824      	ldr	r0, [pc, #144]	; (800d1f0 <cos+0x98>)
 800d160:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d164:	4281      	cmp	r1, r0
 800d166:	dc06      	bgt.n	800d176 <cos+0x1e>
 800d168:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 800d1e8 <cos+0x90>
 800d16c:	f001 fc54 	bl	800ea18 <__kernel_cos>
 800d170:	ec51 0b10 	vmov	r0, r1, d0
 800d174:	e007      	b.n	800d186 <cos+0x2e>
 800d176:	481f      	ldr	r0, [pc, #124]	; (800d1f4 <cos+0x9c>)
 800d178:	4281      	cmp	r1, r0
 800d17a:	dd09      	ble.n	800d190 <cos+0x38>
 800d17c:	ee10 0a10 	vmov	r0, s0
 800d180:	4619      	mov	r1, r3
 800d182:	f7f3 f899 	bl	80002b8 <__aeabi_dsub>
 800d186:	ec41 0b10 	vmov	d0, r0, r1
 800d18a:	b005      	add	sp, #20
 800d18c:	f85d fb04 	ldr.w	pc, [sp], #4
 800d190:	4668      	mov	r0, sp
 800d192:	f001 f88d 	bl	800e2b0 <__ieee754_rem_pio2>
 800d196:	f000 0003 	and.w	r0, r0, #3
 800d19a:	2801      	cmp	r0, #1
 800d19c:	d007      	beq.n	800d1ae <cos+0x56>
 800d19e:	2802      	cmp	r0, #2
 800d1a0:	d012      	beq.n	800d1c8 <cos+0x70>
 800d1a2:	b9c0      	cbnz	r0, 800d1d6 <cos+0x7e>
 800d1a4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d1a8:	ed9d 0b00 	vldr	d0, [sp]
 800d1ac:	e7de      	b.n	800d16c <cos+0x14>
 800d1ae:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d1b2:	ed9d 0b00 	vldr	d0, [sp]
 800d1b6:	f002 f837 	bl	800f228 <__kernel_sin>
 800d1ba:	ec53 2b10 	vmov	r2, r3, d0
 800d1be:	ee10 0a10 	vmov	r0, s0
 800d1c2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d1c6:	e7de      	b.n	800d186 <cos+0x2e>
 800d1c8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d1cc:	ed9d 0b00 	vldr	d0, [sp]
 800d1d0:	f001 fc22 	bl	800ea18 <__kernel_cos>
 800d1d4:	e7f1      	b.n	800d1ba <cos+0x62>
 800d1d6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d1da:	ed9d 0b00 	vldr	d0, [sp]
 800d1de:	2001      	movs	r0, #1
 800d1e0:	f002 f822 	bl	800f228 <__kernel_sin>
 800d1e4:	e7c4      	b.n	800d170 <cos+0x18>
 800d1e6:	bf00      	nop
	...
 800d1f0:	3fe921fb 	.word	0x3fe921fb
 800d1f4:	7fefffff 	.word	0x7fefffff

0800d1f8 <roundf>:
 800d1f8:	ee10 0a10 	vmov	r0, s0
 800d1fc:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800d200:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 800d204:	2a16      	cmp	r2, #22
 800d206:	dc15      	bgt.n	800d234 <roundf+0x3c>
 800d208:	2a00      	cmp	r2, #0
 800d20a:	da08      	bge.n	800d21e <roundf+0x26>
 800d20c:	3201      	adds	r2, #1
 800d20e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800d212:	d101      	bne.n	800d218 <roundf+0x20>
 800d214:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800d218:	ee00 3a10 	vmov	s0, r3
 800d21c:	4770      	bx	lr
 800d21e:	4908      	ldr	r1, [pc, #32]	; (800d240 <roundf+0x48>)
 800d220:	4111      	asrs	r1, r2
 800d222:	4208      	tst	r0, r1
 800d224:	d0fa      	beq.n	800d21c <roundf+0x24>
 800d226:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800d22a:	4113      	asrs	r3, r2
 800d22c:	4403      	add	r3, r0
 800d22e:	ea23 0301 	bic.w	r3, r3, r1
 800d232:	e7f1      	b.n	800d218 <roundf+0x20>
 800d234:	2a80      	cmp	r2, #128	; 0x80
 800d236:	d1f1      	bne.n	800d21c <roundf+0x24>
 800d238:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d23c:	4770      	bx	lr
 800d23e:	bf00      	nop
 800d240:	007fffff 	.word	0x007fffff
 800d244:	00000000 	.word	0x00000000

0800d248 <log>:
 800d248:	b538      	push	{r3, r4, r5, lr}
 800d24a:	ed2d 8b02 	vpush	{d8}
 800d24e:	ec55 4b10 	vmov	r4, r5, d0
 800d252:	f000 f94d 	bl	800d4f0 <__ieee754_log>
 800d256:	4b1e      	ldr	r3, [pc, #120]	; (800d2d0 <log+0x88>)
 800d258:	eeb0 8a40 	vmov.f32	s16, s0
 800d25c:	eef0 8a60 	vmov.f32	s17, s1
 800d260:	f993 3000 	ldrsb.w	r3, [r3]
 800d264:	3301      	adds	r3, #1
 800d266:	d01a      	beq.n	800d29e <log+0x56>
 800d268:	4622      	mov	r2, r4
 800d26a:	462b      	mov	r3, r5
 800d26c:	4620      	mov	r0, r4
 800d26e:	4629      	mov	r1, r5
 800d270:	f7f3 fc74 	bl	8000b5c <__aeabi_dcmpun>
 800d274:	b998      	cbnz	r0, 800d29e <log+0x56>
 800d276:	2200      	movs	r2, #0
 800d278:	2300      	movs	r3, #0
 800d27a:	4620      	mov	r0, r4
 800d27c:	4629      	mov	r1, r5
 800d27e:	f7f3 fc63 	bl	8000b48 <__aeabi_dcmpgt>
 800d282:	b960      	cbnz	r0, 800d29e <log+0x56>
 800d284:	2200      	movs	r2, #0
 800d286:	2300      	movs	r3, #0
 800d288:	4620      	mov	r0, r4
 800d28a:	4629      	mov	r1, r5
 800d28c:	f7f3 fc34 	bl	8000af8 <__aeabi_dcmpeq>
 800d290:	b160      	cbz	r0, 800d2ac <log+0x64>
 800d292:	f002 fa45 	bl	800f720 <__errno>
 800d296:	ed9f 8b0c 	vldr	d8, [pc, #48]	; 800d2c8 <log+0x80>
 800d29a:	2322      	movs	r3, #34	; 0x22
 800d29c:	6003      	str	r3, [r0, #0]
 800d29e:	eeb0 0a48 	vmov.f32	s0, s16
 800d2a2:	eef0 0a68 	vmov.f32	s1, s17
 800d2a6:	ecbd 8b02 	vpop	{d8}
 800d2aa:	bd38      	pop	{r3, r4, r5, pc}
 800d2ac:	f002 fa38 	bl	800f720 <__errno>
 800d2b0:	ecbd 8b02 	vpop	{d8}
 800d2b4:	2321      	movs	r3, #33	; 0x21
 800d2b6:	6003      	str	r3, [r0, #0]
 800d2b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d2bc:	4805      	ldr	r0, [pc, #20]	; (800d2d4 <log+0x8c>)
 800d2be:	f002 b907 	b.w	800f4d0 <nan>
 800d2c2:	bf00      	nop
 800d2c4:	f3af 8000 	nop.w
 800d2c8:	00000000 	.word	0x00000000
 800d2cc:	fff00000 	.word	0xfff00000
 800d2d0:	20000010 	.word	0x20000010
 800d2d4:	0803303d 	.word	0x0803303d

0800d2d8 <pow>:
 800d2d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d2dc:	ec59 8b10 	vmov	r8, r9, d0
 800d2e0:	ec57 6b11 	vmov	r6, r7, d1
 800d2e4:	f000 fac0 	bl	800d868 <__ieee754_pow>
 800d2e8:	4b4e      	ldr	r3, [pc, #312]	; (800d424 <pow+0x14c>)
 800d2ea:	f993 3000 	ldrsb.w	r3, [r3]
 800d2ee:	3301      	adds	r3, #1
 800d2f0:	ec55 4b10 	vmov	r4, r5, d0
 800d2f4:	d015      	beq.n	800d322 <pow+0x4a>
 800d2f6:	4632      	mov	r2, r6
 800d2f8:	463b      	mov	r3, r7
 800d2fa:	4630      	mov	r0, r6
 800d2fc:	4639      	mov	r1, r7
 800d2fe:	f7f3 fc2d 	bl	8000b5c <__aeabi_dcmpun>
 800d302:	b970      	cbnz	r0, 800d322 <pow+0x4a>
 800d304:	4642      	mov	r2, r8
 800d306:	464b      	mov	r3, r9
 800d308:	4640      	mov	r0, r8
 800d30a:	4649      	mov	r1, r9
 800d30c:	f7f3 fc26 	bl	8000b5c <__aeabi_dcmpun>
 800d310:	2200      	movs	r2, #0
 800d312:	2300      	movs	r3, #0
 800d314:	b148      	cbz	r0, 800d32a <pow+0x52>
 800d316:	4630      	mov	r0, r6
 800d318:	4639      	mov	r1, r7
 800d31a:	f7f3 fbed 	bl	8000af8 <__aeabi_dcmpeq>
 800d31e:	2800      	cmp	r0, #0
 800d320:	d17d      	bne.n	800d41e <pow+0x146>
 800d322:	ec45 4b10 	vmov	d0, r4, r5
 800d326:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d32a:	4640      	mov	r0, r8
 800d32c:	4649      	mov	r1, r9
 800d32e:	f7f3 fbe3 	bl	8000af8 <__aeabi_dcmpeq>
 800d332:	b1e0      	cbz	r0, 800d36e <pow+0x96>
 800d334:	2200      	movs	r2, #0
 800d336:	2300      	movs	r3, #0
 800d338:	4630      	mov	r0, r6
 800d33a:	4639      	mov	r1, r7
 800d33c:	f7f3 fbdc 	bl	8000af8 <__aeabi_dcmpeq>
 800d340:	2800      	cmp	r0, #0
 800d342:	d16c      	bne.n	800d41e <pow+0x146>
 800d344:	ec47 6b10 	vmov	d0, r6, r7
 800d348:	f002 f835 	bl	800f3b6 <finite>
 800d34c:	2800      	cmp	r0, #0
 800d34e:	d0e8      	beq.n	800d322 <pow+0x4a>
 800d350:	2200      	movs	r2, #0
 800d352:	2300      	movs	r3, #0
 800d354:	4630      	mov	r0, r6
 800d356:	4639      	mov	r1, r7
 800d358:	f7f3 fbd8 	bl	8000b0c <__aeabi_dcmplt>
 800d35c:	2800      	cmp	r0, #0
 800d35e:	d0e0      	beq.n	800d322 <pow+0x4a>
 800d360:	f002 f9de 	bl	800f720 <__errno>
 800d364:	2321      	movs	r3, #33	; 0x21
 800d366:	6003      	str	r3, [r0, #0]
 800d368:	2400      	movs	r4, #0
 800d36a:	4d2f      	ldr	r5, [pc, #188]	; (800d428 <pow+0x150>)
 800d36c:	e7d9      	b.n	800d322 <pow+0x4a>
 800d36e:	ec45 4b10 	vmov	d0, r4, r5
 800d372:	f002 f820 	bl	800f3b6 <finite>
 800d376:	bbb8      	cbnz	r0, 800d3e8 <pow+0x110>
 800d378:	ec49 8b10 	vmov	d0, r8, r9
 800d37c:	f002 f81b 	bl	800f3b6 <finite>
 800d380:	b390      	cbz	r0, 800d3e8 <pow+0x110>
 800d382:	ec47 6b10 	vmov	d0, r6, r7
 800d386:	f002 f816 	bl	800f3b6 <finite>
 800d38a:	b368      	cbz	r0, 800d3e8 <pow+0x110>
 800d38c:	4622      	mov	r2, r4
 800d38e:	462b      	mov	r3, r5
 800d390:	4620      	mov	r0, r4
 800d392:	4629      	mov	r1, r5
 800d394:	f7f3 fbe2 	bl	8000b5c <__aeabi_dcmpun>
 800d398:	b160      	cbz	r0, 800d3b4 <pow+0xdc>
 800d39a:	f002 f9c1 	bl	800f720 <__errno>
 800d39e:	2321      	movs	r3, #33	; 0x21
 800d3a0:	6003      	str	r3, [r0, #0]
 800d3a2:	2200      	movs	r2, #0
 800d3a4:	2300      	movs	r3, #0
 800d3a6:	4610      	mov	r0, r2
 800d3a8:	4619      	mov	r1, r3
 800d3aa:	f7f3 fa67 	bl	800087c <__aeabi_ddiv>
 800d3ae:	4604      	mov	r4, r0
 800d3b0:	460d      	mov	r5, r1
 800d3b2:	e7b6      	b.n	800d322 <pow+0x4a>
 800d3b4:	f002 f9b4 	bl	800f720 <__errno>
 800d3b8:	2322      	movs	r3, #34	; 0x22
 800d3ba:	6003      	str	r3, [r0, #0]
 800d3bc:	2200      	movs	r2, #0
 800d3be:	2300      	movs	r3, #0
 800d3c0:	4640      	mov	r0, r8
 800d3c2:	4649      	mov	r1, r9
 800d3c4:	f7f3 fba2 	bl	8000b0c <__aeabi_dcmplt>
 800d3c8:	2400      	movs	r4, #0
 800d3ca:	b158      	cbz	r0, 800d3e4 <pow+0x10c>
 800d3cc:	ec47 6b10 	vmov	d0, r6, r7
 800d3d0:	f002 f886 	bl	800f4e0 <rint>
 800d3d4:	4632      	mov	r2, r6
 800d3d6:	ec51 0b10 	vmov	r0, r1, d0
 800d3da:	463b      	mov	r3, r7
 800d3dc:	f7f3 fb8c 	bl	8000af8 <__aeabi_dcmpeq>
 800d3e0:	2800      	cmp	r0, #0
 800d3e2:	d0c2      	beq.n	800d36a <pow+0x92>
 800d3e4:	4d11      	ldr	r5, [pc, #68]	; (800d42c <pow+0x154>)
 800d3e6:	e79c      	b.n	800d322 <pow+0x4a>
 800d3e8:	2200      	movs	r2, #0
 800d3ea:	2300      	movs	r3, #0
 800d3ec:	4620      	mov	r0, r4
 800d3ee:	4629      	mov	r1, r5
 800d3f0:	f7f3 fb82 	bl	8000af8 <__aeabi_dcmpeq>
 800d3f4:	2800      	cmp	r0, #0
 800d3f6:	d094      	beq.n	800d322 <pow+0x4a>
 800d3f8:	ec49 8b10 	vmov	d0, r8, r9
 800d3fc:	f001 ffdb 	bl	800f3b6 <finite>
 800d400:	2800      	cmp	r0, #0
 800d402:	d08e      	beq.n	800d322 <pow+0x4a>
 800d404:	ec47 6b10 	vmov	d0, r6, r7
 800d408:	f001 ffd5 	bl	800f3b6 <finite>
 800d40c:	2800      	cmp	r0, #0
 800d40e:	d088      	beq.n	800d322 <pow+0x4a>
 800d410:	f002 f986 	bl	800f720 <__errno>
 800d414:	2322      	movs	r3, #34	; 0x22
 800d416:	6003      	str	r3, [r0, #0]
 800d418:	2400      	movs	r4, #0
 800d41a:	2500      	movs	r5, #0
 800d41c:	e781      	b.n	800d322 <pow+0x4a>
 800d41e:	4d04      	ldr	r5, [pc, #16]	; (800d430 <pow+0x158>)
 800d420:	2400      	movs	r4, #0
 800d422:	e77e      	b.n	800d322 <pow+0x4a>
 800d424:	20000010 	.word	0x20000010
 800d428:	fff00000 	.word	0xfff00000
 800d42c:	7ff00000 	.word	0x7ff00000
 800d430:	3ff00000 	.word	0x3ff00000

0800d434 <logf>:
 800d434:	b508      	push	{r3, lr}
 800d436:	ed2d 8b02 	vpush	{d8}
 800d43a:	eeb0 8a40 	vmov.f32	s16, s0
 800d43e:	f001 f9f5 	bl	800e82c <__ieee754_logf>
 800d442:	4b14      	ldr	r3, [pc, #80]	; (800d494 <logf+0x60>)
 800d444:	f993 3000 	ldrsb.w	r3, [r3]
 800d448:	3301      	adds	r3, #1
 800d44a:	d014      	beq.n	800d476 <logf+0x42>
 800d44c:	eeb4 8a48 	vcmp.f32	s16, s16
 800d450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d454:	d60f      	bvs.n	800d476 <logf+0x42>
 800d456:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800d45a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d45e:	dc0a      	bgt.n	800d476 <logf+0x42>
 800d460:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800d464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d468:	d108      	bne.n	800d47c <logf+0x48>
 800d46a:	f002 f959 	bl	800f720 <__errno>
 800d46e:	2322      	movs	r3, #34	; 0x22
 800d470:	ed9f 0a09 	vldr	s0, [pc, #36]	; 800d498 <logf+0x64>
 800d474:	6003      	str	r3, [r0, #0]
 800d476:	ecbd 8b02 	vpop	{d8}
 800d47a:	bd08      	pop	{r3, pc}
 800d47c:	f002 f950 	bl	800f720 <__errno>
 800d480:	ecbd 8b02 	vpop	{d8}
 800d484:	2321      	movs	r3, #33	; 0x21
 800d486:	6003      	str	r3, [r0, #0]
 800d488:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800d48c:	4803      	ldr	r0, [pc, #12]	; (800d49c <logf+0x68>)
 800d48e:	f002 b939 	b.w	800f704 <nanf>
 800d492:	bf00      	nop
 800d494:	20000010 	.word	0x20000010
 800d498:	ff800000 	.word	0xff800000
 800d49c:	0803303d 	.word	0x0803303d

0800d4a0 <sqrtf>:
 800d4a0:	b508      	push	{r3, lr}
 800d4a2:	ed2d 8b02 	vpush	{d8}
 800d4a6:	eeb0 8a40 	vmov.f32	s16, s0
 800d4aa:	f001 faaf 	bl	800ea0c <__ieee754_sqrtf>
 800d4ae:	4b0d      	ldr	r3, [pc, #52]	; (800d4e4 <sqrtf+0x44>)
 800d4b0:	f993 3000 	ldrsb.w	r3, [r3]
 800d4b4:	3301      	adds	r3, #1
 800d4b6:	d011      	beq.n	800d4dc <sqrtf+0x3c>
 800d4b8:	eeb4 8a48 	vcmp.f32	s16, s16
 800d4bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4c0:	d60c      	bvs.n	800d4dc <sqrtf+0x3c>
 800d4c2:	eddf 8a09 	vldr	s17, [pc, #36]	; 800d4e8 <sqrtf+0x48>
 800d4c6:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800d4ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4ce:	d505      	bpl.n	800d4dc <sqrtf+0x3c>
 800d4d0:	f002 f926 	bl	800f720 <__errno>
 800d4d4:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800d4d8:	2321      	movs	r3, #33	; 0x21
 800d4da:	6003      	str	r3, [r0, #0]
 800d4dc:	ecbd 8b02 	vpop	{d8}
 800d4e0:	bd08      	pop	{r3, pc}
 800d4e2:	bf00      	nop
 800d4e4:	20000010 	.word	0x20000010
	...

0800d4f0 <__ieee754_log>:
 800d4f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4f4:	ec51 0b10 	vmov	r0, r1, d0
 800d4f8:	ed2d 8b04 	vpush	{d8-d9}
 800d4fc:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800d500:	b083      	sub	sp, #12
 800d502:	460d      	mov	r5, r1
 800d504:	da29      	bge.n	800d55a <__ieee754_log+0x6a>
 800d506:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d50a:	4303      	orrs	r3, r0
 800d50c:	ee10 2a10 	vmov	r2, s0
 800d510:	d10c      	bne.n	800d52c <__ieee754_log+0x3c>
 800d512:	49cf      	ldr	r1, [pc, #828]	; (800d850 <__ieee754_log+0x360>)
 800d514:	2200      	movs	r2, #0
 800d516:	2300      	movs	r3, #0
 800d518:	2000      	movs	r0, #0
 800d51a:	f7f3 f9af 	bl	800087c <__aeabi_ddiv>
 800d51e:	ec41 0b10 	vmov	d0, r0, r1
 800d522:	b003      	add	sp, #12
 800d524:	ecbd 8b04 	vpop	{d8-d9}
 800d528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d52c:	2900      	cmp	r1, #0
 800d52e:	da05      	bge.n	800d53c <__ieee754_log+0x4c>
 800d530:	460b      	mov	r3, r1
 800d532:	f7f2 fec1 	bl	80002b8 <__aeabi_dsub>
 800d536:	2200      	movs	r2, #0
 800d538:	2300      	movs	r3, #0
 800d53a:	e7ee      	b.n	800d51a <__ieee754_log+0x2a>
 800d53c:	4bc5      	ldr	r3, [pc, #788]	; (800d854 <__ieee754_log+0x364>)
 800d53e:	2200      	movs	r2, #0
 800d540:	f7f3 f872 	bl	8000628 <__aeabi_dmul>
 800d544:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800d548:	460d      	mov	r5, r1
 800d54a:	4ac3      	ldr	r2, [pc, #780]	; (800d858 <__ieee754_log+0x368>)
 800d54c:	4295      	cmp	r5, r2
 800d54e:	dd06      	ble.n	800d55e <__ieee754_log+0x6e>
 800d550:	4602      	mov	r2, r0
 800d552:	460b      	mov	r3, r1
 800d554:	f7f2 feb2 	bl	80002bc <__adddf3>
 800d558:	e7e1      	b.n	800d51e <__ieee754_log+0x2e>
 800d55a:	2300      	movs	r3, #0
 800d55c:	e7f5      	b.n	800d54a <__ieee754_log+0x5a>
 800d55e:	152c      	asrs	r4, r5, #20
 800d560:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800d564:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800d568:	441c      	add	r4, r3
 800d56a:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800d56e:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800d572:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d576:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800d57a:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800d57e:	ea42 0105 	orr.w	r1, r2, r5
 800d582:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800d586:	2200      	movs	r2, #0
 800d588:	4bb4      	ldr	r3, [pc, #720]	; (800d85c <__ieee754_log+0x36c>)
 800d58a:	f7f2 fe95 	bl	80002b8 <__aeabi_dsub>
 800d58e:	1cab      	adds	r3, r5, #2
 800d590:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d594:	2b02      	cmp	r3, #2
 800d596:	4682      	mov	sl, r0
 800d598:	468b      	mov	fp, r1
 800d59a:	f04f 0200 	mov.w	r2, #0
 800d59e:	dc53      	bgt.n	800d648 <__ieee754_log+0x158>
 800d5a0:	2300      	movs	r3, #0
 800d5a2:	f7f3 faa9 	bl	8000af8 <__aeabi_dcmpeq>
 800d5a6:	b1d0      	cbz	r0, 800d5de <__ieee754_log+0xee>
 800d5a8:	2c00      	cmp	r4, #0
 800d5aa:	f000 8122 	beq.w	800d7f2 <__ieee754_log+0x302>
 800d5ae:	4620      	mov	r0, r4
 800d5b0:	f7f2 ffd0 	bl	8000554 <__aeabi_i2d>
 800d5b4:	a390      	add	r3, pc, #576	; (adr r3, 800d7f8 <__ieee754_log+0x308>)
 800d5b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5ba:	4606      	mov	r6, r0
 800d5bc:	460f      	mov	r7, r1
 800d5be:	f7f3 f833 	bl	8000628 <__aeabi_dmul>
 800d5c2:	a38f      	add	r3, pc, #572	; (adr r3, 800d800 <__ieee754_log+0x310>)
 800d5c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5c8:	4604      	mov	r4, r0
 800d5ca:	460d      	mov	r5, r1
 800d5cc:	4630      	mov	r0, r6
 800d5ce:	4639      	mov	r1, r7
 800d5d0:	f7f3 f82a 	bl	8000628 <__aeabi_dmul>
 800d5d4:	4602      	mov	r2, r0
 800d5d6:	460b      	mov	r3, r1
 800d5d8:	4620      	mov	r0, r4
 800d5da:	4629      	mov	r1, r5
 800d5dc:	e7ba      	b.n	800d554 <__ieee754_log+0x64>
 800d5de:	a38a      	add	r3, pc, #552	; (adr r3, 800d808 <__ieee754_log+0x318>)
 800d5e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5e4:	4650      	mov	r0, sl
 800d5e6:	4659      	mov	r1, fp
 800d5e8:	f7f3 f81e 	bl	8000628 <__aeabi_dmul>
 800d5ec:	4602      	mov	r2, r0
 800d5ee:	460b      	mov	r3, r1
 800d5f0:	2000      	movs	r0, #0
 800d5f2:	499b      	ldr	r1, [pc, #620]	; (800d860 <__ieee754_log+0x370>)
 800d5f4:	f7f2 fe60 	bl	80002b8 <__aeabi_dsub>
 800d5f8:	4652      	mov	r2, sl
 800d5fa:	4606      	mov	r6, r0
 800d5fc:	460f      	mov	r7, r1
 800d5fe:	465b      	mov	r3, fp
 800d600:	4650      	mov	r0, sl
 800d602:	4659      	mov	r1, fp
 800d604:	f7f3 f810 	bl	8000628 <__aeabi_dmul>
 800d608:	4602      	mov	r2, r0
 800d60a:	460b      	mov	r3, r1
 800d60c:	4630      	mov	r0, r6
 800d60e:	4639      	mov	r1, r7
 800d610:	f7f3 f80a 	bl	8000628 <__aeabi_dmul>
 800d614:	4606      	mov	r6, r0
 800d616:	460f      	mov	r7, r1
 800d618:	b914      	cbnz	r4, 800d620 <__ieee754_log+0x130>
 800d61a:	4632      	mov	r2, r6
 800d61c:	463b      	mov	r3, r7
 800d61e:	e0a2      	b.n	800d766 <__ieee754_log+0x276>
 800d620:	4620      	mov	r0, r4
 800d622:	f7f2 ff97 	bl	8000554 <__aeabi_i2d>
 800d626:	a374      	add	r3, pc, #464	; (adr r3, 800d7f8 <__ieee754_log+0x308>)
 800d628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d62c:	4680      	mov	r8, r0
 800d62e:	4689      	mov	r9, r1
 800d630:	f7f2 fffa 	bl	8000628 <__aeabi_dmul>
 800d634:	a372      	add	r3, pc, #456	; (adr r3, 800d800 <__ieee754_log+0x310>)
 800d636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d63a:	4604      	mov	r4, r0
 800d63c:	460d      	mov	r5, r1
 800d63e:	4640      	mov	r0, r8
 800d640:	4649      	mov	r1, r9
 800d642:	f7f2 fff1 	bl	8000628 <__aeabi_dmul>
 800d646:	e0a7      	b.n	800d798 <__ieee754_log+0x2a8>
 800d648:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d64c:	f7f2 fe36 	bl	80002bc <__adddf3>
 800d650:	4602      	mov	r2, r0
 800d652:	460b      	mov	r3, r1
 800d654:	4650      	mov	r0, sl
 800d656:	4659      	mov	r1, fp
 800d658:	f7f3 f910 	bl	800087c <__aeabi_ddiv>
 800d65c:	ec41 0b18 	vmov	d8, r0, r1
 800d660:	4620      	mov	r0, r4
 800d662:	f7f2 ff77 	bl	8000554 <__aeabi_i2d>
 800d666:	ec53 2b18 	vmov	r2, r3, d8
 800d66a:	ec41 0b19 	vmov	d9, r0, r1
 800d66e:	ec51 0b18 	vmov	r0, r1, d8
 800d672:	f7f2 ffd9 	bl	8000628 <__aeabi_dmul>
 800d676:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800d67a:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800d67e:	9301      	str	r3, [sp, #4]
 800d680:	4602      	mov	r2, r0
 800d682:	460b      	mov	r3, r1
 800d684:	4680      	mov	r8, r0
 800d686:	4689      	mov	r9, r1
 800d688:	f7f2 ffce 	bl	8000628 <__aeabi_dmul>
 800d68c:	a360      	add	r3, pc, #384	; (adr r3, 800d810 <__ieee754_log+0x320>)
 800d68e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d692:	4606      	mov	r6, r0
 800d694:	460f      	mov	r7, r1
 800d696:	f7f2 ffc7 	bl	8000628 <__aeabi_dmul>
 800d69a:	a35f      	add	r3, pc, #380	; (adr r3, 800d818 <__ieee754_log+0x328>)
 800d69c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6a0:	f7f2 fe0c 	bl	80002bc <__adddf3>
 800d6a4:	4632      	mov	r2, r6
 800d6a6:	463b      	mov	r3, r7
 800d6a8:	f7f2 ffbe 	bl	8000628 <__aeabi_dmul>
 800d6ac:	a35c      	add	r3, pc, #368	; (adr r3, 800d820 <__ieee754_log+0x330>)
 800d6ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6b2:	f7f2 fe03 	bl	80002bc <__adddf3>
 800d6b6:	4632      	mov	r2, r6
 800d6b8:	463b      	mov	r3, r7
 800d6ba:	f7f2 ffb5 	bl	8000628 <__aeabi_dmul>
 800d6be:	a35a      	add	r3, pc, #360	; (adr r3, 800d828 <__ieee754_log+0x338>)
 800d6c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6c4:	f7f2 fdfa 	bl	80002bc <__adddf3>
 800d6c8:	4642      	mov	r2, r8
 800d6ca:	464b      	mov	r3, r9
 800d6cc:	f7f2 ffac 	bl	8000628 <__aeabi_dmul>
 800d6d0:	a357      	add	r3, pc, #348	; (adr r3, 800d830 <__ieee754_log+0x340>)
 800d6d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6d6:	4680      	mov	r8, r0
 800d6d8:	4689      	mov	r9, r1
 800d6da:	4630      	mov	r0, r6
 800d6dc:	4639      	mov	r1, r7
 800d6de:	f7f2 ffa3 	bl	8000628 <__aeabi_dmul>
 800d6e2:	a355      	add	r3, pc, #340	; (adr r3, 800d838 <__ieee754_log+0x348>)
 800d6e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6e8:	f7f2 fde8 	bl	80002bc <__adddf3>
 800d6ec:	4632      	mov	r2, r6
 800d6ee:	463b      	mov	r3, r7
 800d6f0:	f7f2 ff9a 	bl	8000628 <__aeabi_dmul>
 800d6f4:	a352      	add	r3, pc, #328	; (adr r3, 800d840 <__ieee754_log+0x350>)
 800d6f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6fa:	f7f2 fddf 	bl	80002bc <__adddf3>
 800d6fe:	4632      	mov	r2, r6
 800d700:	463b      	mov	r3, r7
 800d702:	f7f2 ff91 	bl	8000628 <__aeabi_dmul>
 800d706:	460b      	mov	r3, r1
 800d708:	4602      	mov	r2, r0
 800d70a:	4649      	mov	r1, r9
 800d70c:	4640      	mov	r0, r8
 800d70e:	f7f2 fdd5 	bl	80002bc <__adddf3>
 800d712:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800d716:	9b01      	ldr	r3, [sp, #4]
 800d718:	3551      	adds	r5, #81	; 0x51
 800d71a:	431d      	orrs	r5, r3
 800d71c:	2d00      	cmp	r5, #0
 800d71e:	4680      	mov	r8, r0
 800d720:	4689      	mov	r9, r1
 800d722:	dd48      	ble.n	800d7b6 <__ieee754_log+0x2c6>
 800d724:	4b4e      	ldr	r3, [pc, #312]	; (800d860 <__ieee754_log+0x370>)
 800d726:	2200      	movs	r2, #0
 800d728:	4650      	mov	r0, sl
 800d72a:	4659      	mov	r1, fp
 800d72c:	f7f2 ff7c 	bl	8000628 <__aeabi_dmul>
 800d730:	4652      	mov	r2, sl
 800d732:	465b      	mov	r3, fp
 800d734:	f7f2 ff78 	bl	8000628 <__aeabi_dmul>
 800d738:	4602      	mov	r2, r0
 800d73a:	460b      	mov	r3, r1
 800d73c:	4606      	mov	r6, r0
 800d73e:	460f      	mov	r7, r1
 800d740:	4640      	mov	r0, r8
 800d742:	4649      	mov	r1, r9
 800d744:	f7f2 fdba 	bl	80002bc <__adddf3>
 800d748:	ec53 2b18 	vmov	r2, r3, d8
 800d74c:	f7f2 ff6c 	bl	8000628 <__aeabi_dmul>
 800d750:	4680      	mov	r8, r0
 800d752:	4689      	mov	r9, r1
 800d754:	b964      	cbnz	r4, 800d770 <__ieee754_log+0x280>
 800d756:	4602      	mov	r2, r0
 800d758:	460b      	mov	r3, r1
 800d75a:	4630      	mov	r0, r6
 800d75c:	4639      	mov	r1, r7
 800d75e:	f7f2 fdab 	bl	80002b8 <__aeabi_dsub>
 800d762:	4602      	mov	r2, r0
 800d764:	460b      	mov	r3, r1
 800d766:	4650      	mov	r0, sl
 800d768:	4659      	mov	r1, fp
 800d76a:	f7f2 fda5 	bl	80002b8 <__aeabi_dsub>
 800d76e:	e6d6      	b.n	800d51e <__ieee754_log+0x2e>
 800d770:	a321      	add	r3, pc, #132	; (adr r3, 800d7f8 <__ieee754_log+0x308>)
 800d772:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d776:	ec51 0b19 	vmov	r0, r1, d9
 800d77a:	f7f2 ff55 	bl	8000628 <__aeabi_dmul>
 800d77e:	a320      	add	r3, pc, #128	; (adr r3, 800d800 <__ieee754_log+0x310>)
 800d780:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d784:	4604      	mov	r4, r0
 800d786:	460d      	mov	r5, r1
 800d788:	ec51 0b19 	vmov	r0, r1, d9
 800d78c:	f7f2 ff4c 	bl	8000628 <__aeabi_dmul>
 800d790:	4642      	mov	r2, r8
 800d792:	464b      	mov	r3, r9
 800d794:	f7f2 fd92 	bl	80002bc <__adddf3>
 800d798:	4602      	mov	r2, r0
 800d79a:	460b      	mov	r3, r1
 800d79c:	4630      	mov	r0, r6
 800d79e:	4639      	mov	r1, r7
 800d7a0:	f7f2 fd8a 	bl	80002b8 <__aeabi_dsub>
 800d7a4:	4652      	mov	r2, sl
 800d7a6:	465b      	mov	r3, fp
 800d7a8:	f7f2 fd86 	bl	80002b8 <__aeabi_dsub>
 800d7ac:	4602      	mov	r2, r0
 800d7ae:	460b      	mov	r3, r1
 800d7b0:	4620      	mov	r0, r4
 800d7b2:	4629      	mov	r1, r5
 800d7b4:	e7d9      	b.n	800d76a <__ieee754_log+0x27a>
 800d7b6:	4602      	mov	r2, r0
 800d7b8:	460b      	mov	r3, r1
 800d7ba:	4650      	mov	r0, sl
 800d7bc:	4659      	mov	r1, fp
 800d7be:	f7f2 fd7b 	bl	80002b8 <__aeabi_dsub>
 800d7c2:	ec53 2b18 	vmov	r2, r3, d8
 800d7c6:	f7f2 ff2f 	bl	8000628 <__aeabi_dmul>
 800d7ca:	4606      	mov	r6, r0
 800d7cc:	460f      	mov	r7, r1
 800d7ce:	2c00      	cmp	r4, #0
 800d7d0:	f43f af23 	beq.w	800d61a <__ieee754_log+0x12a>
 800d7d4:	a308      	add	r3, pc, #32	; (adr r3, 800d7f8 <__ieee754_log+0x308>)
 800d7d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7da:	ec51 0b19 	vmov	r0, r1, d9
 800d7de:	f7f2 ff23 	bl	8000628 <__aeabi_dmul>
 800d7e2:	a307      	add	r3, pc, #28	; (adr r3, 800d800 <__ieee754_log+0x310>)
 800d7e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7e8:	4604      	mov	r4, r0
 800d7ea:	460d      	mov	r5, r1
 800d7ec:	ec51 0b19 	vmov	r0, r1, d9
 800d7f0:	e727      	b.n	800d642 <__ieee754_log+0x152>
 800d7f2:	ed9f 0b15 	vldr	d0, [pc, #84]	; 800d848 <__ieee754_log+0x358>
 800d7f6:	e694      	b.n	800d522 <__ieee754_log+0x32>
 800d7f8:	fee00000 	.word	0xfee00000
 800d7fc:	3fe62e42 	.word	0x3fe62e42
 800d800:	35793c76 	.word	0x35793c76
 800d804:	3dea39ef 	.word	0x3dea39ef
 800d808:	55555555 	.word	0x55555555
 800d80c:	3fd55555 	.word	0x3fd55555
 800d810:	df3e5244 	.word	0xdf3e5244
 800d814:	3fc2f112 	.word	0x3fc2f112
 800d818:	96cb03de 	.word	0x96cb03de
 800d81c:	3fc74664 	.word	0x3fc74664
 800d820:	94229359 	.word	0x94229359
 800d824:	3fd24924 	.word	0x3fd24924
 800d828:	55555593 	.word	0x55555593
 800d82c:	3fe55555 	.word	0x3fe55555
 800d830:	d078c69f 	.word	0xd078c69f
 800d834:	3fc39a09 	.word	0x3fc39a09
 800d838:	1d8e78af 	.word	0x1d8e78af
 800d83c:	3fcc71c5 	.word	0x3fcc71c5
 800d840:	9997fa04 	.word	0x9997fa04
 800d844:	3fd99999 	.word	0x3fd99999
	...
 800d850:	c3500000 	.word	0xc3500000
 800d854:	43500000 	.word	0x43500000
 800d858:	7fefffff 	.word	0x7fefffff
 800d85c:	3ff00000 	.word	0x3ff00000
 800d860:	3fe00000 	.word	0x3fe00000
 800d864:	00000000 	.word	0x00000000

0800d868 <__ieee754_pow>:
 800d868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d86c:	ed2d 8b06 	vpush	{d8-d10}
 800d870:	b08d      	sub	sp, #52	; 0x34
 800d872:	ed8d 1b02 	vstr	d1, [sp, #8]
 800d876:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800d87a:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800d87e:	ea56 0100 	orrs.w	r1, r6, r0
 800d882:	ec53 2b10 	vmov	r2, r3, d0
 800d886:	f000 84d1 	beq.w	800e22c <__ieee754_pow+0x9c4>
 800d88a:	497f      	ldr	r1, [pc, #508]	; (800da88 <__ieee754_pow+0x220>)
 800d88c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800d890:	428c      	cmp	r4, r1
 800d892:	ee10 8a10 	vmov	r8, s0
 800d896:	4699      	mov	r9, r3
 800d898:	dc09      	bgt.n	800d8ae <__ieee754_pow+0x46>
 800d89a:	d103      	bne.n	800d8a4 <__ieee754_pow+0x3c>
 800d89c:	b97a      	cbnz	r2, 800d8be <__ieee754_pow+0x56>
 800d89e:	42a6      	cmp	r6, r4
 800d8a0:	dd02      	ble.n	800d8a8 <__ieee754_pow+0x40>
 800d8a2:	e00c      	b.n	800d8be <__ieee754_pow+0x56>
 800d8a4:	428e      	cmp	r6, r1
 800d8a6:	dc02      	bgt.n	800d8ae <__ieee754_pow+0x46>
 800d8a8:	428e      	cmp	r6, r1
 800d8aa:	d110      	bne.n	800d8ce <__ieee754_pow+0x66>
 800d8ac:	b178      	cbz	r0, 800d8ce <__ieee754_pow+0x66>
 800d8ae:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800d8b2:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d8b6:	ea54 0308 	orrs.w	r3, r4, r8
 800d8ba:	f000 84b7 	beq.w	800e22c <__ieee754_pow+0x9c4>
 800d8be:	4873      	ldr	r0, [pc, #460]	; (800da8c <__ieee754_pow+0x224>)
 800d8c0:	b00d      	add	sp, #52	; 0x34
 800d8c2:	ecbd 8b06 	vpop	{d8-d10}
 800d8c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8ca:	f001 be01 	b.w	800f4d0 <nan>
 800d8ce:	f1b9 0f00 	cmp.w	r9, #0
 800d8d2:	da36      	bge.n	800d942 <__ieee754_pow+0xda>
 800d8d4:	496e      	ldr	r1, [pc, #440]	; (800da90 <__ieee754_pow+0x228>)
 800d8d6:	428e      	cmp	r6, r1
 800d8d8:	dc51      	bgt.n	800d97e <__ieee754_pow+0x116>
 800d8da:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800d8de:	428e      	cmp	r6, r1
 800d8e0:	f340 84af 	ble.w	800e242 <__ieee754_pow+0x9da>
 800d8e4:	1531      	asrs	r1, r6, #20
 800d8e6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800d8ea:	2914      	cmp	r1, #20
 800d8ec:	dd0f      	ble.n	800d90e <__ieee754_pow+0xa6>
 800d8ee:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800d8f2:	fa20 fc01 	lsr.w	ip, r0, r1
 800d8f6:	fa0c f101 	lsl.w	r1, ip, r1
 800d8fa:	4281      	cmp	r1, r0
 800d8fc:	f040 84a1 	bne.w	800e242 <__ieee754_pow+0x9da>
 800d900:	f00c 0c01 	and.w	ip, ip, #1
 800d904:	f1cc 0102 	rsb	r1, ip, #2
 800d908:	9100      	str	r1, [sp, #0]
 800d90a:	b180      	cbz	r0, 800d92e <__ieee754_pow+0xc6>
 800d90c:	e059      	b.n	800d9c2 <__ieee754_pow+0x15a>
 800d90e:	2800      	cmp	r0, #0
 800d910:	d155      	bne.n	800d9be <__ieee754_pow+0x156>
 800d912:	f1c1 0114 	rsb	r1, r1, #20
 800d916:	fa46 fc01 	asr.w	ip, r6, r1
 800d91a:	fa0c f101 	lsl.w	r1, ip, r1
 800d91e:	42b1      	cmp	r1, r6
 800d920:	f040 848c 	bne.w	800e23c <__ieee754_pow+0x9d4>
 800d924:	f00c 0c01 	and.w	ip, ip, #1
 800d928:	f1cc 0102 	rsb	r1, ip, #2
 800d92c:	9100      	str	r1, [sp, #0]
 800d92e:	4959      	ldr	r1, [pc, #356]	; (800da94 <__ieee754_pow+0x22c>)
 800d930:	428e      	cmp	r6, r1
 800d932:	d12d      	bne.n	800d990 <__ieee754_pow+0x128>
 800d934:	2f00      	cmp	r7, #0
 800d936:	da79      	bge.n	800da2c <__ieee754_pow+0x1c4>
 800d938:	4956      	ldr	r1, [pc, #344]	; (800da94 <__ieee754_pow+0x22c>)
 800d93a:	2000      	movs	r0, #0
 800d93c:	f7f2 ff9e 	bl	800087c <__aeabi_ddiv>
 800d940:	e016      	b.n	800d970 <__ieee754_pow+0x108>
 800d942:	2100      	movs	r1, #0
 800d944:	9100      	str	r1, [sp, #0]
 800d946:	2800      	cmp	r0, #0
 800d948:	d13b      	bne.n	800d9c2 <__ieee754_pow+0x15a>
 800d94a:	494f      	ldr	r1, [pc, #316]	; (800da88 <__ieee754_pow+0x220>)
 800d94c:	428e      	cmp	r6, r1
 800d94e:	d1ee      	bne.n	800d92e <__ieee754_pow+0xc6>
 800d950:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800d954:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800d958:	ea53 0308 	orrs.w	r3, r3, r8
 800d95c:	f000 8466 	beq.w	800e22c <__ieee754_pow+0x9c4>
 800d960:	4b4d      	ldr	r3, [pc, #308]	; (800da98 <__ieee754_pow+0x230>)
 800d962:	429c      	cmp	r4, r3
 800d964:	dd0d      	ble.n	800d982 <__ieee754_pow+0x11a>
 800d966:	2f00      	cmp	r7, #0
 800d968:	f280 8464 	bge.w	800e234 <__ieee754_pow+0x9cc>
 800d96c:	2000      	movs	r0, #0
 800d96e:	2100      	movs	r1, #0
 800d970:	ec41 0b10 	vmov	d0, r0, r1
 800d974:	b00d      	add	sp, #52	; 0x34
 800d976:	ecbd 8b06 	vpop	{d8-d10}
 800d97a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d97e:	2102      	movs	r1, #2
 800d980:	e7e0      	b.n	800d944 <__ieee754_pow+0xdc>
 800d982:	2f00      	cmp	r7, #0
 800d984:	daf2      	bge.n	800d96c <__ieee754_pow+0x104>
 800d986:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800d98a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d98e:	e7ef      	b.n	800d970 <__ieee754_pow+0x108>
 800d990:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800d994:	d104      	bne.n	800d9a0 <__ieee754_pow+0x138>
 800d996:	4610      	mov	r0, r2
 800d998:	4619      	mov	r1, r3
 800d99a:	f7f2 fe45 	bl	8000628 <__aeabi_dmul>
 800d99e:	e7e7      	b.n	800d970 <__ieee754_pow+0x108>
 800d9a0:	493e      	ldr	r1, [pc, #248]	; (800da9c <__ieee754_pow+0x234>)
 800d9a2:	428f      	cmp	r7, r1
 800d9a4:	d10d      	bne.n	800d9c2 <__ieee754_pow+0x15a>
 800d9a6:	f1b9 0f00 	cmp.w	r9, #0
 800d9aa:	db0a      	blt.n	800d9c2 <__ieee754_pow+0x15a>
 800d9ac:	ec43 2b10 	vmov	d0, r2, r3
 800d9b0:	b00d      	add	sp, #52	; 0x34
 800d9b2:	ecbd 8b06 	vpop	{d8-d10}
 800d9b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9ba:	f000 be83 	b.w	800e6c4 <__ieee754_sqrt>
 800d9be:	2100      	movs	r1, #0
 800d9c0:	9100      	str	r1, [sp, #0]
 800d9c2:	ec43 2b10 	vmov	d0, r2, r3
 800d9c6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d9ca:	f001 fceb 	bl	800f3a4 <fabs>
 800d9ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d9d2:	ec51 0b10 	vmov	r0, r1, d0
 800d9d6:	f1b8 0f00 	cmp.w	r8, #0
 800d9da:	d12a      	bne.n	800da32 <__ieee754_pow+0x1ca>
 800d9dc:	b12c      	cbz	r4, 800d9ea <__ieee754_pow+0x182>
 800d9de:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800da94 <__ieee754_pow+0x22c>
 800d9e2:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800d9e6:	45e6      	cmp	lr, ip
 800d9e8:	d123      	bne.n	800da32 <__ieee754_pow+0x1ca>
 800d9ea:	2f00      	cmp	r7, #0
 800d9ec:	da05      	bge.n	800d9fa <__ieee754_pow+0x192>
 800d9ee:	4602      	mov	r2, r0
 800d9f0:	460b      	mov	r3, r1
 800d9f2:	2000      	movs	r0, #0
 800d9f4:	4927      	ldr	r1, [pc, #156]	; (800da94 <__ieee754_pow+0x22c>)
 800d9f6:	f7f2 ff41 	bl	800087c <__aeabi_ddiv>
 800d9fa:	f1b9 0f00 	cmp.w	r9, #0
 800d9fe:	dab7      	bge.n	800d970 <__ieee754_pow+0x108>
 800da00:	9b00      	ldr	r3, [sp, #0]
 800da02:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800da06:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800da0a:	4323      	orrs	r3, r4
 800da0c:	d108      	bne.n	800da20 <__ieee754_pow+0x1b8>
 800da0e:	4602      	mov	r2, r0
 800da10:	460b      	mov	r3, r1
 800da12:	4610      	mov	r0, r2
 800da14:	4619      	mov	r1, r3
 800da16:	f7f2 fc4f 	bl	80002b8 <__aeabi_dsub>
 800da1a:	4602      	mov	r2, r0
 800da1c:	460b      	mov	r3, r1
 800da1e:	e78d      	b.n	800d93c <__ieee754_pow+0xd4>
 800da20:	9b00      	ldr	r3, [sp, #0]
 800da22:	2b01      	cmp	r3, #1
 800da24:	d1a4      	bne.n	800d970 <__ieee754_pow+0x108>
 800da26:	4602      	mov	r2, r0
 800da28:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800da2c:	4610      	mov	r0, r2
 800da2e:	4619      	mov	r1, r3
 800da30:	e79e      	b.n	800d970 <__ieee754_pow+0x108>
 800da32:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800da36:	f10c 35ff 	add.w	r5, ip, #4294967295
 800da3a:	950a      	str	r5, [sp, #40]	; 0x28
 800da3c:	9d00      	ldr	r5, [sp, #0]
 800da3e:	46ac      	mov	ip, r5
 800da40:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800da42:	ea5c 0505 	orrs.w	r5, ip, r5
 800da46:	d0e4      	beq.n	800da12 <__ieee754_pow+0x1aa>
 800da48:	4b15      	ldr	r3, [pc, #84]	; (800daa0 <__ieee754_pow+0x238>)
 800da4a:	429e      	cmp	r6, r3
 800da4c:	f340 80fc 	ble.w	800dc48 <__ieee754_pow+0x3e0>
 800da50:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800da54:	429e      	cmp	r6, r3
 800da56:	4b10      	ldr	r3, [pc, #64]	; (800da98 <__ieee754_pow+0x230>)
 800da58:	dd07      	ble.n	800da6a <__ieee754_pow+0x202>
 800da5a:	429c      	cmp	r4, r3
 800da5c:	dc0a      	bgt.n	800da74 <__ieee754_pow+0x20c>
 800da5e:	2f00      	cmp	r7, #0
 800da60:	da84      	bge.n	800d96c <__ieee754_pow+0x104>
 800da62:	a307      	add	r3, pc, #28	; (adr r3, 800da80 <__ieee754_pow+0x218>)
 800da64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da68:	e795      	b.n	800d996 <__ieee754_pow+0x12e>
 800da6a:	429c      	cmp	r4, r3
 800da6c:	dbf7      	blt.n	800da5e <__ieee754_pow+0x1f6>
 800da6e:	4b09      	ldr	r3, [pc, #36]	; (800da94 <__ieee754_pow+0x22c>)
 800da70:	429c      	cmp	r4, r3
 800da72:	dd17      	ble.n	800daa4 <__ieee754_pow+0x23c>
 800da74:	2f00      	cmp	r7, #0
 800da76:	dcf4      	bgt.n	800da62 <__ieee754_pow+0x1fa>
 800da78:	e778      	b.n	800d96c <__ieee754_pow+0x104>
 800da7a:	bf00      	nop
 800da7c:	f3af 8000 	nop.w
 800da80:	8800759c 	.word	0x8800759c
 800da84:	7e37e43c 	.word	0x7e37e43c
 800da88:	7ff00000 	.word	0x7ff00000
 800da8c:	0803303d 	.word	0x0803303d
 800da90:	433fffff 	.word	0x433fffff
 800da94:	3ff00000 	.word	0x3ff00000
 800da98:	3fefffff 	.word	0x3fefffff
 800da9c:	3fe00000 	.word	0x3fe00000
 800daa0:	41e00000 	.word	0x41e00000
 800daa4:	4b64      	ldr	r3, [pc, #400]	; (800dc38 <__ieee754_pow+0x3d0>)
 800daa6:	2200      	movs	r2, #0
 800daa8:	f7f2 fc06 	bl	80002b8 <__aeabi_dsub>
 800daac:	a356      	add	r3, pc, #344	; (adr r3, 800dc08 <__ieee754_pow+0x3a0>)
 800daae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dab2:	4604      	mov	r4, r0
 800dab4:	460d      	mov	r5, r1
 800dab6:	f7f2 fdb7 	bl	8000628 <__aeabi_dmul>
 800daba:	a355      	add	r3, pc, #340	; (adr r3, 800dc10 <__ieee754_pow+0x3a8>)
 800dabc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dac0:	4606      	mov	r6, r0
 800dac2:	460f      	mov	r7, r1
 800dac4:	4620      	mov	r0, r4
 800dac6:	4629      	mov	r1, r5
 800dac8:	f7f2 fdae 	bl	8000628 <__aeabi_dmul>
 800dacc:	4b5b      	ldr	r3, [pc, #364]	; (800dc3c <__ieee754_pow+0x3d4>)
 800dace:	4682      	mov	sl, r0
 800dad0:	468b      	mov	fp, r1
 800dad2:	2200      	movs	r2, #0
 800dad4:	4620      	mov	r0, r4
 800dad6:	4629      	mov	r1, r5
 800dad8:	f7f2 fda6 	bl	8000628 <__aeabi_dmul>
 800dadc:	4602      	mov	r2, r0
 800dade:	460b      	mov	r3, r1
 800dae0:	a14d      	add	r1, pc, #308	; (adr r1, 800dc18 <__ieee754_pow+0x3b0>)
 800dae2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dae6:	f7f2 fbe7 	bl	80002b8 <__aeabi_dsub>
 800daea:	4622      	mov	r2, r4
 800daec:	462b      	mov	r3, r5
 800daee:	f7f2 fd9b 	bl	8000628 <__aeabi_dmul>
 800daf2:	4602      	mov	r2, r0
 800daf4:	460b      	mov	r3, r1
 800daf6:	2000      	movs	r0, #0
 800daf8:	4951      	ldr	r1, [pc, #324]	; (800dc40 <__ieee754_pow+0x3d8>)
 800dafa:	f7f2 fbdd 	bl	80002b8 <__aeabi_dsub>
 800dafe:	4622      	mov	r2, r4
 800db00:	4680      	mov	r8, r0
 800db02:	4689      	mov	r9, r1
 800db04:	462b      	mov	r3, r5
 800db06:	4620      	mov	r0, r4
 800db08:	4629      	mov	r1, r5
 800db0a:	f7f2 fd8d 	bl	8000628 <__aeabi_dmul>
 800db0e:	4602      	mov	r2, r0
 800db10:	460b      	mov	r3, r1
 800db12:	4640      	mov	r0, r8
 800db14:	4649      	mov	r1, r9
 800db16:	f7f2 fd87 	bl	8000628 <__aeabi_dmul>
 800db1a:	a341      	add	r3, pc, #260	; (adr r3, 800dc20 <__ieee754_pow+0x3b8>)
 800db1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db20:	f7f2 fd82 	bl	8000628 <__aeabi_dmul>
 800db24:	4602      	mov	r2, r0
 800db26:	460b      	mov	r3, r1
 800db28:	4650      	mov	r0, sl
 800db2a:	4659      	mov	r1, fp
 800db2c:	f7f2 fbc4 	bl	80002b8 <__aeabi_dsub>
 800db30:	4602      	mov	r2, r0
 800db32:	460b      	mov	r3, r1
 800db34:	4680      	mov	r8, r0
 800db36:	4689      	mov	r9, r1
 800db38:	4630      	mov	r0, r6
 800db3a:	4639      	mov	r1, r7
 800db3c:	f7f2 fbbe 	bl	80002bc <__adddf3>
 800db40:	2400      	movs	r4, #0
 800db42:	4632      	mov	r2, r6
 800db44:	463b      	mov	r3, r7
 800db46:	4620      	mov	r0, r4
 800db48:	460d      	mov	r5, r1
 800db4a:	f7f2 fbb5 	bl	80002b8 <__aeabi_dsub>
 800db4e:	4602      	mov	r2, r0
 800db50:	460b      	mov	r3, r1
 800db52:	4640      	mov	r0, r8
 800db54:	4649      	mov	r1, r9
 800db56:	f7f2 fbaf 	bl	80002b8 <__aeabi_dsub>
 800db5a:	9b00      	ldr	r3, [sp, #0]
 800db5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800db5e:	3b01      	subs	r3, #1
 800db60:	4313      	orrs	r3, r2
 800db62:	4682      	mov	sl, r0
 800db64:	468b      	mov	fp, r1
 800db66:	f040 81f1 	bne.w	800df4c <__ieee754_pow+0x6e4>
 800db6a:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800dc28 <__ieee754_pow+0x3c0>
 800db6e:	eeb0 8a47 	vmov.f32	s16, s14
 800db72:	eef0 8a67 	vmov.f32	s17, s15
 800db76:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800db7a:	2600      	movs	r6, #0
 800db7c:	4632      	mov	r2, r6
 800db7e:	463b      	mov	r3, r7
 800db80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800db84:	f7f2 fb98 	bl	80002b8 <__aeabi_dsub>
 800db88:	4622      	mov	r2, r4
 800db8a:	462b      	mov	r3, r5
 800db8c:	f7f2 fd4c 	bl	8000628 <__aeabi_dmul>
 800db90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800db94:	4680      	mov	r8, r0
 800db96:	4689      	mov	r9, r1
 800db98:	4650      	mov	r0, sl
 800db9a:	4659      	mov	r1, fp
 800db9c:	f7f2 fd44 	bl	8000628 <__aeabi_dmul>
 800dba0:	4602      	mov	r2, r0
 800dba2:	460b      	mov	r3, r1
 800dba4:	4640      	mov	r0, r8
 800dba6:	4649      	mov	r1, r9
 800dba8:	f7f2 fb88 	bl	80002bc <__adddf3>
 800dbac:	4632      	mov	r2, r6
 800dbae:	463b      	mov	r3, r7
 800dbb0:	4680      	mov	r8, r0
 800dbb2:	4689      	mov	r9, r1
 800dbb4:	4620      	mov	r0, r4
 800dbb6:	4629      	mov	r1, r5
 800dbb8:	f7f2 fd36 	bl	8000628 <__aeabi_dmul>
 800dbbc:	460b      	mov	r3, r1
 800dbbe:	4604      	mov	r4, r0
 800dbc0:	460d      	mov	r5, r1
 800dbc2:	4602      	mov	r2, r0
 800dbc4:	4649      	mov	r1, r9
 800dbc6:	4640      	mov	r0, r8
 800dbc8:	f7f2 fb78 	bl	80002bc <__adddf3>
 800dbcc:	4b1d      	ldr	r3, [pc, #116]	; (800dc44 <__ieee754_pow+0x3dc>)
 800dbce:	4299      	cmp	r1, r3
 800dbd0:	ec45 4b19 	vmov	d9, r4, r5
 800dbd4:	4606      	mov	r6, r0
 800dbd6:	460f      	mov	r7, r1
 800dbd8:	468b      	mov	fp, r1
 800dbda:	f340 82fe 	ble.w	800e1da <__ieee754_pow+0x972>
 800dbde:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800dbe2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800dbe6:	4303      	orrs	r3, r0
 800dbe8:	f000 81f0 	beq.w	800dfcc <__ieee754_pow+0x764>
 800dbec:	a310      	add	r3, pc, #64	; (adr r3, 800dc30 <__ieee754_pow+0x3c8>)
 800dbee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbf2:	ec51 0b18 	vmov	r0, r1, d8
 800dbf6:	f7f2 fd17 	bl	8000628 <__aeabi_dmul>
 800dbfa:	a30d      	add	r3, pc, #52	; (adr r3, 800dc30 <__ieee754_pow+0x3c8>)
 800dbfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc00:	e6cb      	b.n	800d99a <__ieee754_pow+0x132>
 800dc02:	bf00      	nop
 800dc04:	f3af 8000 	nop.w
 800dc08:	60000000 	.word	0x60000000
 800dc0c:	3ff71547 	.word	0x3ff71547
 800dc10:	f85ddf44 	.word	0xf85ddf44
 800dc14:	3e54ae0b 	.word	0x3e54ae0b
 800dc18:	55555555 	.word	0x55555555
 800dc1c:	3fd55555 	.word	0x3fd55555
 800dc20:	652b82fe 	.word	0x652b82fe
 800dc24:	3ff71547 	.word	0x3ff71547
 800dc28:	00000000 	.word	0x00000000
 800dc2c:	bff00000 	.word	0xbff00000
 800dc30:	8800759c 	.word	0x8800759c
 800dc34:	7e37e43c 	.word	0x7e37e43c
 800dc38:	3ff00000 	.word	0x3ff00000
 800dc3c:	3fd00000 	.word	0x3fd00000
 800dc40:	3fe00000 	.word	0x3fe00000
 800dc44:	408fffff 	.word	0x408fffff
 800dc48:	4bd7      	ldr	r3, [pc, #860]	; (800dfa8 <__ieee754_pow+0x740>)
 800dc4a:	ea03 0309 	and.w	r3, r3, r9
 800dc4e:	2200      	movs	r2, #0
 800dc50:	b92b      	cbnz	r3, 800dc5e <__ieee754_pow+0x3f6>
 800dc52:	4bd6      	ldr	r3, [pc, #856]	; (800dfac <__ieee754_pow+0x744>)
 800dc54:	f7f2 fce8 	bl	8000628 <__aeabi_dmul>
 800dc58:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800dc5c:	460c      	mov	r4, r1
 800dc5e:	1523      	asrs	r3, r4, #20
 800dc60:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800dc64:	4413      	add	r3, r2
 800dc66:	9309      	str	r3, [sp, #36]	; 0x24
 800dc68:	4bd1      	ldr	r3, [pc, #836]	; (800dfb0 <__ieee754_pow+0x748>)
 800dc6a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800dc6e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800dc72:	429c      	cmp	r4, r3
 800dc74:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800dc78:	dd08      	ble.n	800dc8c <__ieee754_pow+0x424>
 800dc7a:	4bce      	ldr	r3, [pc, #824]	; (800dfb4 <__ieee754_pow+0x74c>)
 800dc7c:	429c      	cmp	r4, r3
 800dc7e:	f340 8163 	ble.w	800df48 <__ieee754_pow+0x6e0>
 800dc82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc84:	3301      	adds	r3, #1
 800dc86:	9309      	str	r3, [sp, #36]	; 0x24
 800dc88:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800dc8c:	2400      	movs	r4, #0
 800dc8e:	00e3      	lsls	r3, r4, #3
 800dc90:	930b      	str	r3, [sp, #44]	; 0x2c
 800dc92:	4bc9      	ldr	r3, [pc, #804]	; (800dfb8 <__ieee754_pow+0x750>)
 800dc94:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800dc98:	ed93 7b00 	vldr	d7, [r3]
 800dc9c:	4629      	mov	r1, r5
 800dc9e:	ec53 2b17 	vmov	r2, r3, d7
 800dca2:	eeb0 8a47 	vmov.f32	s16, s14
 800dca6:	eef0 8a67 	vmov.f32	s17, s15
 800dcaa:	4682      	mov	sl, r0
 800dcac:	f7f2 fb04 	bl	80002b8 <__aeabi_dsub>
 800dcb0:	4652      	mov	r2, sl
 800dcb2:	4606      	mov	r6, r0
 800dcb4:	460f      	mov	r7, r1
 800dcb6:	462b      	mov	r3, r5
 800dcb8:	ec51 0b18 	vmov	r0, r1, d8
 800dcbc:	f7f2 fafe 	bl	80002bc <__adddf3>
 800dcc0:	4602      	mov	r2, r0
 800dcc2:	460b      	mov	r3, r1
 800dcc4:	2000      	movs	r0, #0
 800dcc6:	49bd      	ldr	r1, [pc, #756]	; (800dfbc <__ieee754_pow+0x754>)
 800dcc8:	f7f2 fdd8 	bl	800087c <__aeabi_ddiv>
 800dccc:	ec41 0b19 	vmov	d9, r0, r1
 800dcd0:	4602      	mov	r2, r0
 800dcd2:	460b      	mov	r3, r1
 800dcd4:	4630      	mov	r0, r6
 800dcd6:	4639      	mov	r1, r7
 800dcd8:	f7f2 fca6 	bl	8000628 <__aeabi_dmul>
 800dcdc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800dce0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800dce4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800dce8:	2300      	movs	r3, #0
 800dcea:	9304      	str	r3, [sp, #16]
 800dcec:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800dcf0:	46ab      	mov	fp, r5
 800dcf2:	106d      	asrs	r5, r5, #1
 800dcf4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800dcf8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800dcfc:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800dd00:	2200      	movs	r2, #0
 800dd02:	4640      	mov	r0, r8
 800dd04:	4649      	mov	r1, r9
 800dd06:	4614      	mov	r4, r2
 800dd08:	461d      	mov	r5, r3
 800dd0a:	f7f2 fc8d 	bl	8000628 <__aeabi_dmul>
 800dd0e:	4602      	mov	r2, r0
 800dd10:	460b      	mov	r3, r1
 800dd12:	4630      	mov	r0, r6
 800dd14:	4639      	mov	r1, r7
 800dd16:	f7f2 facf 	bl	80002b8 <__aeabi_dsub>
 800dd1a:	ec53 2b18 	vmov	r2, r3, d8
 800dd1e:	4606      	mov	r6, r0
 800dd20:	460f      	mov	r7, r1
 800dd22:	4620      	mov	r0, r4
 800dd24:	4629      	mov	r1, r5
 800dd26:	f7f2 fac7 	bl	80002b8 <__aeabi_dsub>
 800dd2a:	4602      	mov	r2, r0
 800dd2c:	460b      	mov	r3, r1
 800dd2e:	4650      	mov	r0, sl
 800dd30:	4659      	mov	r1, fp
 800dd32:	f7f2 fac1 	bl	80002b8 <__aeabi_dsub>
 800dd36:	4642      	mov	r2, r8
 800dd38:	464b      	mov	r3, r9
 800dd3a:	f7f2 fc75 	bl	8000628 <__aeabi_dmul>
 800dd3e:	4602      	mov	r2, r0
 800dd40:	460b      	mov	r3, r1
 800dd42:	4630      	mov	r0, r6
 800dd44:	4639      	mov	r1, r7
 800dd46:	f7f2 fab7 	bl	80002b8 <__aeabi_dsub>
 800dd4a:	ec53 2b19 	vmov	r2, r3, d9
 800dd4e:	f7f2 fc6b 	bl	8000628 <__aeabi_dmul>
 800dd52:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800dd56:	ec41 0b18 	vmov	d8, r0, r1
 800dd5a:	4610      	mov	r0, r2
 800dd5c:	4619      	mov	r1, r3
 800dd5e:	f7f2 fc63 	bl	8000628 <__aeabi_dmul>
 800dd62:	a37d      	add	r3, pc, #500	; (adr r3, 800df58 <__ieee754_pow+0x6f0>)
 800dd64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd68:	4604      	mov	r4, r0
 800dd6a:	460d      	mov	r5, r1
 800dd6c:	f7f2 fc5c 	bl	8000628 <__aeabi_dmul>
 800dd70:	a37b      	add	r3, pc, #492	; (adr r3, 800df60 <__ieee754_pow+0x6f8>)
 800dd72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd76:	f7f2 faa1 	bl	80002bc <__adddf3>
 800dd7a:	4622      	mov	r2, r4
 800dd7c:	462b      	mov	r3, r5
 800dd7e:	f7f2 fc53 	bl	8000628 <__aeabi_dmul>
 800dd82:	a379      	add	r3, pc, #484	; (adr r3, 800df68 <__ieee754_pow+0x700>)
 800dd84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd88:	f7f2 fa98 	bl	80002bc <__adddf3>
 800dd8c:	4622      	mov	r2, r4
 800dd8e:	462b      	mov	r3, r5
 800dd90:	f7f2 fc4a 	bl	8000628 <__aeabi_dmul>
 800dd94:	a376      	add	r3, pc, #472	; (adr r3, 800df70 <__ieee754_pow+0x708>)
 800dd96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd9a:	f7f2 fa8f 	bl	80002bc <__adddf3>
 800dd9e:	4622      	mov	r2, r4
 800dda0:	462b      	mov	r3, r5
 800dda2:	f7f2 fc41 	bl	8000628 <__aeabi_dmul>
 800dda6:	a374      	add	r3, pc, #464	; (adr r3, 800df78 <__ieee754_pow+0x710>)
 800dda8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddac:	f7f2 fa86 	bl	80002bc <__adddf3>
 800ddb0:	4622      	mov	r2, r4
 800ddb2:	462b      	mov	r3, r5
 800ddb4:	f7f2 fc38 	bl	8000628 <__aeabi_dmul>
 800ddb8:	a371      	add	r3, pc, #452	; (adr r3, 800df80 <__ieee754_pow+0x718>)
 800ddba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddbe:	f7f2 fa7d 	bl	80002bc <__adddf3>
 800ddc2:	4622      	mov	r2, r4
 800ddc4:	4606      	mov	r6, r0
 800ddc6:	460f      	mov	r7, r1
 800ddc8:	462b      	mov	r3, r5
 800ddca:	4620      	mov	r0, r4
 800ddcc:	4629      	mov	r1, r5
 800ddce:	f7f2 fc2b 	bl	8000628 <__aeabi_dmul>
 800ddd2:	4602      	mov	r2, r0
 800ddd4:	460b      	mov	r3, r1
 800ddd6:	4630      	mov	r0, r6
 800ddd8:	4639      	mov	r1, r7
 800ddda:	f7f2 fc25 	bl	8000628 <__aeabi_dmul>
 800ddde:	4642      	mov	r2, r8
 800dde0:	4604      	mov	r4, r0
 800dde2:	460d      	mov	r5, r1
 800dde4:	464b      	mov	r3, r9
 800dde6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ddea:	f7f2 fa67 	bl	80002bc <__adddf3>
 800ddee:	ec53 2b18 	vmov	r2, r3, d8
 800ddf2:	f7f2 fc19 	bl	8000628 <__aeabi_dmul>
 800ddf6:	4622      	mov	r2, r4
 800ddf8:	462b      	mov	r3, r5
 800ddfa:	f7f2 fa5f 	bl	80002bc <__adddf3>
 800ddfe:	4642      	mov	r2, r8
 800de00:	4682      	mov	sl, r0
 800de02:	468b      	mov	fp, r1
 800de04:	464b      	mov	r3, r9
 800de06:	4640      	mov	r0, r8
 800de08:	4649      	mov	r1, r9
 800de0a:	f7f2 fc0d 	bl	8000628 <__aeabi_dmul>
 800de0e:	4b6c      	ldr	r3, [pc, #432]	; (800dfc0 <__ieee754_pow+0x758>)
 800de10:	2200      	movs	r2, #0
 800de12:	4606      	mov	r6, r0
 800de14:	460f      	mov	r7, r1
 800de16:	f7f2 fa51 	bl	80002bc <__adddf3>
 800de1a:	4652      	mov	r2, sl
 800de1c:	465b      	mov	r3, fp
 800de1e:	f7f2 fa4d 	bl	80002bc <__adddf3>
 800de22:	9c04      	ldr	r4, [sp, #16]
 800de24:	460d      	mov	r5, r1
 800de26:	4622      	mov	r2, r4
 800de28:	460b      	mov	r3, r1
 800de2a:	4640      	mov	r0, r8
 800de2c:	4649      	mov	r1, r9
 800de2e:	f7f2 fbfb 	bl	8000628 <__aeabi_dmul>
 800de32:	4b63      	ldr	r3, [pc, #396]	; (800dfc0 <__ieee754_pow+0x758>)
 800de34:	4680      	mov	r8, r0
 800de36:	4689      	mov	r9, r1
 800de38:	2200      	movs	r2, #0
 800de3a:	4620      	mov	r0, r4
 800de3c:	4629      	mov	r1, r5
 800de3e:	f7f2 fa3b 	bl	80002b8 <__aeabi_dsub>
 800de42:	4632      	mov	r2, r6
 800de44:	463b      	mov	r3, r7
 800de46:	f7f2 fa37 	bl	80002b8 <__aeabi_dsub>
 800de4a:	4602      	mov	r2, r0
 800de4c:	460b      	mov	r3, r1
 800de4e:	4650      	mov	r0, sl
 800de50:	4659      	mov	r1, fp
 800de52:	f7f2 fa31 	bl	80002b8 <__aeabi_dsub>
 800de56:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800de5a:	f7f2 fbe5 	bl	8000628 <__aeabi_dmul>
 800de5e:	4622      	mov	r2, r4
 800de60:	4606      	mov	r6, r0
 800de62:	460f      	mov	r7, r1
 800de64:	462b      	mov	r3, r5
 800de66:	ec51 0b18 	vmov	r0, r1, d8
 800de6a:	f7f2 fbdd 	bl	8000628 <__aeabi_dmul>
 800de6e:	4602      	mov	r2, r0
 800de70:	460b      	mov	r3, r1
 800de72:	4630      	mov	r0, r6
 800de74:	4639      	mov	r1, r7
 800de76:	f7f2 fa21 	bl	80002bc <__adddf3>
 800de7a:	4606      	mov	r6, r0
 800de7c:	460f      	mov	r7, r1
 800de7e:	4602      	mov	r2, r0
 800de80:	460b      	mov	r3, r1
 800de82:	4640      	mov	r0, r8
 800de84:	4649      	mov	r1, r9
 800de86:	f7f2 fa19 	bl	80002bc <__adddf3>
 800de8a:	9c04      	ldr	r4, [sp, #16]
 800de8c:	a33e      	add	r3, pc, #248	; (adr r3, 800df88 <__ieee754_pow+0x720>)
 800de8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de92:	4620      	mov	r0, r4
 800de94:	460d      	mov	r5, r1
 800de96:	f7f2 fbc7 	bl	8000628 <__aeabi_dmul>
 800de9a:	4642      	mov	r2, r8
 800de9c:	ec41 0b18 	vmov	d8, r0, r1
 800dea0:	464b      	mov	r3, r9
 800dea2:	4620      	mov	r0, r4
 800dea4:	4629      	mov	r1, r5
 800dea6:	f7f2 fa07 	bl	80002b8 <__aeabi_dsub>
 800deaa:	4602      	mov	r2, r0
 800deac:	460b      	mov	r3, r1
 800deae:	4630      	mov	r0, r6
 800deb0:	4639      	mov	r1, r7
 800deb2:	f7f2 fa01 	bl	80002b8 <__aeabi_dsub>
 800deb6:	a336      	add	r3, pc, #216	; (adr r3, 800df90 <__ieee754_pow+0x728>)
 800deb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800debc:	f7f2 fbb4 	bl	8000628 <__aeabi_dmul>
 800dec0:	a335      	add	r3, pc, #212	; (adr r3, 800df98 <__ieee754_pow+0x730>)
 800dec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dec6:	4606      	mov	r6, r0
 800dec8:	460f      	mov	r7, r1
 800deca:	4620      	mov	r0, r4
 800decc:	4629      	mov	r1, r5
 800dece:	f7f2 fbab 	bl	8000628 <__aeabi_dmul>
 800ded2:	4602      	mov	r2, r0
 800ded4:	460b      	mov	r3, r1
 800ded6:	4630      	mov	r0, r6
 800ded8:	4639      	mov	r1, r7
 800deda:	f7f2 f9ef 	bl	80002bc <__adddf3>
 800dede:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800dee0:	4b38      	ldr	r3, [pc, #224]	; (800dfc4 <__ieee754_pow+0x75c>)
 800dee2:	4413      	add	r3, r2
 800dee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dee8:	f7f2 f9e8 	bl	80002bc <__adddf3>
 800deec:	4682      	mov	sl, r0
 800deee:	9809      	ldr	r0, [sp, #36]	; 0x24
 800def0:	468b      	mov	fp, r1
 800def2:	f7f2 fb2f 	bl	8000554 <__aeabi_i2d>
 800def6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800def8:	4b33      	ldr	r3, [pc, #204]	; (800dfc8 <__ieee754_pow+0x760>)
 800defa:	4413      	add	r3, r2
 800defc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800df00:	4606      	mov	r6, r0
 800df02:	460f      	mov	r7, r1
 800df04:	4652      	mov	r2, sl
 800df06:	465b      	mov	r3, fp
 800df08:	ec51 0b18 	vmov	r0, r1, d8
 800df0c:	f7f2 f9d6 	bl	80002bc <__adddf3>
 800df10:	4642      	mov	r2, r8
 800df12:	464b      	mov	r3, r9
 800df14:	f7f2 f9d2 	bl	80002bc <__adddf3>
 800df18:	4632      	mov	r2, r6
 800df1a:	463b      	mov	r3, r7
 800df1c:	f7f2 f9ce 	bl	80002bc <__adddf3>
 800df20:	9c04      	ldr	r4, [sp, #16]
 800df22:	4632      	mov	r2, r6
 800df24:	463b      	mov	r3, r7
 800df26:	4620      	mov	r0, r4
 800df28:	460d      	mov	r5, r1
 800df2a:	f7f2 f9c5 	bl	80002b8 <__aeabi_dsub>
 800df2e:	4642      	mov	r2, r8
 800df30:	464b      	mov	r3, r9
 800df32:	f7f2 f9c1 	bl	80002b8 <__aeabi_dsub>
 800df36:	ec53 2b18 	vmov	r2, r3, d8
 800df3a:	f7f2 f9bd 	bl	80002b8 <__aeabi_dsub>
 800df3e:	4602      	mov	r2, r0
 800df40:	460b      	mov	r3, r1
 800df42:	4650      	mov	r0, sl
 800df44:	4659      	mov	r1, fp
 800df46:	e606      	b.n	800db56 <__ieee754_pow+0x2ee>
 800df48:	2401      	movs	r4, #1
 800df4a:	e6a0      	b.n	800dc8e <__ieee754_pow+0x426>
 800df4c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800dfa0 <__ieee754_pow+0x738>
 800df50:	e60d      	b.n	800db6e <__ieee754_pow+0x306>
 800df52:	bf00      	nop
 800df54:	f3af 8000 	nop.w
 800df58:	4a454eef 	.word	0x4a454eef
 800df5c:	3fca7e28 	.word	0x3fca7e28
 800df60:	93c9db65 	.word	0x93c9db65
 800df64:	3fcd864a 	.word	0x3fcd864a
 800df68:	a91d4101 	.word	0xa91d4101
 800df6c:	3fd17460 	.word	0x3fd17460
 800df70:	518f264d 	.word	0x518f264d
 800df74:	3fd55555 	.word	0x3fd55555
 800df78:	db6fabff 	.word	0xdb6fabff
 800df7c:	3fdb6db6 	.word	0x3fdb6db6
 800df80:	33333303 	.word	0x33333303
 800df84:	3fe33333 	.word	0x3fe33333
 800df88:	e0000000 	.word	0xe0000000
 800df8c:	3feec709 	.word	0x3feec709
 800df90:	dc3a03fd 	.word	0xdc3a03fd
 800df94:	3feec709 	.word	0x3feec709
 800df98:	145b01f5 	.word	0x145b01f5
 800df9c:	be3e2fe0 	.word	0xbe3e2fe0
 800dfa0:	00000000 	.word	0x00000000
 800dfa4:	3ff00000 	.word	0x3ff00000
 800dfa8:	7ff00000 	.word	0x7ff00000
 800dfac:	43400000 	.word	0x43400000
 800dfb0:	0003988e 	.word	0x0003988e
 800dfb4:	000bb679 	.word	0x000bb679
 800dfb8:	08032e20 	.word	0x08032e20
 800dfbc:	3ff00000 	.word	0x3ff00000
 800dfc0:	40080000 	.word	0x40080000
 800dfc4:	08032e40 	.word	0x08032e40
 800dfc8:	08032e30 	.word	0x08032e30
 800dfcc:	a3b5      	add	r3, pc, #724	; (adr r3, 800e2a4 <__ieee754_pow+0xa3c>)
 800dfce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfd2:	4640      	mov	r0, r8
 800dfd4:	4649      	mov	r1, r9
 800dfd6:	f7f2 f971 	bl	80002bc <__adddf3>
 800dfda:	4622      	mov	r2, r4
 800dfdc:	ec41 0b1a 	vmov	d10, r0, r1
 800dfe0:	462b      	mov	r3, r5
 800dfe2:	4630      	mov	r0, r6
 800dfe4:	4639      	mov	r1, r7
 800dfe6:	f7f2 f967 	bl	80002b8 <__aeabi_dsub>
 800dfea:	4602      	mov	r2, r0
 800dfec:	460b      	mov	r3, r1
 800dfee:	ec51 0b1a 	vmov	r0, r1, d10
 800dff2:	f7f2 fda9 	bl	8000b48 <__aeabi_dcmpgt>
 800dff6:	2800      	cmp	r0, #0
 800dff8:	f47f adf8 	bne.w	800dbec <__ieee754_pow+0x384>
 800dffc:	4aa4      	ldr	r2, [pc, #656]	; (800e290 <__ieee754_pow+0xa28>)
 800dffe:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e002:	4293      	cmp	r3, r2
 800e004:	f340 810b 	ble.w	800e21e <__ieee754_pow+0x9b6>
 800e008:	151b      	asrs	r3, r3, #20
 800e00a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800e00e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800e012:	fa4a f303 	asr.w	r3, sl, r3
 800e016:	445b      	add	r3, fp
 800e018:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800e01c:	4e9d      	ldr	r6, [pc, #628]	; (800e294 <__ieee754_pow+0xa2c>)
 800e01e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800e022:	4116      	asrs	r6, r2
 800e024:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800e028:	2000      	movs	r0, #0
 800e02a:	ea23 0106 	bic.w	r1, r3, r6
 800e02e:	f1c2 0214 	rsb	r2, r2, #20
 800e032:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800e036:	fa4a fa02 	asr.w	sl, sl, r2
 800e03a:	f1bb 0f00 	cmp.w	fp, #0
 800e03e:	4602      	mov	r2, r0
 800e040:	460b      	mov	r3, r1
 800e042:	4620      	mov	r0, r4
 800e044:	4629      	mov	r1, r5
 800e046:	bfb8      	it	lt
 800e048:	f1ca 0a00 	rsblt	sl, sl, #0
 800e04c:	f7f2 f934 	bl	80002b8 <__aeabi_dsub>
 800e050:	ec41 0b19 	vmov	d9, r0, r1
 800e054:	4642      	mov	r2, r8
 800e056:	464b      	mov	r3, r9
 800e058:	ec51 0b19 	vmov	r0, r1, d9
 800e05c:	f7f2 f92e 	bl	80002bc <__adddf3>
 800e060:	2400      	movs	r4, #0
 800e062:	a379      	add	r3, pc, #484	; (adr r3, 800e248 <__ieee754_pow+0x9e0>)
 800e064:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e068:	4620      	mov	r0, r4
 800e06a:	460d      	mov	r5, r1
 800e06c:	f7f2 fadc 	bl	8000628 <__aeabi_dmul>
 800e070:	ec53 2b19 	vmov	r2, r3, d9
 800e074:	4606      	mov	r6, r0
 800e076:	460f      	mov	r7, r1
 800e078:	4620      	mov	r0, r4
 800e07a:	4629      	mov	r1, r5
 800e07c:	f7f2 f91c 	bl	80002b8 <__aeabi_dsub>
 800e080:	4602      	mov	r2, r0
 800e082:	460b      	mov	r3, r1
 800e084:	4640      	mov	r0, r8
 800e086:	4649      	mov	r1, r9
 800e088:	f7f2 f916 	bl	80002b8 <__aeabi_dsub>
 800e08c:	a370      	add	r3, pc, #448	; (adr r3, 800e250 <__ieee754_pow+0x9e8>)
 800e08e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e092:	f7f2 fac9 	bl	8000628 <__aeabi_dmul>
 800e096:	a370      	add	r3, pc, #448	; (adr r3, 800e258 <__ieee754_pow+0x9f0>)
 800e098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e09c:	4680      	mov	r8, r0
 800e09e:	4689      	mov	r9, r1
 800e0a0:	4620      	mov	r0, r4
 800e0a2:	4629      	mov	r1, r5
 800e0a4:	f7f2 fac0 	bl	8000628 <__aeabi_dmul>
 800e0a8:	4602      	mov	r2, r0
 800e0aa:	460b      	mov	r3, r1
 800e0ac:	4640      	mov	r0, r8
 800e0ae:	4649      	mov	r1, r9
 800e0b0:	f7f2 f904 	bl	80002bc <__adddf3>
 800e0b4:	4604      	mov	r4, r0
 800e0b6:	460d      	mov	r5, r1
 800e0b8:	4602      	mov	r2, r0
 800e0ba:	460b      	mov	r3, r1
 800e0bc:	4630      	mov	r0, r6
 800e0be:	4639      	mov	r1, r7
 800e0c0:	f7f2 f8fc 	bl	80002bc <__adddf3>
 800e0c4:	4632      	mov	r2, r6
 800e0c6:	463b      	mov	r3, r7
 800e0c8:	4680      	mov	r8, r0
 800e0ca:	4689      	mov	r9, r1
 800e0cc:	f7f2 f8f4 	bl	80002b8 <__aeabi_dsub>
 800e0d0:	4602      	mov	r2, r0
 800e0d2:	460b      	mov	r3, r1
 800e0d4:	4620      	mov	r0, r4
 800e0d6:	4629      	mov	r1, r5
 800e0d8:	f7f2 f8ee 	bl	80002b8 <__aeabi_dsub>
 800e0dc:	4642      	mov	r2, r8
 800e0de:	4606      	mov	r6, r0
 800e0e0:	460f      	mov	r7, r1
 800e0e2:	464b      	mov	r3, r9
 800e0e4:	4640      	mov	r0, r8
 800e0e6:	4649      	mov	r1, r9
 800e0e8:	f7f2 fa9e 	bl	8000628 <__aeabi_dmul>
 800e0ec:	a35c      	add	r3, pc, #368	; (adr r3, 800e260 <__ieee754_pow+0x9f8>)
 800e0ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0f2:	4604      	mov	r4, r0
 800e0f4:	460d      	mov	r5, r1
 800e0f6:	f7f2 fa97 	bl	8000628 <__aeabi_dmul>
 800e0fa:	a35b      	add	r3, pc, #364	; (adr r3, 800e268 <__ieee754_pow+0xa00>)
 800e0fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e100:	f7f2 f8da 	bl	80002b8 <__aeabi_dsub>
 800e104:	4622      	mov	r2, r4
 800e106:	462b      	mov	r3, r5
 800e108:	f7f2 fa8e 	bl	8000628 <__aeabi_dmul>
 800e10c:	a358      	add	r3, pc, #352	; (adr r3, 800e270 <__ieee754_pow+0xa08>)
 800e10e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e112:	f7f2 f8d3 	bl	80002bc <__adddf3>
 800e116:	4622      	mov	r2, r4
 800e118:	462b      	mov	r3, r5
 800e11a:	f7f2 fa85 	bl	8000628 <__aeabi_dmul>
 800e11e:	a356      	add	r3, pc, #344	; (adr r3, 800e278 <__ieee754_pow+0xa10>)
 800e120:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e124:	f7f2 f8c8 	bl	80002b8 <__aeabi_dsub>
 800e128:	4622      	mov	r2, r4
 800e12a:	462b      	mov	r3, r5
 800e12c:	f7f2 fa7c 	bl	8000628 <__aeabi_dmul>
 800e130:	a353      	add	r3, pc, #332	; (adr r3, 800e280 <__ieee754_pow+0xa18>)
 800e132:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e136:	f7f2 f8c1 	bl	80002bc <__adddf3>
 800e13a:	4622      	mov	r2, r4
 800e13c:	462b      	mov	r3, r5
 800e13e:	f7f2 fa73 	bl	8000628 <__aeabi_dmul>
 800e142:	4602      	mov	r2, r0
 800e144:	460b      	mov	r3, r1
 800e146:	4640      	mov	r0, r8
 800e148:	4649      	mov	r1, r9
 800e14a:	f7f2 f8b5 	bl	80002b8 <__aeabi_dsub>
 800e14e:	4604      	mov	r4, r0
 800e150:	460d      	mov	r5, r1
 800e152:	4602      	mov	r2, r0
 800e154:	460b      	mov	r3, r1
 800e156:	4640      	mov	r0, r8
 800e158:	4649      	mov	r1, r9
 800e15a:	f7f2 fa65 	bl	8000628 <__aeabi_dmul>
 800e15e:	2200      	movs	r2, #0
 800e160:	ec41 0b19 	vmov	d9, r0, r1
 800e164:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e168:	4620      	mov	r0, r4
 800e16a:	4629      	mov	r1, r5
 800e16c:	f7f2 f8a4 	bl	80002b8 <__aeabi_dsub>
 800e170:	4602      	mov	r2, r0
 800e172:	460b      	mov	r3, r1
 800e174:	ec51 0b19 	vmov	r0, r1, d9
 800e178:	f7f2 fb80 	bl	800087c <__aeabi_ddiv>
 800e17c:	4632      	mov	r2, r6
 800e17e:	4604      	mov	r4, r0
 800e180:	460d      	mov	r5, r1
 800e182:	463b      	mov	r3, r7
 800e184:	4640      	mov	r0, r8
 800e186:	4649      	mov	r1, r9
 800e188:	f7f2 fa4e 	bl	8000628 <__aeabi_dmul>
 800e18c:	4632      	mov	r2, r6
 800e18e:	463b      	mov	r3, r7
 800e190:	f7f2 f894 	bl	80002bc <__adddf3>
 800e194:	4602      	mov	r2, r0
 800e196:	460b      	mov	r3, r1
 800e198:	4620      	mov	r0, r4
 800e19a:	4629      	mov	r1, r5
 800e19c:	f7f2 f88c 	bl	80002b8 <__aeabi_dsub>
 800e1a0:	4642      	mov	r2, r8
 800e1a2:	464b      	mov	r3, r9
 800e1a4:	f7f2 f888 	bl	80002b8 <__aeabi_dsub>
 800e1a8:	460b      	mov	r3, r1
 800e1aa:	4602      	mov	r2, r0
 800e1ac:	493a      	ldr	r1, [pc, #232]	; (800e298 <__ieee754_pow+0xa30>)
 800e1ae:	2000      	movs	r0, #0
 800e1b0:	f7f2 f882 	bl	80002b8 <__aeabi_dsub>
 800e1b4:	e9cd 0100 	strd	r0, r1, [sp]
 800e1b8:	9b01      	ldr	r3, [sp, #4]
 800e1ba:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800e1be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e1c2:	da2f      	bge.n	800e224 <__ieee754_pow+0x9bc>
 800e1c4:	4650      	mov	r0, sl
 800e1c6:	ed9d 0b00 	vldr	d0, [sp]
 800e1ca:	f001 fa15 	bl	800f5f8 <scalbn>
 800e1ce:	ec51 0b10 	vmov	r0, r1, d0
 800e1d2:	ec53 2b18 	vmov	r2, r3, d8
 800e1d6:	f7ff bbe0 	b.w	800d99a <__ieee754_pow+0x132>
 800e1da:	4b30      	ldr	r3, [pc, #192]	; (800e29c <__ieee754_pow+0xa34>)
 800e1dc:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800e1e0:	429e      	cmp	r6, r3
 800e1e2:	f77f af0b 	ble.w	800dffc <__ieee754_pow+0x794>
 800e1e6:	4b2e      	ldr	r3, [pc, #184]	; (800e2a0 <__ieee754_pow+0xa38>)
 800e1e8:	440b      	add	r3, r1
 800e1ea:	4303      	orrs	r3, r0
 800e1ec:	d00b      	beq.n	800e206 <__ieee754_pow+0x99e>
 800e1ee:	a326      	add	r3, pc, #152	; (adr r3, 800e288 <__ieee754_pow+0xa20>)
 800e1f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1f4:	ec51 0b18 	vmov	r0, r1, d8
 800e1f8:	f7f2 fa16 	bl	8000628 <__aeabi_dmul>
 800e1fc:	a322      	add	r3, pc, #136	; (adr r3, 800e288 <__ieee754_pow+0xa20>)
 800e1fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e202:	f7ff bbca 	b.w	800d99a <__ieee754_pow+0x132>
 800e206:	4622      	mov	r2, r4
 800e208:	462b      	mov	r3, r5
 800e20a:	f7f2 f855 	bl	80002b8 <__aeabi_dsub>
 800e20e:	4642      	mov	r2, r8
 800e210:	464b      	mov	r3, r9
 800e212:	f7f2 fc8f 	bl	8000b34 <__aeabi_dcmpge>
 800e216:	2800      	cmp	r0, #0
 800e218:	f43f aef0 	beq.w	800dffc <__ieee754_pow+0x794>
 800e21c:	e7e7      	b.n	800e1ee <__ieee754_pow+0x986>
 800e21e:	f04f 0a00 	mov.w	sl, #0
 800e222:	e717      	b.n	800e054 <__ieee754_pow+0x7ec>
 800e224:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e228:	4619      	mov	r1, r3
 800e22a:	e7d2      	b.n	800e1d2 <__ieee754_pow+0x96a>
 800e22c:	491a      	ldr	r1, [pc, #104]	; (800e298 <__ieee754_pow+0xa30>)
 800e22e:	2000      	movs	r0, #0
 800e230:	f7ff bb9e 	b.w	800d970 <__ieee754_pow+0x108>
 800e234:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e238:	f7ff bb9a 	b.w	800d970 <__ieee754_pow+0x108>
 800e23c:	9000      	str	r0, [sp, #0]
 800e23e:	f7ff bb76 	b.w	800d92e <__ieee754_pow+0xc6>
 800e242:	2100      	movs	r1, #0
 800e244:	f7ff bb60 	b.w	800d908 <__ieee754_pow+0xa0>
 800e248:	00000000 	.word	0x00000000
 800e24c:	3fe62e43 	.word	0x3fe62e43
 800e250:	fefa39ef 	.word	0xfefa39ef
 800e254:	3fe62e42 	.word	0x3fe62e42
 800e258:	0ca86c39 	.word	0x0ca86c39
 800e25c:	be205c61 	.word	0xbe205c61
 800e260:	72bea4d0 	.word	0x72bea4d0
 800e264:	3e663769 	.word	0x3e663769
 800e268:	c5d26bf1 	.word	0xc5d26bf1
 800e26c:	3ebbbd41 	.word	0x3ebbbd41
 800e270:	af25de2c 	.word	0xaf25de2c
 800e274:	3f11566a 	.word	0x3f11566a
 800e278:	16bebd93 	.word	0x16bebd93
 800e27c:	3f66c16c 	.word	0x3f66c16c
 800e280:	5555553e 	.word	0x5555553e
 800e284:	3fc55555 	.word	0x3fc55555
 800e288:	c2f8f359 	.word	0xc2f8f359
 800e28c:	01a56e1f 	.word	0x01a56e1f
 800e290:	3fe00000 	.word	0x3fe00000
 800e294:	000fffff 	.word	0x000fffff
 800e298:	3ff00000 	.word	0x3ff00000
 800e29c:	4090cbff 	.word	0x4090cbff
 800e2a0:	3f6f3400 	.word	0x3f6f3400
 800e2a4:	652b82fe 	.word	0x652b82fe
 800e2a8:	3c971547 	.word	0x3c971547
 800e2ac:	00000000 	.word	0x00000000

0800e2b0 <__ieee754_rem_pio2>:
 800e2b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2b4:	ed2d 8b02 	vpush	{d8}
 800e2b8:	ec55 4b10 	vmov	r4, r5, d0
 800e2bc:	4bca      	ldr	r3, [pc, #808]	; (800e5e8 <__ieee754_rem_pio2+0x338>)
 800e2be:	b08b      	sub	sp, #44	; 0x2c
 800e2c0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800e2c4:	4598      	cmp	r8, r3
 800e2c6:	4682      	mov	sl, r0
 800e2c8:	9502      	str	r5, [sp, #8]
 800e2ca:	dc08      	bgt.n	800e2de <__ieee754_rem_pio2+0x2e>
 800e2cc:	2200      	movs	r2, #0
 800e2ce:	2300      	movs	r3, #0
 800e2d0:	ed80 0b00 	vstr	d0, [r0]
 800e2d4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800e2d8:	f04f 0b00 	mov.w	fp, #0
 800e2dc:	e028      	b.n	800e330 <__ieee754_rem_pio2+0x80>
 800e2de:	4bc3      	ldr	r3, [pc, #780]	; (800e5ec <__ieee754_rem_pio2+0x33c>)
 800e2e0:	4598      	cmp	r8, r3
 800e2e2:	dc78      	bgt.n	800e3d6 <__ieee754_rem_pio2+0x126>
 800e2e4:	9b02      	ldr	r3, [sp, #8]
 800e2e6:	4ec2      	ldr	r6, [pc, #776]	; (800e5f0 <__ieee754_rem_pio2+0x340>)
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	ee10 0a10 	vmov	r0, s0
 800e2ee:	a3b0      	add	r3, pc, #704	; (adr r3, 800e5b0 <__ieee754_rem_pio2+0x300>)
 800e2f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2f4:	4629      	mov	r1, r5
 800e2f6:	dd39      	ble.n	800e36c <__ieee754_rem_pio2+0xbc>
 800e2f8:	f7f1 ffde 	bl	80002b8 <__aeabi_dsub>
 800e2fc:	45b0      	cmp	r8, r6
 800e2fe:	4604      	mov	r4, r0
 800e300:	460d      	mov	r5, r1
 800e302:	d01b      	beq.n	800e33c <__ieee754_rem_pio2+0x8c>
 800e304:	a3ac      	add	r3, pc, #688	; (adr r3, 800e5b8 <__ieee754_rem_pio2+0x308>)
 800e306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e30a:	f7f1 ffd5 	bl	80002b8 <__aeabi_dsub>
 800e30e:	4602      	mov	r2, r0
 800e310:	460b      	mov	r3, r1
 800e312:	e9ca 2300 	strd	r2, r3, [sl]
 800e316:	4620      	mov	r0, r4
 800e318:	4629      	mov	r1, r5
 800e31a:	f7f1 ffcd 	bl	80002b8 <__aeabi_dsub>
 800e31e:	a3a6      	add	r3, pc, #664	; (adr r3, 800e5b8 <__ieee754_rem_pio2+0x308>)
 800e320:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e324:	f7f1 ffc8 	bl	80002b8 <__aeabi_dsub>
 800e328:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e32c:	f04f 0b01 	mov.w	fp, #1
 800e330:	4658      	mov	r0, fp
 800e332:	b00b      	add	sp, #44	; 0x2c
 800e334:	ecbd 8b02 	vpop	{d8}
 800e338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e33c:	a3a0      	add	r3, pc, #640	; (adr r3, 800e5c0 <__ieee754_rem_pio2+0x310>)
 800e33e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e342:	f7f1 ffb9 	bl	80002b8 <__aeabi_dsub>
 800e346:	a3a0      	add	r3, pc, #640	; (adr r3, 800e5c8 <__ieee754_rem_pio2+0x318>)
 800e348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e34c:	4604      	mov	r4, r0
 800e34e:	460d      	mov	r5, r1
 800e350:	f7f1 ffb2 	bl	80002b8 <__aeabi_dsub>
 800e354:	4602      	mov	r2, r0
 800e356:	460b      	mov	r3, r1
 800e358:	e9ca 2300 	strd	r2, r3, [sl]
 800e35c:	4620      	mov	r0, r4
 800e35e:	4629      	mov	r1, r5
 800e360:	f7f1 ffaa 	bl	80002b8 <__aeabi_dsub>
 800e364:	a398      	add	r3, pc, #608	; (adr r3, 800e5c8 <__ieee754_rem_pio2+0x318>)
 800e366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e36a:	e7db      	b.n	800e324 <__ieee754_rem_pio2+0x74>
 800e36c:	f7f1 ffa6 	bl	80002bc <__adddf3>
 800e370:	45b0      	cmp	r8, r6
 800e372:	4604      	mov	r4, r0
 800e374:	460d      	mov	r5, r1
 800e376:	d016      	beq.n	800e3a6 <__ieee754_rem_pio2+0xf6>
 800e378:	a38f      	add	r3, pc, #572	; (adr r3, 800e5b8 <__ieee754_rem_pio2+0x308>)
 800e37a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e37e:	f7f1 ff9d 	bl	80002bc <__adddf3>
 800e382:	4602      	mov	r2, r0
 800e384:	460b      	mov	r3, r1
 800e386:	e9ca 2300 	strd	r2, r3, [sl]
 800e38a:	4620      	mov	r0, r4
 800e38c:	4629      	mov	r1, r5
 800e38e:	f7f1 ff93 	bl	80002b8 <__aeabi_dsub>
 800e392:	a389      	add	r3, pc, #548	; (adr r3, 800e5b8 <__ieee754_rem_pio2+0x308>)
 800e394:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e398:	f7f1 ff90 	bl	80002bc <__adddf3>
 800e39c:	f04f 3bff 	mov.w	fp, #4294967295
 800e3a0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e3a4:	e7c4      	b.n	800e330 <__ieee754_rem_pio2+0x80>
 800e3a6:	a386      	add	r3, pc, #536	; (adr r3, 800e5c0 <__ieee754_rem_pio2+0x310>)
 800e3a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3ac:	f7f1 ff86 	bl	80002bc <__adddf3>
 800e3b0:	a385      	add	r3, pc, #532	; (adr r3, 800e5c8 <__ieee754_rem_pio2+0x318>)
 800e3b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3b6:	4604      	mov	r4, r0
 800e3b8:	460d      	mov	r5, r1
 800e3ba:	f7f1 ff7f 	bl	80002bc <__adddf3>
 800e3be:	4602      	mov	r2, r0
 800e3c0:	460b      	mov	r3, r1
 800e3c2:	e9ca 2300 	strd	r2, r3, [sl]
 800e3c6:	4620      	mov	r0, r4
 800e3c8:	4629      	mov	r1, r5
 800e3ca:	f7f1 ff75 	bl	80002b8 <__aeabi_dsub>
 800e3ce:	a37e      	add	r3, pc, #504	; (adr r3, 800e5c8 <__ieee754_rem_pio2+0x318>)
 800e3d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3d4:	e7e0      	b.n	800e398 <__ieee754_rem_pio2+0xe8>
 800e3d6:	4b87      	ldr	r3, [pc, #540]	; (800e5f4 <__ieee754_rem_pio2+0x344>)
 800e3d8:	4598      	cmp	r8, r3
 800e3da:	f300 80d9 	bgt.w	800e590 <__ieee754_rem_pio2+0x2e0>
 800e3de:	f000 ffe1 	bl	800f3a4 <fabs>
 800e3e2:	ec55 4b10 	vmov	r4, r5, d0
 800e3e6:	ee10 0a10 	vmov	r0, s0
 800e3ea:	a379      	add	r3, pc, #484	; (adr r3, 800e5d0 <__ieee754_rem_pio2+0x320>)
 800e3ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3f0:	4629      	mov	r1, r5
 800e3f2:	f7f2 f919 	bl	8000628 <__aeabi_dmul>
 800e3f6:	4b80      	ldr	r3, [pc, #512]	; (800e5f8 <__ieee754_rem_pio2+0x348>)
 800e3f8:	2200      	movs	r2, #0
 800e3fa:	f7f1 ff5f 	bl	80002bc <__adddf3>
 800e3fe:	f7f2 fbc3 	bl	8000b88 <__aeabi_d2iz>
 800e402:	4683      	mov	fp, r0
 800e404:	f7f2 f8a6 	bl	8000554 <__aeabi_i2d>
 800e408:	4602      	mov	r2, r0
 800e40a:	460b      	mov	r3, r1
 800e40c:	ec43 2b18 	vmov	d8, r2, r3
 800e410:	a367      	add	r3, pc, #412	; (adr r3, 800e5b0 <__ieee754_rem_pio2+0x300>)
 800e412:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e416:	f7f2 f907 	bl	8000628 <__aeabi_dmul>
 800e41a:	4602      	mov	r2, r0
 800e41c:	460b      	mov	r3, r1
 800e41e:	4620      	mov	r0, r4
 800e420:	4629      	mov	r1, r5
 800e422:	f7f1 ff49 	bl	80002b8 <__aeabi_dsub>
 800e426:	a364      	add	r3, pc, #400	; (adr r3, 800e5b8 <__ieee754_rem_pio2+0x308>)
 800e428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e42c:	4606      	mov	r6, r0
 800e42e:	460f      	mov	r7, r1
 800e430:	ec51 0b18 	vmov	r0, r1, d8
 800e434:	f7f2 f8f8 	bl	8000628 <__aeabi_dmul>
 800e438:	f1bb 0f1f 	cmp.w	fp, #31
 800e43c:	4604      	mov	r4, r0
 800e43e:	460d      	mov	r5, r1
 800e440:	dc0d      	bgt.n	800e45e <__ieee754_rem_pio2+0x1ae>
 800e442:	4b6e      	ldr	r3, [pc, #440]	; (800e5fc <__ieee754_rem_pio2+0x34c>)
 800e444:	f10b 32ff 	add.w	r2, fp, #4294967295
 800e448:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e44c:	4543      	cmp	r3, r8
 800e44e:	d006      	beq.n	800e45e <__ieee754_rem_pio2+0x1ae>
 800e450:	4622      	mov	r2, r4
 800e452:	462b      	mov	r3, r5
 800e454:	4630      	mov	r0, r6
 800e456:	4639      	mov	r1, r7
 800e458:	f7f1 ff2e 	bl	80002b8 <__aeabi_dsub>
 800e45c:	e00f      	b.n	800e47e <__ieee754_rem_pio2+0x1ce>
 800e45e:	462b      	mov	r3, r5
 800e460:	4622      	mov	r2, r4
 800e462:	4630      	mov	r0, r6
 800e464:	4639      	mov	r1, r7
 800e466:	f7f1 ff27 	bl	80002b8 <__aeabi_dsub>
 800e46a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800e46e:	9303      	str	r3, [sp, #12]
 800e470:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e474:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800e478:	f1b8 0f10 	cmp.w	r8, #16
 800e47c:	dc02      	bgt.n	800e484 <__ieee754_rem_pio2+0x1d4>
 800e47e:	e9ca 0100 	strd	r0, r1, [sl]
 800e482:	e039      	b.n	800e4f8 <__ieee754_rem_pio2+0x248>
 800e484:	a34e      	add	r3, pc, #312	; (adr r3, 800e5c0 <__ieee754_rem_pio2+0x310>)
 800e486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e48a:	ec51 0b18 	vmov	r0, r1, d8
 800e48e:	f7f2 f8cb 	bl	8000628 <__aeabi_dmul>
 800e492:	4604      	mov	r4, r0
 800e494:	460d      	mov	r5, r1
 800e496:	4602      	mov	r2, r0
 800e498:	460b      	mov	r3, r1
 800e49a:	4630      	mov	r0, r6
 800e49c:	4639      	mov	r1, r7
 800e49e:	f7f1 ff0b 	bl	80002b8 <__aeabi_dsub>
 800e4a2:	4602      	mov	r2, r0
 800e4a4:	460b      	mov	r3, r1
 800e4a6:	4680      	mov	r8, r0
 800e4a8:	4689      	mov	r9, r1
 800e4aa:	4630      	mov	r0, r6
 800e4ac:	4639      	mov	r1, r7
 800e4ae:	f7f1 ff03 	bl	80002b8 <__aeabi_dsub>
 800e4b2:	4622      	mov	r2, r4
 800e4b4:	462b      	mov	r3, r5
 800e4b6:	f7f1 feff 	bl	80002b8 <__aeabi_dsub>
 800e4ba:	a343      	add	r3, pc, #268	; (adr r3, 800e5c8 <__ieee754_rem_pio2+0x318>)
 800e4bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4c0:	4604      	mov	r4, r0
 800e4c2:	460d      	mov	r5, r1
 800e4c4:	ec51 0b18 	vmov	r0, r1, d8
 800e4c8:	f7f2 f8ae 	bl	8000628 <__aeabi_dmul>
 800e4cc:	4622      	mov	r2, r4
 800e4ce:	462b      	mov	r3, r5
 800e4d0:	f7f1 fef2 	bl	80002b8 <__aeabi_dsub>
 800e4d4:	4602      	mov	r2, r0
 800e4d6:	460b      	mov	r3, r1
 800e4d8:	4604      	mov	r4, r0
 800e4da:	460d      	mov	r5, r1
 800e4dc:	4640      	mov	r0, r8
 800e4de:	4649      	mov	r1, r9
 800e4e0:	f7f1 feea 	bl	80002b8 <__aeabi_dsub>
 800e4e4:	9a03      	ldr	r2, [sp, #12]
 800e4e6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e4ea:	1ad3      	subs	r3, r2, r3
 800e4ec:	2b31      	cmp	r3, #49	; 0x31
 800e4ee:	dc24      	bgt.n	800e53a <__ieee754_rem_pio2+0x28a>
 800e4f0:	e9ca 0100 	strd	r0, r1, [sl]
 800e4f4:	4646      	mov	r6, r8
 800e4f6:	464f      	mov	r7, r9
 800e4f8:	e9da 8900 	ldrd	r8, r9, [sl]
 800e4fc:	4630      	mov	r0, r6
 800e4fe:	4642      	mov	r2, r8
 800e500:	464b      	mov	r3, r9
 800e502:	4639      	mov	r1, r7
 800e504:	f7f1 fed8 	bl	80002b8 <__aeabi_dsub>
 800e508:	462b      	mov	r3, r5
 800e50a:	4622      	mov	r2, r4
 800e50c:	f7f1 fed4 	bl	80002b8 <__aeabi_dsub>
 800e510:	9b02      	ldr	r3, [sp, #8]
 800e512:	2b00      	cmp	r3, #0
 800e514:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e518:	f6bf af0a 	bge.w	800e330 <__ieee754_rem_pio2+0x80>
 800e51c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800e520:	f8ca 3004 	str.w	r3, [sl, #4]
 800e524:	f8ca 8000 	str.w	r8, [sl]
 800e528:	f8ca 0008 	str.w	r0, [sl, #8]
 800e52c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e530:	f8ca 300c 	str.w	r3, [sl, #12]
 800e534:	f1cb 0b00 	rsb	fp, fp, #0
 800e538:	e6fa      	b.n	800e330 <__ieee754_rem_pio2+0x80>
 800e53a:	a327      	add	r3, pc, #156	; (adr r3, 800e5d8 <__ieee754_rem_pio2+0x328>)
 800e53c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e540:	ec51 0b18 	vmov	r0, r1, d8
 800e544:	f7f2 f870 	bl	8000628 <__aeabi_dmul>
 800e548:	4604      	mov	r4, r0
 800e54a:	460d      	mov	r5, r1
 800e54c:	4602      	mov	r2, r0
 800e54e:	460b      	mov	r3, r1
 800e550:	4640      	mov	r0, r8
 800e552:	4649      	mov	r1, r9
 800e554:	f7f1 feb0 	bl	80002b8 <__aeabi_dsub>
 800e558:	4602      	mov	r2, r0
 800e55a:	460b      	mov	r3, r1
 800e55c:	4606      	mov	r6, r0
 800e55e:	460f      	mov	r7, r1
 800e560:	4640      	mov	r0, r8
 800e562:	4649      	mov	r1, r9
 800e564:	f7f1 fea8 	bl	80002b8 <__aeabi_dsub>
 800e568:	4622      	mov	r2, r4
 800e56a:	462b      	mov	r3, r5
 800e56c:	f7f1 fea4 	bl	80002b8 <__aeabi_dsub>
 800e570:	a31b      	add	r3, pc, #108	; (adr r3, 800e5e0 <__ieee754_rem_pio2+0x330>)
 800e572:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e576:	4604      	mov	r4, r0
 800e578:	460d      	mov	r5, r1
 800e57a:	ec51 0b18 	vmov	r0, r1, d8
 800e57e:	f7f2 f853 	bl	8000628 <__aeabi_dmul>
 800e582:	4622      	mov	r2, r4
 800e584:	462b      	mov	r3, r5
 800e586:	f7f1 fe97 	bl	80002b8 <__aeabi_dsub>
 800e58a:	4604      	mov	r4, r0
 800e58c:	460d      	mov	r5, r1
 800e58e:	e75f      	b.n	800e450 <__ieee754_rem_pio2+0x1a0>
 800e590:	4b1b      	ldr	r3, [pc, #108]	; (800e600 <__ieee754_rem_pio2+0x350>)
 800e592:	4598      	cmp	r8, r3
 800e594:	dd36      	ble.n	800e604 <__ieee754_rem_pio2+0x354>
 800e596:	ee10 2a10 	vmov	r2, s0
 800e59a:	462b      	mov	r3, r5
 800e59c:	4620      	mov	r0, r4
 800e59e:	4629      	mov	r1, r5
 800e5a0:	f7f1 fe8a 	bl	80002b8 <__aeabi_dsub>
 800e5a4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e5a8:	e9ca 0100 	strd	r0, r1, [sl]
 800e5ac:	e694      	b.n	800e2d8 <__ieee754_rem_pio2+0x28>
 800e5ae:	bf00      	nop
 800e5b0:	54400000 	.word	0x54400000
 800e5b4:	3ff921fb 	.word	0x3ff921fb
 800e5b8:	1a626331 	.word	0x1a626331
 800e5bc:	3dd0b461 	.word	0x3dd0b461
 800e5c0:	1a600000 	.word	0x1a600000
 800e5c4:	3dd0b461 	.word	0x3dd0b461
 800e5c8:	2e037073 	.word	0x2e037073
 800e5cc:	3ba3198a 	.word	0x3ba3198a
 800e5d0:	6dc9c883 	.word	0x6dc9c883
 800e5d4:	3fe45f30 	.word	0x3fe45f30
 800e5d8:	2e000000 	.word	0x2e000000
 800e5dc:	3ba3198a 	.word	0x3ba3198a
 800e5e0:	252049c1 	.word	0x252049c1
 800e5e4:	397b839a 	.word	0x397b839a
 800e5e8:	3fe921fb 	.word	0x3fe921fb
 800e5ec:	4002d97b 	.word	0x4002d97b
 800e5f0:	3ff921fb 	.word	0x3ff921fb
 800e5f4:	413921fb 	.word	0x413921fb
 800e5f8:	3fe00000 	.word	0x3fe00000
 800e5fc:	08032e50 	.word	0x08032e50
 800e600:	7fefffff 	.word	0x7fefffff
 800e604:	ea4f 5428 	mov.w	r4, r8, asr #20
 800e608:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800e60c:	ee10 0a10 	vmov	r0, s0
 800e610:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800e614:	ee10 6a10 	vmov	r6, s0
 800e618:	460f      	mov	r7, r1
 800e61a:	f7f2 fab5 	bl	8000b88 <__aeabi_d2iz>
 800e61e:	f7f1 ff99 	bl	8000554 <__aeabi_i2d>
 800e622:	4602      	mov	r2, r0
 800e624:	460b      	mov	r3, r1
 800e626:	4630      	mov	r0, r6
 800e628:	4639      	mov	r1, r7
 800e62a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e62e:	f7f1 fe43 	bl	80002b8 <__aeabi_dsub>
 800e632:	4b22      	ldr	r3, [pc, #136]	; (800e6bc <__ieee754_rem_pio2+0x40c>)
 800e634:	2200      	movs	r2, #0
 800e636:	f7f1 fff7 	bl	8000628 <__aeabi_dmul>
 800e63a:	460f      	mov	r7, r1
 800e63c:	4606      	mov	r6, r0
 800e63e:	f7f2 faa3 	bl	8000b88 <__aeabi_d2iz>
 800e642:	f7f1 ff87 	bl	8000554 <__aeabi_i2d>
 800e646:	4602      	mov	r2, r0
 800e648:	460b      	mov	r3, r1
 800e64a:	4630      	mov	r0, r6
 800e64c:	4639      	mov	r1, r7
 800e64e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e652:	f7f1 fe31 	bl	80002b8 <__aeabi_dsub>
 800e656:	4b19      	ldr	r3, [pc, #100]	; (800e6bc <__ieee754_rem_pio2+0x40c>)
 800e658:	2200      	movs	r2, #0
 800e65a:	f7f1 ffe5 	bl	8000628 <__aeabi_dmul>
 800e65e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e662:	ad04      	add	r5, sp, #16
 800e664:	f04f 0803 	mov.w	r8, #3
 800e668:	46a9      	mov	r9, r5
 800e66a:	2600      	movs	r6, #0
 800e66c:	2700      	movs	r7, #0
 800e66e:	4632      	mov	r2, r6
 800e670:	463b      	mov	r3, r7
 800e672:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800e676:	46c3      	mov	fp, r8
 800e678:	3d08      	subs	r5, #8
 800e67a:	f108 38ff 	add.w	r8, r8, #4294967295
 800e67e:	f7f2 fa3b 	bl	8000af8 <__aeabi_dcmpeq>
 800e682:	2800      	cmp	r0, #0
 800e684:	d1f3      	bne.n	800e66e <__ieee754_rem_pio2+0x3be>
 800e686:	4b0e      	ldr	r3, [pc, #56]	; (800e6c0 <__ieee754_rem_pio2+0x410>)
 800e688:	9301      	str	r3, [sp, #4]
 800e68a:	2302      	movs	r3, #2
 800e68c:	9300      	str	r3, [sp, #0]
 800e68e:	4622      	mov	r2, r4
 800e690:	465b      	mov	r3, fp
 800e692:	4651      	mov	r1, sl
 800e694:	4648      	mov	r0, r9
 800e696:	f000 fa87 	bl	800eba8 <__kernel_rem_pio2>
 800e69a:	9b02      	ldr	r3, [sp, #8]
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	4683      	mov	fp, r0
 800e6a0:	f6bf ae46 	bge.w	800e330 <__ieee754_rem_pio2+0x80>
 800e6a4:	f8da 3004 	ldr.w	r3, [sl, #4]
 800e6a8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e6ac:	f8ca 3004 	str.w	r3, [sl, #4]
 800e6b0:	f8da 300c 	ldr.w	r3, [sl, #12]
 800e6b4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e6b8:	e73a      	b.n	800e530 <__ieee754_rem_pio2+0x280>
 800e6ba:	bf00      	nop
 800e6bc:	41700000 	.word	0x41700000
 800e6c0:	08032ed0 	.word	0x08032ed0

0800e6c4 <__ieee754_sqrt>:
 800e6c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6c8:	ec55 4b10 	vmov	r4, r5, d0
 800e6cc:	4e56      	ldr	r6, [pc, #344]	; (800e828 <__ieee754_sqrt+0x164>)
 800e6ce:	43ae      	bics	r6, r5
 800e6d0:	ee10 0a10 	vmov	r0, s0
 800e6d4:	ee10 3a10 	vmov	r3, s0
 800e6d8:	4629      	mov	r1, r5
 800e6da:	462a      	mov	r2, r5
 800e6dc:	d110      	bne.n	800e700 <__ieee754_sqrt+0x3c>
 800e6de:	ee10 2a10 	vmov	r2, s0
 800e6e2:	462b      	mov	r3, r5
 800e6e4:	f7f1 ffa0 	bl	8000628 <__aeabi_dmul>
 800e6e8:	4602      	mov	r2, r0
 800e6ea:	460b      	mov	r3, r1
 800e6ec:	4620      	mov	r0, r4
 800e6ee:	4629      	mov	r1, r5
 800e6f0:	f7f1 fde4 	bl	80002bc <__adddf3>
 800e6f4:	4604      	mov	r4, r0
 800e6f6:	460d      	mov	r5, r1
 800e6f8:	ec45 4b10 	vmov	d0, r4, r5
 800e6fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e700:	2d00      	cmp	r5, #0
 800e702:	dc10      	bgt.n	800e726 <__ieee754_sqrt+0x62>
 800e704:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800e708:	4330      	orrs	r0, r6
 800e70a:	d0f5      	beq.n	800e6f8 <__ieee754_sqrt+0x34>
 800e70c:	b15d      	cbz	r5, 800e726 <__ieee754_sqrt+0x62>
 800e70e:	ee10 2a10 	vmov	r2, s0
 800e712:	462b      	mov	r3, r5
 800e714:	ee10 0a10 	vmov	r0, s0
 800e718:	f7f1 fdce 	bl	80002b8 <__aeabi_dsub>
 800e71c:	4602      	mov	r2, r0
 800e71e:	460b      	mov	r3, r1
 800e720:	f7f2 f8ac 	bl	800087c <__aeabi_ddiv>
 800e724:	e7e6      	b.n	800e6f4 <__ieee754_sqrt+0x30>
 800e726:	1509      	asrs	r1, r1, #20
 800e728:	d076      	beq.n	800e818 <__ieee754_sqrt+0x154>
 800e72a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800e72e:	07ce      	lsls	r6, r1, #31
 800e730:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800e734:	bf5e      	ittt	pl
 800e736:	0fda      	lsrpl	r2, r3, #31
 800e738:	005b      	lslpl	r3, r3, #1
 800e73a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800e73e:	0fda      	lsrs	r2, r3, #31
 800e740:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800e744:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800e748:	2000      	movs	r0, #0
 800e74a:	106d      	asrs	r5, r5, #1
 800e74c:	005b      	lsls	r3, r3, #1
 800e74e:	f04f 0e16 	mov.w	lr, #22
 800e752:	4684      	mov	ip, r0
 800e754:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e758:	eb0c 0401 	add.w	r4, ip, r1
 800e75c:	4294      	cmp	r4, r2
 800e75e:	bfde      	ittt	le
 800e760:	1b12      	suble	r2, r2, r4
 800e762:	eb04 0c01 	addle.w	ip, r4, r1
 800e766:	1840      	addle	r0, r0, r1
 800e768:	0052      	lsls	r2, r2, #1
 800e76a:	f1be 0e01 	subs.w	lr, lr, #1
 800e76e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800e772:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800e776:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e77a:	d1ed      	bne.n	800e758 <__ieee754_sqrt+0x94>
 800e77c:	4671      	mov	r1, lr
 800e77e:	2720      	movs	r7, #32
 800e780:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800e784:	4562      	cmp	r2, ip
 800e786:	eb04 060e 	add.w	r6, r4, lr
 800e78a:	dc02      	bgt.n	800e792 <__ieee754_sqrt+0xce>
 800e78c:	d113      	bne.n	800e7b6 <__ieee754_sqrt+0xf2>
 800e78e:	429e      	cmp	r6, r3
 800e790:	d811      	bhi.n	800e7b6 <__ieee754_sqrt+0xf2>
 800e792:	2e00      	cmp	r6, #0
 800e794:	eb06 0e04 	add.w	lr, r6, r4
 800e798:	da43      	bge.n	800e822 <__ieee754_sqrt+0x15e>
 800e79a:	f1be 0f00 	cmp.w	lr, #0
 800e79e:	db40      	blt.n	800e822 <__ieee754_sqrt+0x15e>
 800e7a0:	f10c 0801 	add.w	r8, ip, #1
 800e7a4:	eba2 020c 	sub.w	r2, r2, ip
 800e7a8:	429e      	cmp	r6, r3
 800e7aa:	bf88      	it	hi
 800e7ac:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800e7b0:	1b9b      	subs	r3, r3, r6
 800e7b2:	4421      	add	r1, r4
 800e7b4:	46c4      	mov	ip, r8
 800e7b6:	0052      	lsls	r2, r2, #1
 800e7b8:	3f01      	subs	r7, #1
 800e7ba:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800e7be:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800e7c2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e7c6:	d1dd      	bne.n	800e784 <__ieee754_sqrt+0xc0>
 800e7c8:	4313      	orrs	r3, r2
 800e7ca:	d006      	beq.n	800e7da <__ieee754_sqrt+0x116>
 800e7cc:	1c4c      	adds	r4, r1, #1
 800e7ce:	bf13      	iteet	ne
 800e7d0:	3101      	addne	r1, #1
 800e7d2:	3001      	addeq	r0, #1
 800e7d4:	4639      	moveq	r1, r7
 800e7d6:	f021 0101 	bicne.w	r1, r1, #1
 800e7da:	1043      	asrs	r3, r0, #1
 800e7dc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800e7e0:	0849      	lsrs	r1, r1, #1
 800e7e2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800e7e6:	07c2      	lsls	r2, r0, #31
 800e7e8:	bf48      	it	mi
 800e7ea:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800e7ee:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800e7f2:	460c      	mov	r4, r1
 800e7f4:	463d      	mov	r5, r7
 800e7f6:	e77f      	b.n	800e6f8 <__ieee754_sqrt+0x34>
 800e7f8:	0ada      	lsrs	r2, r3, #11
 800e7fa:	3815      	subs	r0, #21
 800e7fc:	055b      	lsls	r3, r3, #21
 800e7fe:	2a00      	cmp	r2, #0
 800e800:	d0fa      	beq.n	800e7f8 <__ieee754_sqrt+0x134>
 800e802:	02d7      	lsls	r7, r2, #11
 800e804:	d50a      	bpl.n	800e81c <__ieee754_sqrt+0x158>
 800e806:	f1c1 0420 	rsb	r4, r1, #32
 800e80a:	fa23 f404 	lsr.w	r4, r3, r4
 800e80e:	1e4d      	subs	r5, r1, #1
 800e810:	408b      	lsls	r3, r1
 800e812:	4322      	orrs	r2, r4
 800e814:	1b41      	subs	r1, r0, r5
 800e816:	e788      	b.n	800e72a <__ieee754_sqrt+0x66>
 800e818:	4608      	mov	r0, r1
 800e81a:	e7f0      	b.n	800e7fe <__ieee754_sqrt+0x13a>
 800e81c:	0052      	lsls	r2, r2, #1
 800e81e:	3101      	adds	r1, #1
 800e820:	e7ef      	b.n	800e802 <__ieee754_sqrt+0x13e>
 800e822:	46e0      	mov	r8, ip
 800e824:	e7be      	b.n	800e7a4 <__ieee754_sqrt+0xe0>
 800e826:	bf00      	nop
 800e828:	7ff00000 	.word	0x7ff00000

0800e82c <__ieee754_logf>:
 800e82c:	ee10 3a10 	vmov	r3, s0
 800e830:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800e834:	d106      	bne.n	800e844 <__ieee754_logf+0x18>
 800e836:	ed9f 7a65 	vldr	s14, [pc, #404]	; 800e9cc <__ieee754_logf+0x1a0>
 800e83a:	eddf 7a65 	vldr	s15, [pc, #404]	; 800e9d0 <__ieee754_logf+0x1a4>
 800e83e:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800e842:	4770      	bx	lr
 800e844:	2b00      	cmp	r3, #0
 800e846:	da02      	bge.n	800e84e <__ieee754_logf+0x22>
 800e848:	ee30 7a40 	vsub.f32	s14, s0, s0
 800e84c:	e7f5      	b.n	800e83a <__ieee754_logf+0xe>
 800e84e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800e852:	db02      	blt.n	800e85a <__ieee754_logf+0x2e>
 800e854:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e858:	4770      	bx	lr
 800e85a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e85e:	bfb8      	it	lt
 800e860:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 800e9d4 <__ieee754_logf+0x1a8>
 800e864:	485c      	ldr	r0, [pc, #368]	; (800e9d8 <__ieee754_logf+0x1ac>)
 800e866:	bfbe      	ittt	lt
 800e868:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800e86c:	f06f 0118 	mvnlt.w	r1, #24
 800e870:	ee17 3a90 	vmovlt	r3, s15
 800e874:	ea4f 52e3 	mov.w	r2, r3, asr #23
 800e878:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800e87c:	4418      	add	r0, r3
 800e87e:	bfa8      	it	ge
 800e880:	2100      	movge	r1, #0
 800e882:	3a7f      	subs	r2, #127	; 0x7f
 800e884:	440a      	add	r2, r1
 800e886:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 800e88a:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 800e88e:	4319      	orrs	r1, r3
 800e890:	ee00 1a10 	vmov	s0, r1
 800e894:	4951      	ldr	r1, [pc, #324]	; (800e9dc <__ieee754_logf+0x1b0>)
 800e896:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 800e89a:	f103 000f 	add.w	r0, r3, #15
 800e89e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e8a2:	4001      	ands	r1, r0
 800e8a4:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e8a8:	bb89      	cbnz	r1, 800e90e <__ieee754_logf+0xe2>
 800e8aa:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800e8ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8b2:	d10f      	bne.n	800e8d4 <__ieee754_logf+0xa8>
 800e8b4:	2a00      	cmp	r2, #0
 800e8b6:	f000 8085 	beq.w	800e9c4 <__ieee754_logf+0x198>
 800e8ba:	ee07 2a90 	vmov	s15, r2
 800e8be:	ed9f 0a48 	vldr	s0, [pc, #288]	; 800e9e0 <__ieee754_logf+0x1b4>
 800e8c2:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800e9e4 <__ieee754_logf+0x1b8>
 800e8c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e8ca:	ee27 0a80 	vmul.f32	s0, s15, s0
 800e8ce:	eea7 0a87 	vfma.f32	s0, s15, s14
 800e8d2:	4770      	bx	lr
 800e8d4:	eddf 6a44 	vldr	s13, [pc, #272]	; 800e9e8 <__ieee754_logf+0x1bc>
 800e8d8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800e8dc:	eee0 7a66 	vfms.f32	s15, s0, s13
 800e8e0:	ee20 7a00 	vmul.f32	s14, s0, s0
 800e8e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e8e8:	b912      	cbnz	r2, 800e8f0 <__ieee754_logf+0xc4>
 800e8ea:	ee30 0a47 	vsub.f32	s0, s0, s14
 800e8ee:	4770      	bx	lr
 800e8f0:	ee07 2a90 	vmov	s15, r2
 800e8f4:	eddf 6a3a 	vldr	s13, [pc, #232]	; 800e9e0 <__ieee754_logf+0x1b4>
 800e8f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e8fc:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800e900:	ee37 0a40 	vsub.f32	s0, s14, s0
 800e904:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800e9e4 <__ieee754_logf+0x1b8>
 800e908:	ee97 0a87 	vfnms.f32	s0, s15, s14
 800e90c:	4770      	bx	lr
 800e90e:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800e912:	ee70 7a27 	vadd.f32	s15, s0, s15
 800e916:	eddf 5a35 	vldr	s11, [pc, #212]	; 800e9ec <__ieee754_logf+0x1c0>
 800e91a:	eddf 4a35 	vldr	s9, [pc, #212]	; 800e9f0 <__ieee754_logf+0x1c4>
 800e91e:	4935      	ldr	r1, [pc, #212]	; (800e9f4 <__ieee754_logf+0x1c8>)
 800e920:	ee80 6a27 	vdiv.f32	s12, s0, s15
 800e924:	4419      	add	r1, r3
 800e926:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 800e92a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800e92e:	430b      	orrs	r3, r1
 800e930:	2b00      	cmp	r3, #0
 800e932:	ee07 2a90 	vmov	s15, r2
 800e936:	ee26 5a06 	vmul.f32	s10, s12, s12
 800e93a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800e93e:	ee25 7a05 	vmul.f32	s14, s10, s10
 800e942:	eddf 7a2d 	vldr	s15, [pc, #180]	; 800e9f8 <__ieee754_logf+0x1cc>
 800e946:	eee7 7a25 	vfma.f32	s15, s14, s11
 800e94a:	eddf 5a2c 	vldr	s11, [pc, #176]	; 800e9fc <__ieee754_logf+0x1d0>
 800e94e:	eee7 5a87 	vfma.f32	s11, s15, s14
 800e952:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800ea00 <__ieee754_logf+0x1d4>
 800e956:	eee7 7a24 	vfma.f32	s15, s14, s9
 800e95a:	eddf 4a2a 	vldr	s9, [pc, #168]	; 800ea04 <__ieee754_logf+0x1d8>
 800e95e:	eee7 4a87 	vfma.f32	s9, s15, s14
 800e962:	eddf 7a29 	vldr	s15, [pc, #164]	; 800ea08 <__ieee754_logf+0x1dc>
 800e966:	eee4 7a87 	vfma.f32	s15, s9, s14
 800e96a:	ee67 7a85 	vmul.f32	s15, s15, s10
 800e96e:	eee5 7a87 	vfma.f32	s15, s11, s14
 800e972:	dd1c      	ble.n	800e9ae <__ieee754_logf+0x182>
 800e974:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800e978:	ee20 7a07 	vmul.f32	s14, s0, s14
 800e97c:	ee27 7a00 	vmul.f32	s14, s14, s0
 800e980:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e984:	ee67 7a86 	vmul.f32	s15, s15, s12
 800e988:	b922      	cbnz	r2, 800e994 <__ieee754_logf+0x168>
 800e98a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e98e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e992:	4770      	bx	lr
 800e994:	ed9f 6a12 	vldr	s12, [pc, #72]	; 800e9e0 <__ieee754_logf+0x1b4>
 800e998:	eee6 7a86 	vfma.f32	s15, s13, s12
 800e99c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e9a0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800e9a4:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800e9e4 <__ieee754_logf+0x1b8>
 800e9a8:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 800e9ac:	4770      	bx	lr
 800e9ae:	ee70 7a67 	vsub.f32	s15, s0, s15
 800e9b2:	ee67 7a86 	vmul.f32	s15, s15, s12
 800e9b6:	2a00      	cmp	r2, #0
 800e9b8:	d0e9      	beq.n	800e98e <__ieee754_logf+0x162>
 800e9ba:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800e9e0 <__ieee754_logf+0x1b4>
 800e9be:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800e9c2:	e7ed      	b.n	800e9a0 <__ieee754_logf+0x174>
 800e9c4:	ed9f 0a02 	vldr	s0, [pc, #8]	; 800e9d0 <__ieee754_logf+0x1a4>
 800e9c8:	4770      	bx	lr
 800e9ca:	bf00      	nop
 800e9cc:	cc000000 	.word	0xcc000000
 800e9d0:	00000000 	.word	0x00000000
 800e9d4:	4c000000 	.word	0x4c000000
 800e9d8:	004afb20 	.word	0x004afb20
 800e9dc:	007ffff0 	.word	0x007ffff0
 800e9e0:	3717f7d1 	.word	0x3717f7d1
 800e9e4:	3f317180 	.word	0x3f317180
 800e9e8:	3eaaaaab 	.word	0x3eaaaaab
 800e9ec:	3e1cd04f 	.word	0x3e1cd04f
 800e9f0:	3e178897 	.word	0x3e178897
 800e9f4:	ffcf5c30 	.word	0xffcf5c30
 800e9f8:	3e638e29 	.word	0x3e638e29
 800e9fc:	3ecccccd 	.word	0x3ecccccd
 800ea00:	3e3a3325 	.word	0x3e3a3325
 800ea04:	3e924925 	.word	0x3e924925
 800ea08:	3f2aaaab 	.word	0x3f2aaaab

0800ea0c <__ieee754_sqrtf>:
 800ea0c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800ea10:	4770      	bx	lr
 800ea12:	0000      	movs	r0, r0
 800ea14:	0000      	movs	r0, r0
	...

0800ea18 <__kernel_cos>:
 800ea18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea1c:	ec57 6b10 	vmov	r6, r7, d0
 800ea20:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800ea24:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800ea28:	ed8d 1b00 	vstr	d1, [sp]
 800ea2c:	da07      	bge.n	800ea3e <__kernel_cos+0x26>
 800ea2e:	ee10 0a10 	vmov	r0, s0
 800ea32:	4639      	mov	r1, r7
 800ea34:	f7f2 f8a8 	bl	8000b88 <__aeabi_d2iz>
 800ea38:	2800      	cmp	r0, #0
 800ea3a:	f000 8088 	beq.w	800eb4e <__kernel_cos+0x136>
 800ea3e:	4632      	mov	r2, r6
 800ea40:	463b      	mov	r3, r7
 800ea42:	4630      	mov	r0, r6
 800ea44:	4639      	mov	r1, r7
 800ea46:	f7f1 fdef 	bl	8000628 <__aeabi_dmul>
 800ea4a:	4b51      	ldr	r3, [pc, #324]	; (800eb90 <__kernel_cos+0x178>)
 800ea4c:	2200      	movs	r2, #0
 800ea4e:	4604      	mov	r4, r0
 800ea50:	460d      	mov	r5, r1
 800ea52:	f7f1 fde9 	bl	8000628 <__aeabi_dmul>
 800ea56:	a340      	add	r3, pc, #256	; (adr r3, 800eb58 <__kernel_cos+0x140>)
 800ea58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea5c:	4682      	mov	sl, r0
 800ea5e:	468b      	mov	fp, r1
 800ea60:	4620      	mov	r0, r4
 800ea62:	4629      	mov	r1, r5
 800ea64:	f7f1 fde0 	bl	8000628 <__aeabi_dmul>
 800ea68:	a33d      	add	r3, pc, #244	; (adr r3, 800eb60 <__kernel_cos+0x148>)
 800ea6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea6e:	f7f1 fc25 	bl	80002bc <__adddf3>
 800ea72:	4622      	mov	r2, r4
 800ea74:	462b      	mov	r3, r5
 800ea76:	f7f1 fdd7 	bl	8000628 <__aeabi_dmul>
 800ea7a:	a33b      	add	r3, pc, #236	; (adr r3, 800eb68 <__kernel_cos+0x150>)
 800ea7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea80:	f7f1 fc1a 	bl	80002b8 <__aeabi_dsub>
 800ea84:	4622      	mov	r2, r4
 800ea86:	462b      	mov	r3, r5
 800ea88:	f7f1 fdce 	bl	8000628 <__aeabi_dmul>
 800ea8c:	a338      	add	r3, pc, #224	; (adr r3, 800eb70 <__kernel_cos+0x158>)
 800ea8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea92:	f7f1 fc13 	bl	80002bc <__adddf3>
 800ea96:	4622      	mov	r2, r4
 800ea98:	462b      	mov	r3, r5
 800ea9a:	f7f1 fdc5 	bl	8000628 <__aeabi_dmul>
 800ea9e:	a336      	add	r3, pc, #216	; (adr r3, 800eb78 <__kernel_cos+0x160>)
 800eaa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaa4:	f7f1 fc08 	bl	80002b8 <__aeabi_dsub>
 800eaa8:	4622      	mov	r2, r4
 800eaaa:	462b      	mov	r3, r5
 800eaac:	f7f1 fdbc 	bl	8000628 <__aeabi_dmul>
 800eab0:	a333      	add	r3, pc, #204	; (adr r3, 800eb80 <__kernel_cos+0x168>)
 800eab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eab6:	f7f1 fc01 	bl	80002bc <__adddf3>
 800eaba:	4622      	mov	r2, r4
 800eabc:	462b      	mov	r3, r5
 800eabe:	f7f1 fdb3 	bl	8000628 <__aeabi_dmul>
 800eac2:	4622      	mov	r2, r4
 800eac4:	462b      	mov	r3, r5
 800eac6:	f7f1 fdaf 	bl	8000628 <__aeabi_dmul>
 800eaca:	e9dd 2300 	ldrd	r2, r3, [sp]
 800eace:	4604      	mov	r4, r0
 800ead0:	460d      	mov	r5, r1
 800ead2:	4630      	mov	r0, r6
 800ead4:	4639      	mov	r1, r7
 800ead6:	f7f1 fda7 	bl	8000628 <__aeabi_dmul>
 800eada:	460b      	mov	r3, r1
 800eadc:	4602      	mov	r2, r0
 800eade:	4629      	mov	r1, r5
 800eae0:	4620      	mov	r0, r4
 800eae2:	f7f1 fbe9 	bl	80002b8 <__aeabi_dsub>
 800eae6:	4b2b      	ldr	r3, [pc, #172]	; (800eb94 <__kernel_cos+0x17c>)
 800eae8:	4598      	cmp	r8, r3
 800eaea:	4606      	mov	r6, r0
 800eaec:	460f      	mov	r7, r1
 800eaee:	dc10      	bgt.n	800eb12 <__kernel_cos+0xfa>
 800eaf0:	4602      	mov	r2, r0
 800eaf2:	460b      	mov	r3, r1
 800eaf4:	4650      	mov	r0, sl
 800eaf6:	4659      	mov	r1, fp
 800eaf8:	f7f1 fbde 	bl	80002b8 <__aeabi_dsub>
 800eafc:	460b      	mov	r3, r1
 800eafe:	4926      	ldr	r1, [pc, #152]	; (800eb98 <__kernel_cos+0x180>)
 800eb00:	4602      	mov	r2, r0
 800eb02:	2000      	movs	r0, #0
 800eb04:	f7f1 fbd8 	bl	80002b8 <__aeabi_dsub>
 800eb08:	ec41 0b10 	vmov	d0, r0, r1
 800eb0c:	b003      	add	sp, #12
 800eb0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb12:	4b22      	ldr	r3, [pc, #136]	; (800eb9c <__kernel_cos+0x184>)
 800eb14:	4920      	ldr	r1, [pc, #128]	; (800eb98 <__kernel_cos+0x180>)
 800eb16:	4598      	cmp	r8, r3
 800eb18:	bfcc      	ite	gt
 800eb1a:	4d21      	ldrgt	r5, [pc, #132]	; (800eba0 <__kernel_cos+0x188>)
 800eb1c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800eb20:	2400      	movs	r4, #0
 800eb22:	4622      	mov	r2, r4
 800eb24:	462b      	mov	r3, r5
 800eb26:	2000      	movs	r0, #0
 800eb28:	f7f1 fbc6 	bl	80002b8 <__aeabi_dsub>
 800eb2c:	4622      	mov	r2, r4
 800eb2e:	4680      	mov	r8, r0
 800eb30:	4689      	mov	r9, r1
 800eb32:	462b      	mov	r3, r5
 800eb34:	4650      	mov	r0, sl
 800eb36:	4659      	mov	r1, fp
 800eb38:	f7f1 fbbe 	bl	80002b8 <__aeabi_dsub>
 800eb3c:	4632      	mov	r2, r6
 800eb3e:	463b      	mov	r3, r7
 800eb40:	f7f1 fbba 	bl	80002b8 <__aeabi_dsub>
 800eb44:	4602      	mov	r2, r0
 800eb46:	460b      	mov	r3, r1
 800eb48:	4640      	mov	r0, r8
 800eb4a:	4649      	mov	r1, r9
 800eb4c:	e7da      	b.n	800eb04 <__kernel_cos+0xec>
 800eb4e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800eb88 <__kernel_cos+0x170>
 800eb52:	e7db      	b.n	800eb0c <__kernel_cos+0xf4>
 800eb54:	f3af 8000 	nop.w
 800eb58:	be8838d4 	.word	0xbe8838d4
 800eb5c:	bda8fae9 	.word	0xbda8fae9
 800eb60:	bdb4b1c4 	.word	0xbdb4b1c4
 800eb64:	3e21ee9e 	.word	0x3e21ee9e
 800eb68:	809c52ad 	.word	0x809c52ad
 800eb6c:	3e927e4f 	.word	0x3e927e4f
 800eb70:	19cb1590 	.word	0x19cb1590
 800eb74:	3efa01a0 	.word	0x3efa01a0
 800eb78:	16c15177 	.word	0x16c15177
 800eb7c:	3f56c16c 	.word	0x3f56c16c
 800eb80:	5555554c 	.word	0x5555554c
 800eb84:	3fa55555 	.word	0x3fa55555
 800eb88:	00000000 	.word	0x00000000
 800eb8c:	3ff00000 	.word	0x3ff00000
 800eb90:	3fe00000 	.word	0x3fe00000
 800eb94:	3fd33332 	.word	0x3fd33332
 800eb98:	3ff00000 	.word	0x3ff00000
 800eb9c:	3fe90000 	.word	0x3fe90000
 800eba0:	3fd20000 	.word	0x3fd20000
 800eba4:	00000000 	.word	0x00000000

0800eba8 <__kernel_rem_pio2>:
 800eba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebac:	ed2d 8b02 	vpush	{d8}
 800ebb0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800ebb4:	f112 0f14 	cmn.w	r2, #20
 800ebb8:	9308      	str	r3, [sp, #32]
 800ebba:	9101      	str	r1, [sp, #4]
 800ebbc:	4bc6      	ldr	r3, [pc, #792]	; (800eed8 <__kernel_rem_pio2+0x330>)
 800ebbe:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800ebc0:	9009      	str	r0, [sp, #36]	; 0x24
 800ebc2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ebc6:	9304      	str	r3, [sp, #16]
 800ebc8:	9b08      	ldr	r3, [sp, #32]
 800ebca:	f103 33ff 	add.w	r3, r3, #4294967295
 800ebce:	bfa8      	it	ge
 800ebd0:	1ed4      	subge	r4, r2, #3
 800ebd2:	9306      	str	r3, [sp, #24]
 800ebd4:	bfb2      	itee	lt
 800ebd6:	2400      	movlt	r4, #0
 800ebd8:	2318      	movge	r3, #24
 800ebda:	fb94 f4f3 	sdivge	r4, r4, r3
 800ebde:	f06f 0317 	mvn.w	r3, #23
 800ebe2:	fb04 3303 	mla	r3, r4, r3, r3
 800ebe6:	eb03 0a02 	add.w	sl, r3, r2
 800ebea:	9b04      	ldr	r3, [sp, #16]
 800ebec:	9a06      	ldr	r2, [sp, #24]
 800ebee:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800eec8 <__kernel_rem_pio2+0x320>
 800ebf2:	eb03 0802 	add.w	r8, r3, r2
 800ebf6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800ebf8:	1aa7      	subs	r7, r4, r2
 800ebfa:	ae20      	add	r6, sp, #128	; 0x80
 800ebfc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800ec00:	2500      	movs	r5, #0
 800ec02:	4545      	cmp	r5, r8
 800ec04:	dd18      	ble.n	800ec38 <__kernel_rem_pio2+0x90>
 800ec06:	9b08      	ldr	r3, [sp, #32]
 800ec08:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800ec0c:	aa20      	add	r2, sp, #128	; 0x80
 800ec0e:	ed9f 8bae 	vldr	d8, [pc, #696]	; 800eec8 <__kernel_rem_pio2+0x320>
 800ec12:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800ec16:	f1c3 0301 	rsb	r3, r3, #1
 800ec1a:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800ec1e:	9307      	str	r3, [sp, #28]
 800ec20:	9b07      	ldr	r3, [sp, #28]
 800ec22:	9a04      	ldr	r2, [sp, #16]
 800ec24:	4443      	add	r3, r8
 800ec26:	429a      	cmp	r2, r3
 800ec28:	db2f      	blt.n	800ec8a <__kernel_rem_pio2+0xe2>
 800ec2a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800ec2e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800ec32:	462f      	mov	r7, r5
 800ec34:	2600      	movs	r6, #0
 800ec36:	e01b      	b.n	800ec70 <__kernel_rem_pio2+0xc8>
 800ec38:	42ef      	cmn	r7, r5
 800ec3a:	d407      	bmi.n	800ec4c <__kernel_rem_pio2+0xa4>
 800ec3c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800ec40:	f7f1 fc88 	bl	8000554 <__aeabi_i2d>
 800ec44:	e8e6 0102 	strd	r0, r1, [r6], #8
 800ec48:	3501      	adds	r5, #1
 800ec4a:	e7da      	b.n	800ec02 <__kernel_rem_pio2+0x5a>
 800ec4c:	ec51 0b18 	vmov	r0, r1, d8
 800ec50:	e7f8      	b.n	800ec44 <__kernel_rem_pio2+0x9c>
 800ec52:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ec56:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800ec5a:	f7f1 fce5 	bl	8000628 <__aeabi_dmul>
 800ec5e:	4602      	mov	r2, r0
 800ec60:	460b      	mov	r3, r1
 800ec62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ec66:	f7f1 fb29 	bl	80002bc <__adddf3>
 800ec6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ec6e:	3601      	adds	r6, #1
 800ec70:	9b06      	ldr	r3, [sp, #24]
 800ec72:	429e      	cmp	r6, r3
 800ec74:	f1a7 0708 	sub.w	r7, r7, #8
 800ec78:	ddeb      	ble.n	800ec52 <__kernel_rem_pio2+0xaa>
 800ec7a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ec7e:	3508      	adds	r5, #8
 800ec80:	ecab 7b02 	vstmia	fp!, {d7}
 800ec84:	f108 0801 	add.w	r8, r8, #1
 800ec88:	e7ca      	b.n	800ec20 <__kernel_rem_pio2+0x78>
 800ec8a:	9b04      	ldr	r3, [sp, #16]
 800ec8c:	aa0c      	add	r2, sp, #48	; 0x30
 800ec8e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ec92:	930b      	str	r3, [sp, #44]	; 0x2c
 800ec94:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800ec96:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ec9a:	9c04      	ldr	r4, [sp, #16]
 800ec9c:	930a      	str	r3, [sp, #40]	; 0x28
 800ec9e:	ab98      	add	r3, sp, #608	; 0x260
 800eca0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800eca4:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800eca8:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800ecac:	f8cd b008 	str.w	fp, [sp, #8]
 800ecb0:	4625      	mov	r5, r4
 800ecb2:	2d00      	cmp	r5, #0
 800ecb4:	dc78      	bgt.n	800eda8 <__kernel_rem_pio2+0x200>
 800ecb6:	ec47 6b10 	vmov	d0, r6, r7
 800ecba:	4650      	mov	r0, sl
 800ecbc:	f000 fc9c 	bl	800f5f8 <scalbn>
 800ecc0:	ec57 6b10 	vmov	r6, r7, d0
 800ecc4:	2200      	movs	r2, #0
 800ecc6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800ecca:	ee10 0a10 	vmov	r0, s0
 800ecce:	4639      	mov	r1, r7
 800ecd0:	f7f1 fcaa 	bl	8000628 <__aeabi_dmul>
 800ecd4:	ec41 0b10 	vmov	d0, r0, r1
 800ecd8:	f000 fb7a 	bl	800f3d0 <floor>
 800ecdc:	4b7f      	ldr	r3, [pc, #508]	; (800eedc <__kernel_rem_pio2+0x334>)
 800ecde:	ec51 0b10 	vmov	r0, r1, d0
 800ece2:	2200      	movs	r2, #0
 800ece4:	f7f1 fca0 	bl	8000628 <__aeabi_dmul>
 800ece8:	4602      	mov	r2, r0
 800ecea:	460b      	mov	r3, r1
 800ecec:	4630      	mov	r0, r6
 800ecee:	4639      	mov	r1, r7
 800ecf0:	f7f1 fae2 	bl	80002b8 <__aeabi_dsub>
 800ecf4:	460f      	mov	r7, r1
 800ecf6:	4606      	mov	r6, r0
 800ecf8:	f7f1 ff46 	bl	8000b88 <__aeabi_d2iz>
 800ecfc:	9007      	str	r0, [sp, #28]
 800ecfe:	f7f1 fc29 	bl	8000554 <__aeabi_i2d>
 800ed02:	4602      	mov	r2, r0
 800ed04:	460b      	mov	r3, r1
 800ed06:	4630      	mov	r0, r6
 800ed08:	4639      	mov	r1, r7
 800ed0a:	f7f1 fad5 	bl	80002b8 <__aeabi_dsub>
 800ed0e:	f1ba 0f00 	cmp.w	sl, #0
 800ed12:	4606      	mov	r6, r0
 800ed14:	460f      	mov	r7, r1
 800ed16:	dd70      	ble.n	800edfa <__kernel_rem_pio2+0x252>
 800ed18:	1e62      	subs	r2, r4, #1
 800ed1a:	ab0c      	add	r3, sp, #48	; 0x30
 800ed1c:	9d07      	ldr	r5, [sp, #28]
 800ed1e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800ed22:	f1ca 0118 	rsb	r1, sl, #24
 800ed26:	fa40 f301 	asr.w	r3, r0, r1
 800ed2a:	441d      	add	r5, r3
 800ed2c:	408b      	lsls	r3, r1
 800ed2e:	1ac0      	subs	r0, r0, r3
 800ed30:	ab0c      	add	r3, sp, #48	; 0x30
 800ed32:	9507      	str	r5, [sp, #28]
 800ed34:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800ed38:	f1ca 0317 	rsb	r3, sl, #23
 800ed3c:	fa40 f303 	asr.w	r3, r0, r3
 800ed40:	9302      	str	r3, [sp, #8]
 800ed42:	9b02      	ldr	r3, [sp, #8]
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	dd66      	ble.n	800ee16 <__kernel_rem_pio2+0x26e>
 800ed48:	9b07      	ldr	r3, [sp, #28]
 800ed4a:	2200      	movs	r2, #0
 800ed4c:	3301      	adds	r3, #1
 800ed4e:	9307      	str	r3, [sp, #28]
 800ed50:	4615      	mov	r5, r2
 800ed52:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800ed56:	4294      	cmp	r4, r2
 800ed58:	f300 8099 	bgt.w	800ee8e <__kernel_rem_pio2+0x2e6>
 800ed5c:	f1ba 0f00 	cmp.w	sl, #0
 800ed60:	dd07      	ble.n	800ed72 <__kernel_rem_pio2+0x1ca>
 800ed62:	f1ba 0f01 	cmp.w	sl, #1
 800ed66:	f000 80a5 	beq.w	800eeb4 <__kernel_rem_pio2+0x30c>
 800ed6a:	f1ba 0f02 	cmp.w	sl, #2
 800ed6e:	f000 80c1 	beq.w	800eef4 <__kernel_rem_pio2+0x34c>
 800ed72:	9b02      	ldr	r3, [sp, #8]
 800ed74:	2b02      	cmp	r3, #2
 800ed76:	d14e      	bne.n	800ee16 <__kernel_rem_pio2+0x26e>
 800ed78:	4632      	mov	r2, r6
 800ed7a:	463b      	mov	r3, r7
 800ed7c:	4958      	ldr	r1, [pc, #352]	; (800eee0 <__kernel_rem_pio2+0x338>)
 800ed7e:	2000      	movs	r0, #0
 800ed80:	f7f1 fa9a 	bl	80002b8 <__aeabi_dsub>
 800ed84:	4606      	mov	r6, r0
 800ed86:	460f      	mov	r7, r1
 800ed88:	2d00      	cmp	r5, #0
 800ed8a:	d044      	beq.n	800ee16 <__kernel_rem_pio2+0x26e>
 800ed8c:	4650      	mov	r0, sl
 800ed8e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800eed0 <__kernel_rem_pio2+0x328>
 800ed92:	f000 fc31 	bl	800f5f8 <scalbn>
 800ed96:	4630      	mov	r0, r6
 800ed98:	4639      	mov	r1, r7
 800ed9a:	ec53 2b10 	vmov	r2, r3, d0
 800ed9e:	f7f1 fa8b 	bl	80002b8 <__aeabi_dsub>
 800eda2:	4606      	mov	r6, r0
 800eda4:	460f      	mov	r7, r1
 800eda6:	e036      	b.n	800ee16 <__kernel_rem_pio2+0x26e>
 800eda8:	4b4e      	ldr	r3, [pc, #312]	; (800eee4 <__kernel_rem_pio2+0x33c>)
 800edaa:	2200      	movs	r2, #0
 800edac:	4630      	mov	r0, r6
 800edae:	4639      	mov	r1, r7
 800edb0:	f7f1 fc3a 	bl	8000628 <__aeabi_dmul>
 800edb4:	f7f1 fee8 	bl	8000b88 <__aeabi_d2iz>
 800edb8:	f7f1 fbcc 	bl	8000554 <__aeabi_i2d>
 800edbc:	4b4a      	ldr	r3, [pc, #296]	; (800eee8 <__kernel_rem_pio2+0x340>)
 800edbe:	2200      	movs	r2, #0
 800edc0:	4680      	mov	r8, r0
 800edc2:	4689      	mov	r9, r1
 800edc4:	f7f1 fc30 	bl	8000628 <__aeabi_dmul>
 800edc8:	4602      	mov	r2, r0
 800edca:	460b      	mov	r3, r1
 800edcc:	4630      	mov	r0, r6
 800edce:	4639      	mov	r1, r7
 800edd0:	f7f1 fa72 	bl	80002b8 <__aeabi_dsub>
 800edd4:	f7f1 fed8 	bl	8000b88 <__aeabi_d2iz>
 800edd8:	9b02      	ldr	r3, [sp, #8]
 800edda:	f843 0b04 	str.w	r0, [r3], #4
 800edde:	3d01      	subs	r5, #1
 800ede0:	9302      	str	r3, [sp, #8]
 800ede2:	ab70      	add	r3, sp, #448	; 0x1c0
 800ede4:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800ede8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edec:	4640      	mov	r0, r8
 800edee:	4649      	mov	r1, r9
 800edf0:	f7f1 fa64 	bl	80002bc <__adddf3>
 800edf4:	4606      	mov	r6, r0
 800edf6:	460f      	mov	r7, r1
 800edf8:	e75b      	b.n	800ecb2 <__kernel_rem_pio2+0x10a>
 800edfa:	d105      	bne.n	800ee08 <__kernel_rem_pio2+0x260>
 800edfc:	1e63      	subs	r3, r4, #1
 800edfe:	aa0c      	add	r2, sp, #48	; 0x30
 800ee00:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800ee04:	15c3      	asrs	r3, r0, #23
 800ee06:	e79b      	b.n	800ed40 <__kernel_rem_pio2+0x198>
 800ee08:	4b38      	ldr	r3, [pc, #224]	; (800eeec <__kernel_rem_pio2+0x344>)
 800ee0a:	2200      	movs	r2, #0
 800ee0c:	f7f1 fe92 	bl	8000b34 <__aeabi_dcmpge>
 800ee10:	2800      	cmp	r0, #0
 800ee12:	d139      	bne.n	800ee88 <__kernel_rem_pio2+0x2e0>
 800ee14:	9002      	str	r0, [sp, #8]
 800ee16:	2200      	movs	r2, #0
 800ee18:	2300      	movs	r3, #0
 800ee1a:	4630      	mov	r0, r6
 800ee1c:	4639      	mov	r1, r7
 800ee1e:	f7f1 fe6b 	bl	8000af8 <__aeabi_dcmpeq>
 800ee22:	2800      	cmp	r0, #0
 800ee24:	f000 80b4 	beq.w	800ef90 <__kernel_rem_pio2+0x3e8>
 800ee28:	f104 3bff 	add.w	fp, r4, #4294967295
 800ee2c:	465b      	mov	r3, fp
 800ee2e:	2200      	movs	r2, #0
 800ee30:	9904      	ldr	r1, [sp, #16]
 800ee32:	428b      	cmp	r3, r1
 800ee34:	da65      	bge.n	800ef02 <__kernel_rem_pio2+0x35a>
 800ee36:	2a00      	cmp	r2, #0
 800ee38:	d07b      	beq.n	800ef32 <__kernel_rem_pio2+0x38a>
 800ee3a:	ab0c      	add	r3, sp, #48	; 0x30
 800ee3c:	f1aa 0a18 	sub.w	sl, sl, #24
 800ee40:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	f000 80a0 	beq.w	800ef8a <__kernel_rem_pio2+0x3e2>
 800ee4a:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800eed0 <__kernel_rem_pio2+0x328>
 800ee4e:	4650      	mov	r0, sl
 800ee50:	f000 fbd2 	bl	800f5f8 <scalbn>
 800ee54:	4f23      	ldr	r7, [pc, #140]	; (800eee4 <__kernel_rem_pio2+0x33c>)
 800ee56:	ec55 4b10 	vmov	r4, r5, d0
 800ee5a:	46d8      	mov	r8, fp
 800ee5c:	2600      	movs	r6, #0
 800ee5e:	f1b8 0f00 	cmp.w	r8, #0
 800ee62:	f280 80cf 	bge.w	800f004 <__kernel_rem_pio2+0x45c>
 800ee66:	ed9f 8b18 	vldr	d8, [pc, #96]	; 800eec8 <__kernel_rem_pio2+0x320>
 800ee6a:	465f      	mov	r7, fp
 800ee6c:	f04f 0800 	mov.w	r8, #0
 800ee70:	2f00      	cmp	r7, #0
 800ee72:	f2c0 80fd 	blt.w	800f070 <__kernel_rem_pio2+0x4c8>
 800ee76:	ab70      	add	r3, sp, #448	; 0x1c0
 800ee78:	f8df a074 	ldr.w	sl, [pc, #116]	; 800eef0 <__kernel_rem_pio2+0x348>
 800ee7c:	ec55 4b18 	vmov	r4, r5, d8
 800ee80:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800ee84:	2600      	movs	r6, #0
 800ee86:	e0e5      	b.n	800f054 <__kernel_rem_pio2+0x4ac>
 800ee88:	2302      	movs	r3, #2
 800ee8a:	9302      	str	r3, [sp, #8]
 800ee8c:	e75c      	b.n	800ed48 <__kernel_rem_pio2+0x1a0>
 800ee8e:	f8db 3000 	ldr.w	r3, [fp]
 800ee92:	b955      	cbnz	r5, 800eeaa <__kernel_rem_pio2+0x302>
 800ee94:	b123      	cbz	r3, 800eea0 <__kernel_rem_pio2+0x2f8>
 800ee96:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800ee9a:	f8cb 3000 	str.w	r3, [fp]
 800ee9e:	2301      	movs	r3, #1
 800eea0:	3201      	adds	r2, #1
 800eea2:	f10b 0b04 	add.w	fp, fp, #4
 800eea6:	461d      	mov	r5, r3
 800eea8:	e755      	b.n	800ed56 <__kernel_rem_pio2+0x1ae>
 800eeaa:	1acb      	subs	r3, r1, r3
 800eeac:	f8cb 3000 	str.w	r3, [fp]
 800eeb0:	462b      	mov	r3, r5
 800eeb2:	e7f5      	b.n	800eea0 <__kernel_rem_pio2+0x2f8>
 800eeb4:	1e62      	subs	r2, r4, #1
 800eeb6:	ab0c      	add	r3, sp, #48	; 0x30
 800eeb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eebc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800eec0:	a90c      	add	r1, sp, #48	; 0x30
 800eec2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800eec6:	e754      	b.n	800ed72 <__kernel_rem_pio2+0x1ca>
	...
 800eed4:	3ff00000 	.word	0x3ff00000
 800eed8:	08033018 	.word	0x08033018
 800eedc:	40200000 	.word	0x40200000
 800eee0:	3ff00000 	.word	0x3ff00000
 800eee4:	3e700000 	.word	0x3e700000
 800eee8:	41700000 	.word	0x41700000
 800eeec:	3fe00000 	.word	0x3fe00000
 800eef0:	08032fd8 	.word	0x08032fd8
 800eef4:	1e62      	subs	r2, r4, #1
 800eef6:	ab0c      	add	r3, sp, #48	; 0x30
 800eef8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eefc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ef00:	e7de      	b.n	800eec0 <__kernel_rem_pio2+0x318>
 800ef02:	a90c      	add	r1, sp, #48	; 0x30
 800ef04:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800ef08:	3b01      	subs	r3, #1
 800ef0a:	430a      	orrs	r2, r1
 800ef0c:	e790      	b.n	800ee30 <__kernel_rem_pio2+0x288>
 800ef0e:	3301      	adds	r3, #1
 800ef10:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800ef14:	2900      	cmp	r1, #0
 800ef16:	d0fa      	beq.n	800ef0e <__kernel_rem_pio2+0x366>
 800ef18:	9a08      	ldr	r2, [sp, #32]
 800ef1a:	18e3      	adds	r3, r4, r3
 800ef1c:	18a6      	adds	r6, r4, r2
 800ef1e:	aa20      	add	r2, sp, #128	; 0x80
 800ef20:	1c65      	adds	r5, r4, #1
 800ef22:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800ef26:	9302      	str	r3, [sp, #8]
 800ef28:	9b02      	ldr	r3, [sp, #8]
 800ef2a:	42ab      	cmp	r3, r5
 800ef2c:	da04      	bge.n	800ef38 <__kernel_rem_pio2+0x390>
 800ef2e:	461c      	mov	r4, r3
 800ef30:	e6b5      	b.n	800ec9e <__kernel_rem_pio2+0xf6>
 800ef32:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ef34:	2301      	movs	r3, #1
 800ef36:	e7eb      	b.n	800ef10 <__kernel_rem_pio2+0x368>
 800ef38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ef3a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ef3e:	f7f1 fb09 	bl	8000554 <__aeabi_i2d>
 800ef42:	e8e6 0102 	strd	r0, r1, [r6], #8
 800ef46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef48:	46b3      	mov	fp, r6
 800ef4a:	461c      	mov	r4, r3
 800ef4c:	2700      	movs	r7, #0
 800ef4e:	f04f 0800 	mov.w	r8, #0
 800ef52:	f04f 0900 	mov.w	r9, #0
 800ef56:	9b06      	ldr	r3, [sp, #24]
 800ef58:	429f      	cmp	r7, r3
 800ef5a:	dd06      	ble.n	800ef6a <__kernel_rem_pio2+0x3c2>
 800ef5c:	ab70      	add	r3, sp, #448	; 0x1c0
 800ef5e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800ef62:	e9c3 8900 	strd	r8, r9, [r3]
 800ef66:	3501      	adds	r5, #1
 800ef68:	e7de      	b.n	800ef28 <__kernel_rem_pio2+0x380>
 800ef6a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800ef6e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800ef72:	f7f1 fb59 	bl	8000628 <__aeabi_dmul>
 800ef76:	4602      	mov	r2, r0
 800ef78:	460b      	mov	r3, r1
 800ef7a:	4640      	mov	r0, r8
 800ef7c:	4649      	mov	r1, r9
 800ef7e:	f7f1 f99d 	bl	80002bc <__adddf3>
 800ef82:	3701      	adds	r7, #1
 800ef84:	4680      	mov	r8, r0
 800ef86:	4689      	mov	r9, r1
 800ef88:	e7e5      	b.n	800ef56 <__kernel_rem_pio2+0x3ae>
 800ef8a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ef8e:	e754      	b.n	800ee3a <__kernel_rem_pio2+0x292>
 800ef90:	ec47 6b10 	vmov	d0, r6, r7
 800ef94:	f1ca 0000 	rsb	r0, sl, #0
 800ef98:	f000 fb2e 	bl	800f5f8 <scalbn>
 800ef9c:	ec57 6b10 	vmov	r6, r7, d0
 800efa0:	4b9f      	ldr	r3, [pc, #636]	; (800f220 <__kernel_rem_pio2+0x678>)
 800efa2:	ee10 0a10 	vmov	r0, s0
 800efa6:	2200      	movs	r2, #0
 800efa8:	4639      	mov	r1, r7
 800efaa:	f7f1 fdc3 	bl	8000b34 <__aeabi_dcmpge>
 800efae:	b300      	cbz	r0, 800eff2 <__kernel_rem_pio2+0x44a>
 800efb0:	4b9c      	ldr	r3, [pc, #624]	; (800f224 <__kernel_rem_pio2+0x67c>)
 800efb2:	2200      	movs	r2, #0
 800efb4:	4630      	mov	r0, r6
 800efb6:	4639      	mov	r1, r7
 800efb8:	f7f1 fb36 	bl	8000628 <__aeabi_dmul>
 800efbc:	f7f1 fde4 	bl	8000b88 <__aeabi_d2iz>
 800efc0:	4605      	mov	r5, r0
 800efc2:	f7f1 fac7 	bl	8000554 <__aeabi_i2d>
 800efc6:	4b96      	ldr	r3, [pc, #600]	; (800f220 <__kernel_rem_pio2+0x678>)
 800efc8:	2200      	movs	r2, #0
 800efca:	f7f1 fb2d 	bl	8000628 <__aeabi_dmul>
 800efce:	460b      	mov	r3, r1
 800efd0:	4602      	mov	r2, r0
 800efd2:	4639      	mov	r1, r7
 800efd4:	4630      	mov	r0, r6
 800efd6:	f7f1 f96f 	bl	80002b8 <__aeabi_dsub>
 800efda:	f7f1 fdd5 	bl	8000b88 <__aeabi_d2iz>
 800efde:	f104 0b01 	add.w	fp, r4, #1
 800efe2:	ab0c      	add	r3, sp, #48	; 0x30
 800efe4:	f10a 0a18 	add.w	sl, sl, #24
 800efe8:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800efec:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 800eff0:	e72b      	b.n	800ee4a <__kernel_rem_pio2+0x2a2>
 800eff2:	4630      	mov	r0, r6
 800eff4:	4639      	mov	r1, r7
 800eff6:	f7f1 fdc7 	bl	8000b88 <__aeabi_d2iz>
 800effa:	ab0c      	add	r3, sp, #48	; 0x30
 800effc:	46a3      	mov	fp, r4
 800effe:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800f002:	e722      	b.n	800ee4a <__kernel_rem_pio2+0x2a2>
 800f004:	ab70      	add	r3, sp, #448	; 0x1c0
 800f006:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800f00a:	ab0c      	add	r3, sp, #48	; 0x30
 800f00c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800f010:	f7f1 faa0 	bl	8000554 <__aeabi_i2d>
 800f014:	4622      	mov	r2, r4
 800f016:	462b      	mov	r3, r5
 800f018:	f7f1 fb06 	bl	8000628 <__aeabi_dmul>
 800f01c:	4632      	mov	r2, r6
 800f01e:	e9c9 0100 	strd	r0, r1, [r9]
 800f022:	463b      	mov	r3, r7
 800f024:	4620      	mov	r0, r4
 800f026:	4629      	mov	r1, r5
 800f028:	f7f1 fafe 	bl	8000628 <__aeabi_dmul>
 800f02c:	f108 38ff 	add.w	r8, r8, #4294967295
 800f030:	4604      	mov	r4, r0
 800f032:	460d      	mov	r5, r1
 800f034:	e713      	b.n	800ee5e <__kernel_rem_pio2+0x2b6>
 800f036:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800f03a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800f03e:	f7f1 faf3 	bl	8000628 <__aeabi_dmul>
 800f042:	4602      	mov	r2, r0
 800f044:	460b      	mov	r3, r1
 800f046:	4620      	mov	r0, r4
 800f048:	4629      	mov	r1, r5
 800f04a:	f7f1 f937 	bl	80002bc <__adddf3>
 800f04e:	3601      	adds	r6, #1
 800f050:	4604      	mov	r4, r0
 800f052:	460d      	mov	r5, r1
 800f054:	9b04      	ldr	r3, [sp, #16]
 800f056:	429e      	cmp	r6, r3
 800f058:	dc01      	bgt.n	800f05e <__kernel_rem_pio2+0x4b6>
 800f05a:	45b0      	cmp	r8, r6
 800f05c:	daeb      	bge.n	800f036 <__kernel_rem_pio2+0x48e>
 800f05e:	ab48      	add	r3, sp, #288	; 0x120
 800f060:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800f064:	e9c3 4500 	strd	r4, r5, [r3]
 800f068:	3f01      	subs	r7, #1
 800f06a:	f108 0801 	add.w	r8, r8, #1
 800f06e:	e6ff      	b.n	800ee70 <__kernel_rem_pio2+0x2c8>
 800f070:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800f072:	2b02      	cmp	r3, #2
 800f074:	dc0b      	bgt.n	800f08e <__kernel_rem_pio2+0x4e6>
 800f076:	2b00      	cmp	r3, #0
 800f078:	dc6e      	bgt.n	800f158 <__kernel_rem_pio2+0x5b0>
 800f07a:	d045      	beq.n	800f108 <__kernel_rem_pio2+0x560>
 800f07c:	9b07      	ldr	r3, [sp, #28]
 800f07e:	f003 0007 	and.w	r0, r3, #7
 800f082:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800f086:	ecbd 8b02 	vpop	{d8}
 800f08a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f08e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800f090:	2b03      	cmp	r3, #3
 800f092:	d1f3      	bne.n	800f07c <__kernel_rem_pio2+0x4d4>
 800f094:	ab48      	add	r3, sp, #288	; 0x120
 800f096:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800f09a:	46d0      	mov	r8, sl
 800f09c:	46d9      	mov	r9, fp
 800f09e:	f1b9 0f00 	cmp.w	r9, #0
 800f0a2:	f1a8 0808 	sub.w	r8, r8, #8
 800f0a6:	dc64      	bgt.n	800f172 <__kernel_rem_pio2+0x5ca>
 800f0a8:	465c      	mov	r4, fp
 800f0aa:	2c01      	cmp	r4, #1
 800f0ac:	f1aa 0a08 	sub.w	sl, sl, #8
 800f0b0:	dc7e      	bgt.n	800f1b0 <__kernel_rem_pio2+0x608>
 800f0b2:	2000      	movs	r0, #0
 800f0b4:	2100      	movs	r1, #0
 800f0b6:	f1bb 0f01 	cmp.w	fp, #1
 800f0ba:	f300 8097 	bgt.w	800f1ec <__kernel_rem_pio2+0x644>
 800f0be:	9b02      	ldr	r3, [sp, #8]
 800f0c0:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800f0c4:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	f040 8099 	bne.w	800f200 <__kernel_rem_pio2+0x658>
 800f0ce:	9b01      	ldr	r3, [sp, #4]
 800f0d0:	e9c3 5600 	strd	r5, r6, [r3]
 800f0d4:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800f0d8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800f0dc:	e7ce      	b.n	800f07c <__kernel_rem_pio2+0x4d4>
 800f0de:	ab48      	add	r3, sp, #288	; 0x120
 800f0e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f0e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0e8:	f7f1 f8e8 	bl	80002bc <__adddf3>
 800f0ec:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f0f0:	f1bb 0f00 	cmp.w	fp, #0
 800f0f4:	daf3      	bge.n	800f0de <__kernel_rem_pio2+0x536>
 800f0f6:	9b02      	ldr	r3, [sp, #8]
 800f0f8:	b113      	cbz	r3, 800f100 <__kernel_rem_pio2+0x558>
 800f0fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f0fe:	4619      	mov	r1, r3
 800f100:	9b01      	ldr	r3, [sp, #4]
 800f102:	e9c3 0100 	strd	r0, r1, [r3]
 800f106:	e7b9      	b.n	800f07c <__kernel_rem_pio2+0x4d4>
 800f108:	2000      	movs	r0, #0
 800f10a:	2100      	movs	r1, #0
 800f10c:	e7f0      	b.n	800f0f0 <__kernel_rem_pio2+0x548>
 800f10e:	ab48      	add	r3, sp, #288	; 0x120
 800f110:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f114:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f118:	f7f1 f8d0 	bl	80002bc <__adddf3>
 800f11c:	3c01      	subs	r4, #1
 800f11e:	2c00      	cmp	r4, #0
 800f120:	daf5      	bge.n	800f10e <__kernel_rem_pio2+0x566>
 800f122:	9b02      	ldr	r3, [sp, #8]
 800f124:	b1e3      	cbz	r3, 800f160 <__kernel_rem_pio2+0x5b8>
 800f126:	4602      	mov	r2, r0
 800f128:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f12c:	9c01      	ldr	r4, [sp, #4]
 800f12e:	e9c4 2300 	strd	r2, r3, [r4]
 800f132:	4602      	mov	r2, r0
 800f134:	460b      	mov	r3, r1
 800f136:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800f13a:	f7f1 f8bd 	bl	80002b8 <__aeabi_dsub>
 800f13e:	ad4a      	add	r5, sp, #296	; 0x128
 800f140:	2401      	movs	r4, #1
 800f142:	45a3      	cmp	fp, r4
 800f144:	da0f      	bge.n	800f166 <__kernel_rem_pio2+0x5be>
 800f146:	9b02      	ldr	r3, [sp, #8]
 800f148:	b113      	cbz	r3, 800f150 <__kernel_rem_pio2+0x5a8>
 800f14a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f14e:	4619      	mov	r1, r3
 800f150:	9b01      	ldr	r3, [sp, #4]
 800f152:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800f156:	e791      	b.n	800f07c <__kernel_rem_pio2+0x4d4>
 800f158:	465c      	mov	r4, fp
 800f15a:	2000      	movs	r0, #0
 800f15c:	2100      	movs	r1, #0
 800f15e:	e7de      	b.n	800f11e <__kernel_rem_pio2+0x576>
 800f160:	4602      	mov	r2, r0
 800f162:	460b      	mov	r3, r1
 800f164:	e7e2      	b.n	800f12c <__kernel_rem_pio2+0x584>
 800f166:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800f16a:	f7f1 f8a7 	bl	80002bc <__adddf3>
 800f16e:	3401      	adds	r4, #1
 800f170:	e7e7      	b.n	800f142 <__kernel_rem_pio2+0x59a>
 800f172:	e9d8 4500 	ldrd	r4, r5, [r8]
 800f176:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800f17a:	4620      	mov	r0, r4
 800f17c:	4632      	mov	r2, r6
 800f17e:	463b      	mov	r3, r7
 800f180:	4629      	mov	r1, r5
 800f182:	f7f1 f89b 	bl	80002bc <__adddf3>
 800f186:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f18a:	4602      	mov	r2, r0
 800f18c:	460b      	mov	r3, r1
 800f18e:	4620      	mov	r0, r4
 800f190:	4629      	mov	r1, r5
 800f192:	f7f1 f891 	bl	80002b8 <__aeabi_dsub>
 800f196:	4632      	mov	r2, r6
 800f198:	463b      	mov	r3, r7
 800f19a:	f7f1 f88f 	bl	80002bc <__adddf3>
 800f19e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800f1a2:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800f1a6:	ed88 7b00 	vstr	d7, [r8]
 800f1aa:	f109 39ff 	add.w	r9, r9, #4294967295
 800f1ae:	e776      	b.n	800f09e <__kernel_rem_pio2+0x4f6>
 800f1b0:	e9da 8900 	ldrd	r8, r9, [sl]
 800f1b4:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800f1b8:	4640      	mov	r0, r8
 800f1ba:	4632      	mov	r2, r6
 800f1bc:	463b      	mov	r3, r7
 800f1be:	4649      	mov	r1, r9
 800f1c0:	f7f1 f87c 	bl	80002bc <__adddf3>
 800f1c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f1c8:	4602      	mov	r2, r0
 800f1ca:	460b      	mov	r3, r1
 800f1cc:	4640      	mov	r0, r8
 800f1ce:	4649      	mov	r1, r9
 800f1d0:	f7f1 f872 	bl	80002b8 <__aeabi_dsub>
 800f1d4:	4632      	mov	r2, r6
 800f1d6:	463b      	mov	r3, r7
 800f1d8:	f7f1 f870 	bl	80002bc <__adddf3>
 800f1dc:	ed9d 7b04 	vldr	d7, [sp, #16]
 800f1e0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f1e4:	ed8a 7b00 	vstr	d7, [sl]
 800f1e8:	3c01      	subs	r4, #1
 800f1ea:	e75e      	b.n	800f0aa <__kernel_rem_pio2+0x502>
 800f1ec:	ab48      	add	r3, sp, #288	; 0x120
 800f1ee:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f1f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1f6:	f7f1 f861 	bl	80002bc <__adddf3>
 800f1fa:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f1fe:	e75a      	b.n	800f0b6 <__kernel_rem_pio2+0x50e>
 800f200:	9b01      	ldr	r3, [sp, #4]
 800f202:	9a01      	ldr	r2, [sp, #4]
 800f204:	601d      	str	r5, [r3, #0]
 800f206:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800f20a:	605c      	str	r4, [r3, #4]
 800f20c:	609f      	str	r7, [r3, #8]
 800f20e:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800f212:	60d3      	str	r3, [r2, #12]
 800f214:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f218:	6110      	str	r0, [r2, #16]
 800f21a:	6153      	str	r3, [r2, #20]
 800f21c:	e72e      	b.n	800f07c <__kernel_rem_pio2+0x4d4>
 800f21e:	bf00      	nop
 800f220:	41700000 	.word	0x41700000
 800f224:	3e700000 	.word	0x3e700000

0800f228 <__kernel_sin>:
 800f228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f22c:	ed2d 8b04 	vpush	{d8-d9}
 800f230:	eeb0 8a41 	vmov.f32	s16, s2
 800f234:	eef0 8a61 	vmov.f32	s17, s3
 800f238:	ec55 4b10 	vmov	r4, r5, d0
 800f23c:	b083      	sub	sp, #12
 800f23e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f242:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800f246:	9001      	str	r0, [sp, #4]
 800f248:	da06      	bge.n	800f258 <__kernel_sin+0x30>
 800f24a:	ee10 0a10 	vmov	r0, s0
 800f24e:	4629      	mov	r1, r5
 800f250:	f7f1 fc9a 	bl	8000b88 <__aeabi_d2iz>
 800f254:	2800      	cmp	r0, #0
 800f256:	d051      	beq.n	800f2fc <__kernel_sin+0xd4>
 800f258:	4622      	mov	r2, r4
 800f25a:	462b      	mov	r3, r5
 800f25c:	4620      	mov	r0, r4
 800f25e:	4629      	mov	r1, r5
 800f260:	f7f1 f9e2 	bl	8000628 <__aeabi_dmul>
 800f264:	4682      	mov	sl, r0
 800f266:	468b      	mov	fp, r1
 800f268:	4602      	mov	r2, r0
 800f26a:	460b      	mov	r3, r1
 800f26c:	4620      	mov	r0, r4
 800f26e:	4629      	mov	r1, r5
 800f270:	f7f1 f9da 	bl	8000628 <__aeabi_dmul>
 800f274:	a341      	add	r3, pc, #260	; (adr r3, 800f37c <__kernel_sin+0x154>)
 800f276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f27a:	4680      	mov	r8, r0
 800f27c:	4689      	mov	r9, r1
 800f27e:	4650      	mov	r0, sl
 800f280:	4659      	mov	r1, fp
 800f282:	f7f1 f9d1 	bl	8000628 <__aeabi_dmul>
 800f286:	a33f      	add	r3, pc, #252	; (adr r3, 800f384 <__kernel_sin+0x15c>)
 800f288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f28c:	f7f1 f814 	bl	80002b8 <__aeabi_dsub>
 800f290:	4652      	mov	r2, sl
 800f292:	465b      	mov	r3, fp
 800f294:	f7f1 f9c8 	bl	8000628 <__aeabi_dmul>
 800f298:	a33c      	add	r3, pc, #240	; (adr r3, 800f38c <__kernel_sin+0x164>)
 800f29a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f29e:	f7f1 f80d 	bl	80002bc <__adddf3>
 800f2a2:	4652      	mov	r2, sl
 800f2a4:	465b      	mov	r3, fp
 800f2a6:	f7f1 f9bf 	bl	8000628 <__aeabi_dmul>
 800f2aa:	a33a      	add	r3, pc, #232	; (adr r3, 800f394 <__kernel_sin+0x16c>)
 800f2ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2b0:	f7f1 f802 	bl	80002b8 <__aeabi_dsub>
 800f2b4:	4652      	mov	r2, sl
 800f2b6:	465b      	mov	r3, fp
 800f2b8:	f7f1 f9b6 	bl	8000628 <__aeabi_dmul>
 800f2bc:	a337      	add	r3, pc, #220	; (adr r3, 800f39c <__kernel_sin+0x174>)
 800f2be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2c2:	f7f0 fffb 	bl	80002bc <__adddf3>
 800f2c6:	9b01      	ldr	r3, [sp, #4]
 800f2c8:	4606      	mov	r6, r0
 800f2ca:	460f      	mov	r7, r1
 800f2cc:	b9eb      	cbnz	r3, 800f30a <__kernel_sin+0xe2>
 800f2ce:	4602      	mov	r2, r0
 800f2d0:	460b      	mov	r3, r1
 800f2d2:	4650      	mov	r0, sl
 800f2d4:	4659      	mov	r1, fp
 800f2d6:	f7f1 f9a7 	bl	8000628 <__aeabi_dmul>
 800f2da:	a325      	add	r3, pc, #148	; (adr r3, 800f370 <__kernel_sin+0x148>)
 800f2dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2e0:	f7f0 ffea 	bl	80002b8 <__aeabi_dsub>
 800f2e4:	4642      	mov	r2, r8
 800f2e6:	464b      	mov	r3, r9
 800f2e8:	f7f1 f99e 	bl	8000628 <__aeabi_dmul>
 800f2ec:	4602      	mov	r2, r0
 800f2ee:	460b      	mov	r3, r1
 800f2f0:	4620      	mov	r0, r4
 800f2f2:	4629      	mov	r1, r5
 800f2f4:	f7f0 ffe2 	bl	80002bc <__adddf3>
 800f2f8:	4604      	mov	r4, r0
 800f2fa:	460d      	mov	r5, r1
 800f2fc:	ec45 4b10 	vmov	d0, r4, r5
 800f300:	b003      	add	sp, #12
 800f302:	ecbd 8b04 	vpop	{d8-d9}
 800f306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f30a:	4b1b      	ldr	r3, [pc, #108]	; (800f378 <__kernel_sin+0x150>)
 800f30c:	ec51 0b18 	vmov	r0, r1, d8
 800f310:	2200      	movs	r2, #0
 800f312:	f7f1 f989 	bl	8000628 <__aeabi_dmul>
 800f316:	4632      	mov	r2, r6
 800f318:	ec41 0b19 	vmov	d9, r0, r1
 800f31c:	463b      	mov	r3, r7
 800f31e:	4640      	mov	r0, r8
 800f320:	4649      	mov	r1, r9
 800f322:	f7f1 f981 	bl	8000628 <__aeabi_dmul>
 800f326:	4602      	mov	r2, r0
 800f328:	460b      	mov	r3, r1
 800f32a:	ec51 0b19 	vmov	r0, r1, d9
 800f32e:	f7f0 ffc3 	bl	80002b8 <__aeabi_dsub>
 800f332:	4652      	mov	r2, sl
 800f334:	465b      	mov	r3, fp
 800f336:	f7f1 f977 	bl	8000628 <__aeabi_dmul>
 800f33a:	ec53 2b18 	vmov	r2, r3, d8
 800f33e:	f7f0 ffbb 	bl	80002b8 <__aeabi_dsub>
 800f342:	a30b      	add	r3, pc, #44	; (adr r3, 800f370 <__kernel_sin+0x148>)
 800f344:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f348:	4606      	mov	r6, r0
 800f34a:	460f      	mov	r7, r1
 800f34c:	4640      	mov	r0, r8
 800f34e:	4649      	mov	r1, r9
 800f350:	f7f1 f96a 	bl	8000628 <__aeabi_dmul>
 800f354:	4602      	mov	r2, r0
 800f356:	460b      	mov	r3, r1
 800f358:	4630      	mov	r0, r6
 800f35a:	4639      	mov	r1, r7
 800f35c:	f7f0 ffae 	bl	80002bc <__adddf3>
 800f360:	4602      	mov	r2, r0
 800f362:	460b      	mov	r3, r1
 800f364:	4620      	mov	r0, r4
 800f366:	4629      	mov	r1, r5
 800f368:	f7f0 ffa6 	bl	80002b8 <__aeabi_dsub>
 800f36c:	e7c4      	b.n	800f2f8 <__kernel_sin+0xd0>
 800f36e:	bf00      	nop
 800f370:	55555549 	.word	0x55555549
 800f374:	3fc55555 	.word	0x3fc55555
 800f378:	3fe00000 	.word	0x3fe00000
 800f37c:	5acfd57c 	.word	0x5acfd57c
 800f380:	3de5d93a 	.word	0x3de5d93a
 800f384:	8a2b9ceb 	.word	0x8a2b9ceb
 800f388:	3e5ae5e6 	.word	0x3e5ae5e6
 800f38c:	57b1fe7d 	.word	0x57b1fe7d
 800f390:	3ec71de3 	.word	0x3ec71de3
 800f394:	19c161d5 	.word	0x19c161d5
 800f398:	3f2a01a0 	.word	0x3f2a01a0
 800f39c:	1110f8a6 	.word	0x1110f8a6
 800f3a0:	3f811111 	.word	0x3f811111

0800f3a4 <fabs>:
 800f3a4:	ec51 0b10 	vmov	r0, r1, d0
 800f3a8:	ee10 2a10 	vmov	r2, s0
 800f3ac:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f3b0:	ec43 2b10 	vmov	d0, r2, r3
 800f3b4:	4770      	bx	lr

0800f3b6 <finite>:
 800f3b6:	b082      	sub	sp, #8
 800f3b8:	ed8d 0b00 	vstr	d0, [sp]
 800f3bc:	9801      	ldr	r0, [sp, #4]
 800f3be:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800f3c2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800f3c6:	0fc0      	lsrs	r0, r0, #31
 800f3c8:	b002      	add	sp, #8
 800f3ca:	4770      	bx	lr
 800f3cc:	0000      	movs	r0, r0
	...

0800f3d0 <floor>:
 800f3d0:	ec51 0b10 	vmov	r0, r1, d0
 800f3d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3d8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800f3dc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800f3e0:	2e13      	cmp	r6, #19
 800f3e2:	ee10 5a10 	vmov	r5, s0
 800f3e6:	ee10 8a10 	vmov	r8, s0
 800f3ea:	460c      	mov	r4, r1
 800f3ec:	dc32      	bgt.n	800f454 <floor+0x84>
 800f3ee:	2e00      	cmp	r6, #0
 800f3f0:	da14      	bge.n	800f41c <floor+0x4c>
 800f3f2:	a333      	add	r3, pc, #204	; (adr r3, 800f4c0 <floor+0xf0>)
 800f3f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3f8:	f7f0 ff60 	bl	80002bc <__adddf3>
 800f3fc:	2200      	movs	r2, #0
 800f3fe:	2300      	movs	r3, #0
 800f400:	f7f1 fba2 	bl	8000b48 <__aeabi_dcmpgt>
 800f404:	b138      	cbz	r0, 800f416 <floor+0x46>
 800f406:	2c00      	cmp	r4, #0
 800f408:	da57      	bge.n	800f4ba <floor+0xea>
 800f40a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800f40e:	431d      	orrs	r5, r3
 800f410:	d001      	beq.n	800f416 <floor+0x46>
 800f412:	4c2d      	ldr	r4, [pc, #180]	; (800f4c8 <floor+0xf8>)
 800f414:	2500      	movs	r5, #0
 800f416:	4621      	mov	r1, r4
 800f418:	4628      	mov	r0, r5
 800f41a:	e025      	b.n	800f468 <floor+0x98>
 800f41c:	4f2b      	ldr	r7, [pc, #172]	; (800f4cc <floor+0xfc>)
 800f41e:	4137      	asrs	r7, r6
 800f420:	ea01 0307 	and.w	r3, r1, r7
 800f424:	4303      	orrs	r3, r0
 800f426:	d01f      	beq.n	800f468 <floor+0x98>
 800f428:	a325      	add	r3, pc, #148	; (adr r3, 800f4c0 <floor+0xf0>)
 800f42a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f42e:	f7f0 ff45 	bl	80002bc <__adddf3>
 800f432:	2200      	movs	r2, #0
 800f434:	2300      	movs	r3, #0
 800f436:	f7f1 fb87 	bl	8000b48 <__aeabi_dcmpgt>
 800f43a:	2800      	cmp	r0, #0
 800f43c:	d0eb      	beq.n	800f416 <floor+0x46>
 800f43e:	2c00      	cmp	r4, #0
 800f440:	bfbe      	ittt	lt
 800f442:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800f446:	fa43 f606 	asrlt.w	r6, r3, r6
 800f44a:	19a4      	addlt	r4, r4, r6
 800f44c:	ea24 0407 	bic.w	r4, r4, r7
 800f450:	2500      	movs	r5, #0
 800f452:	e7e0      	b.n	800f416 <floor+0x46>
 800f454:	2e33      	cmp	r6, #51	; 0x33
 800f456:	dd0b      	ble.n	800f470 <floor+0xa0>
 800f458:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800f45c:	d104      	bne.n	800f468 <floor+0x98>
 800f45e:	ee10 2a10 	vmov	r2, s0
 800f462:	460b      	mov	r3, r1
 800f464:	f7f0 ff2a 	bl	80002bc <__adddf3>
 800f468:	ec41 0b10 	vmov	d0, r0, r1
 800f46c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f470:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800f474:	f04f 33ff 	mov.w	r3, #4294967295
 800f478:	fa23 f707 	lsr.w	r7, r3, r7
 800f47c:	4207      	tst	r7, r0
 800f47e:	d0f3      	beq.n	800f468 <floor+0x98>
 800f480:	a30f      	add	r3, pc, #60	; (adr r3, 800f4c0 <floor+0xf0>)
 800f482:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f486:	f7f0 ff19 	bl	80002bc <__adddf3>
 800f48a:	2200      	movs	r2, #0
 800f48c:	2300      	movs	r3, #0
 800f48e:	f7f1 fb5b 	bl	8000b48 <__aeabi_dcmpgt>
 800f492:	2800      	cmp	r0, #0
 800f494:	d0bf      	beq.n	800f416 <floor+0x46>
 800f496:	2c00      	cmp	r4, #0
 800f498:	da02      	bge.n	800f4a0 <floor+0xd0>
 800f49a:	2e14      	cmp	r6, #20
 800f49c:	d103      	bne.n	800f4a6 <floor+0xd6>
 800f49e:	3401      	adds	r4, #1
 800f4a0:	ea25 0507 	bic.w	r5, r5, r7
 800f4a4:	e7b7      	b.n	800f416 <floor+0x46>
 800f4a6:	2301      	movs	r3, #1
 800f4a8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800f4ac:	fa03 f606 	lsl.w	r6, r3, r6
 800f4b0:	4435      	add	r5, r6
 800f4b2:	4545      	cmp	r5, r8
 800f4b4:	bf38      	it	cc
 800f4b6:	18e4      	addcc	r4, r4, r3
 800f4b8:	e7f2      	b.n	800f4a0 <floor+0xd0>
 800f4ba:	2500      	movs	r5, #0
 800f4bc:	462c      	mov	r4, r5
 800f4be:	e7aa      	b.n	800f416 <floor+0x46>
 800f4c0:	8800759c 	.word	0x8800759c
 800f4c4:	7e37e43c 	.word	0x7e37e43c
 800f4c8:	bff00000 	.word	0xbff00000
 800f4cc:	000fffff 	.word	0x000fffff

0800f4d0 <nan>:
 800f4d0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800f4d8 <nan+0x8>
 800f4d4:	4770      	bx	lr
 800f4d6:	bf00      	nop
 800f4d8:	00000000 	.word	0x00000000
 800f4dc:	7ff80000 	.word	0x7ff80000

0800f4e0 <rint>:
 800f4e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f4e2:	ec51 0b10 	vmov	r0, r1, d0
 800f4e6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f4ea:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800f4ee:	2e13      	cmp	r6, #19
 800f4f0:	ee10 4a10 	vmov	r4, s0
 800f4f4:	460b      	mov	r3, r1
 800f4f6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800f4fa:	dc58      	bgt.n	800f5ae <rint+0xce>
 800f4fc:	2e00      	cmp	r6, #0
 800f4fe:	da2b      	bge.n	800f558 <rint+0x78>
 800f500:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800f504:	4302      	orrs	r2, r0
 800f506:	d023      	beq.n	800f550 <rint+0x70>
 800f508:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800f50c:	4302      	orrs	r2, r0
 800f50e:	4254      	negs	r4, r2
 800f510:	4314      	orrs	r4, r2
 800f512:	0c4b      	lsrs	r3, r1, #17
 800f514:	0b24      	lsrs	r4, r4, #12
 800f516:	045b      	lsls	r3, r3, #17
 800f518:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800f51c:	ea44 0103 	orr.w	r1, r4, r3
 800f520:	4b32      	ldr	r3, [pc, #200]	; (800f5ec <rint+0x10c>)
 800f522:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800f526:	e9d3 6700 	ldrd	r6, r7, [r3]
 800f52a:	4602      	mov	r2, r0
 800f52c:	460b      	mov	r3, r1
 800f52e:	4630      	mov	r0, r6
 800f530:	4639      	mov	r1, r7
 800f532:	f7f0 fec3 	bl	80002bc <__adddf3>
 800f536:	e9cd 0100 	strd	r0, r1, [sp]
 800f53a:	463b      	mov	r3, r7
 800f53c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f540:	4632      	mov	r2, r6
 800f542:	f7f0 feb9 	bl	80002b8 <__aeabi_dsub>
 800f546:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f54a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800f54e:	4639      	mov	r1, r7
 800f550:	ec41 0b10 	vmov	d0, r0, r1
 800f554:	b003      	add	sp, #12
 800f556:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f558:	4a25      	ldr	r2, [pc, #148]	; (800f5f0 <rint+0x110>)
 800f55a:	4132      	asrs	r2, r6
 800f55c:	ea01 0702 	and.w	r7, r1, r2
 800f560:	4307      	orrs	r7, r0
 800f562:	d0f5      	beq.n	800f550 <rint+0x70>
 800f564:	0851      	lsrs	r1, r2, #1
 800f566:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800f56a:	4314      	orrs	r4, r2
 800f56c:	d00c      	beq.n	800f588 <rint+0xa8>
 800f56e:	ea23 0201 	bic.w	r2, r3, r1
 800f572:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800f576:	2e13      	cmp	r6, #19
 800f578:	fa43 f606 	asr.w	r6, r3, r6
 800f57c:	bf0c      	ite	eq
 800f57e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800f582:	2400      	movne	r4, #0
 800f584:	ea42 0306 	orr.w	r3, r2, r6
 800f588:	4918      	ldr	r1, [pc, #96]	; (800f5ec <rint+0x10c>)
 800f58a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800f58e:	4622      	mov	r2, r4
 800f590:	e9d5 4500 	ldrd	r4, r5, [r5]
 800f594:	4620      	mov	r0, r4
 800f596:	4629      	mov	r1, r5
 800f598:	f7f0 fe90 	bl	80002bc <__adddf3>
 800f59c:	e9cd 0100 	strd	r0, r1, [sp]
 800f5a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f5a4:	4622      	mov	r2, r4
 800f5a6:	462b      	mov	r3, r5
 800f5a8:	f7f0 fe86 	bl	80002b8 <__aeabi_dsub>
 800f5ac:	e7d0      	b.n	800f550 <rint+0x70>
 800f5ae:	2e33      	cmp	r6, #51	; 0x33
 800f5b0:	dd07      	ble.n	800f5c2 <rint+0xe2>
 800f5b2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800f5b6:	d1cb      	bne.n	800f550 <rint+0x70>
 800f5b8:	ee10 2a10 	vmov	r2, s0
 800f5bc:	f7f0 fe7e 	bl	80002bc <__adddf3>
 800f5c0:	e7c6      	b.n	800f550 <rint+0x70>
 800f5c2:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800f5c6:	f04f 36ff 	mov.w	r6, #4294967295
 800f5ca:	40d6      	lsrs	r6, r2
 800f5cc:	4230      	tst	r0, r6
 800f5ce:	d0bf      	beq.n	800f550 <rint+0x70>
 800f5d0:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800f5d4:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800f5d8:	bf1f      	itttt	ne
 800f5da:	ea24 0101 	bicne.w	r1, r4, r1
 800f5de:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800f5e2:	fa44 f202 	asrne.w	r2, r4, r2
 800f5e6:	ea41 0402 	orrne.w	r4, r1, r2
 800f5ea:	e7cd      	b.n	800f588 <rint+0xa8>
 800f5ec:	08033028 	.word	0x08033028
 800f5f0:	000fffff 	.word	0x000fffff
 800f5f4:	00000000 	.word	0x00000000

0800f5f8 <scalbn>:
 800f5f8:	b570      	push	{r4, r5, r6, lr}
 800f5fa:	ec55 4b10 	vmov	r4, r5, d0
 800f5fe:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800f602:	4606      	mov	r6, r0
 800f604:	462b      	mov	r3, r5
 800f606:	b99a      	cbnz	r2, 800f630 <scalbn+0x38>
 800f608:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f60c:	4323      	orrs	r3, r4
 800f60e:	d036      	beq.n	800f67e <scalbn+0x86>
 800f610:	4b39      	ldr	r3, [pc, #228]	; (800f6f8 <scalbn+0x100>)
 800f612:	4629      	mov	r1, r5
 800f614:	ee10 0a10 	vmov	r0, s0
 800f618:	2200      	movs	r2, #0
 800f61a:	f7f1 f805 	bl	8000628 <__aeabi_dmul>
 800f61e:	4b37      	ldr	r3, [pc, #220]	; (800f6fc <scalbn+0x104>)
 800f620:	429e      	cmp	r6, r3
 800f622:	4604      	mov	r4, r0
 800f624:	460d      	mov	r5, r1
 800f626:	da10      	bge.n	800f64a <scalbn+0x52>
 800f628:	a32b      	add	r3, pc, #172	; (adr r3, 800f6d8 <scalbn+0xe0>)
 800f62a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f62e:	e03a      	b.n	800f6a6 <scalbn+0xae>
 800f630:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800f634:	428a      	cmp	r2, r1
 800f636:	d10c      	bne.n	800f652 <scalbn+0x5a>
 800f638:	ee10 2a10 	vmov	r2, s0
 800f63c:	4620      	mov	r0, r4
 800f63e:	4629      	mov	r1, r5
 800f640:	f7f0 fe3c 	bl	80002bc <__adddf3>
 800f644:	4604      	mov	r4, r0
 800f646:	460d      	mov	r5, r1
 800f648:	e019      	b.n	800f67e <scalbn+0x86>
 800f64a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f64e:	460b      	mov	r3, r1
 800f650:	3a36      	subs	r2, #54	; 0x36
 800f652:	4432      	add	r2, r6
 800f654:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800f658:	428a      	cmp	r2, r1
 800f65a:	dd08      	ble.n	800f66e <scalbn+0x76>
 800f65c:	2d00      	cmp	r5, #0
 800f65e:	a120      	add	r1, pc, #128	; (adr r1, 800f6e0 <scalbn+0xe8>)
 800f660:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f664:	da1c      	bge.n	800f6a0 <scalbn+0xa8>
 800f666:	a120      	add	r1, pc, #128	; (adr r1, 800f6e8 <scalbn+0xf0>)
 800f668:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f66c:	e018      	b.n	800f6a0 <scalbn+0xa8>
 800f66e:	2a00      	cmp	r2, #0
 800f670:	dd08      	ble.n	800f684 <scalbn+0x8c>
 800f672:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f676:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f67a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f67e:	ec45 4b10 	vmov	d0, r4, r5
 800f682:	bd70      	pop	{r4, r5, r6, pc}
 800f684:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800f688:	da19      	bge.n	800f6be <scalbn+0xc6>
 800f68a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800f68e:	429e      	cmp	r6, r3
 800f690:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800f694:	dd0a      	ble.n	800f6ac <scalbn+0xb4>
 800f696:	a112      	add	r1, pc, #72	; (adr r1, 800f6e0 <scalbn+0xe8>)
 800f698:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d1e2      	bne.n	800f666 <scalbn+0x6e>
 800f6a0:	a30f      	add	r3, pc, #60	; (adr r3, 800f6e0 <scalbn+0xe8>)
 800f6a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6a6:	f7f0 ffbf 	bl	8000628 <__aeabi_dmul>
 800f6aa:	e7cb      	b.n	800f644 <scalbn+0x4c>
 800f6ac:	a10a      	add	r1, pc, #40	; (adr r1, 800f6d8 <scalbn+0xe0>)
 800f6ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d0b8      	beq.n	800f628 <scalbn+0x30>
 800f6b6:	a10e      	add	r1, pc, #56	; (adr r1, 800f6f0 <scalbn+0xf8>)
 800f6b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f6bc:	e7b4      	b.n	800f628 <scalbn+0x30>
 800f6be:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f6c2:	3236      	adds	r2, #54	; 0x36
 800f6c4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f6c8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800f6cc:	4620      	mov	r0, r4
 800f6ce:	4b0c      	ldr	r3, [pc, #48]	; (800f700 <scalbn+0x108>)
 800f6d0:	2200      	movs	r2, #0
 800f6d2:	e7e8      	b.n	800f6a6 <scalbn+0xae>
 800f6d4:	f3af 8000 	nop.w
 800f6d8:	c2f8f359 	.word	0xc2f8f359
 800f6dc:	01a56e1f 	.word	0x01a56e1f
 800f6e0:	8800759c 	.word	0x8800759c
 800f6e4:	7e37e43c 	.word	0x7e37e43c
 800f6e8:	8800759c 	.word	0x8800759c
 800f6ec:	fe37e43c 	.word	0xfe37e43c
 800f6f0:	c2f8f359 	.word	0xc2f8f359
 800f6f4:	81a56e1f 	.word	0x81a56e1f
 800f6f8:	43500000 	.word	0x43500000
 800f6fc:	ffff3cb0 	.word	0xffff3cb0
 800f700:	3c900000 	.word	0x3c900000

0800f704 <nanf>:
 800f704:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800f70c <nanf+0x8>
 800f708:	4770      	bx	lr
 800f70a:	bf00      	nop
 800f70c:	7fc00000 	.word	0x7fc00000

0800f710 <abort>:
 800f710:	b508      	push	{r3, lr}
 800f712:	2006      	movs	r0, #6
 800f714:	f000 f950 	bl	800f9b8 <raise>
 800f718:	2001      	movs	r0, #1
 800f71a:	f7f3 fd2b 	bl	8003174 <_exit>
	...

0800f720 <__errno>:
 800f720:	4b01      	ldr	r3, [pc, #4]	; (800f728 <__errno+0x8>)
 800f722:	6818      	ldr	r0, [r3, #0]
 800f724:	4770      	bx	lr
 800f726:	bf00      	nop
 800f728:	20000014 	.word	0x20000014

0800f72c <__libc_init_array>:
 800f72c:	b570      	push	{r4, r5, r6, lr}
 800f72e:	4d0d      	ldr	r5, [pc, #52]	; (800f764 <__libc_init_array+0x38>)
 800f730:	4c0d      	ldr	r4, [pc, #52]	; (800f768 <__libc_init_array+0x3c>)
 800f732:	1b64      	subs	r4, r4, r5
 800f734:	10a4      	asrs	r4, r4, #2
 800f736:	2600      	movs	r6, #0
 800f738:	42a6      	cmp	r6, r4
 800f73a:	d109      	bne.n	800f750 <__libc_init_array+0x24>
 800f73c:	4d0b      	ldr	r5, [pc, #44]	; (800f76c <__libc_init_array+0x40>)
 800f73e:	4c0c      	ldr	r4, [pc, #48]	; (800f770 <__libc_init_array+0x44>)
 800f740:	f000 fca2 	bl	8010088 <_init>
 800f744:	1b64      	subs	r4, r4, r5
 800f746:	10a4      	asrs	r4, r4, #2
 800f748:	2600      	movs	r6, #0
 800f74a:	42a6      	cmp	r6, r4
 800f74c:	d105      	bne.n	800f75a <__libc_init_array+0x2e>
 800f74e:	bd70      	pop	{r4, r5, r6, pc}
 800f750:	f855 3b04 	ldr.w	r3, [r5], #4
 800f754:	4798      	blx	r3
 800f756:	3601      	adds	r6, #1
 800f758:	e7ee      	b.n	800f738 <__libc_init_array+0xc>
 800f75a:	f855 3b04 	ldr.w	r3, [r5], #4
 800f75e:	4798      	blx	r3
 800f760:	3601      	adds	r6, #1
 800f762:	e7f2      	b.n	800f74a <__libc_init_array+0x1e>
 800f764:	08033074 	.word	0x08033074
 800f768:	08033074 	.word	0x08033074
 800f76c:	08033074 	.word	0x08033074
 800f770:	08033078 	.word	0x08033078

0800f774 <malloc>:
 800f774:	4b02      	ldr	r3, [pc, #8]	; (800f780 <malloc+0xc>)
 800f776:	4601      	mov	r1, r0
 800f778:	6818      	ldr	r0, [r3, #0]
 800f77a:	f000 b88b 	b.w	800f894 <_malloc_r>
 800f77e:	bf00      	nop
 800f780:	20000014 	.word	0x20000014

0800f784 <free>:
 800f784:	4b02      	ldr	r3, [pc, #8]	; (800f790 <free+0xc>)
 800f786:	4601      	mov	r1, r0
 800f788:	6818      	ldr	r0, [r3, #0]
 800f78a:	f000 b833 	b.w	800f7f4 <_free_r>
 800f78e:	bf00      	nop
 800f790:	20000014 	.word	0x20000014

0800f794 <memcpy>:
 800f794:	440a      	add	r2, r1
 800f796:	4291      	cmp	r1, r2
 800f798:	f100 33ff 	add.w	r3, r0, #4294967295
 800f79c:	d100      	bne.n	800f7a0 <memcpy+0xc>
 800f79e:	4770      	bx	lr
 800f7a0:	b510      	push	{r4, lr}
 800f7a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f7a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f7aa:	4291      	cmp	r1, r2
 800f7ac:	d1f9      	bne.n	800f7a2 <memcpy+0xe>
 800f7ae:	bd10      	pop	{r4, pc}

0800f7b0 <memmove>:
 800f7b0:	4288      	cmp	r0, r1
 800f7b2:	b510      	push	{r4, lr}
 800f7b4:	eb01 0402 	add.w	r4, r1, r2
 800f7b8:	d902      	bls.n	800f7c0 <memmove+0x10>
 800f7ba:	4284      	cmp	r4, r0
 800f7bc:	4623      	mov	r3, r4
 800f7be:	d807      	bhi.n	800f7d0 <memmove+0x20>
 800f7c0:	1e43      	subs	r3, r0, #1
 800f7c2:	42a1      	cmp	r1, r4
 800f7c4:	d008      	beq.n	800f7d8 <memmove+0x28>
 800f7c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f7ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f7ce:	e7f8      	b.n	800f7c2 <memmove+0x12>
 800f7d0:	4402      	add	r2, r0
 800f7d2:	4601      	mov	r1, r0
 800f7d4:	428a      	cmp	r2, r1
 800f7d6:	d100      	bne.n	800f7da <memmove+0x2a>
 800f7d8:	bd10      	pop	{r4, pc}
 800f7da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f7de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f7e2:	e7f7      	b.n	800f7d4 <memmove+0x24>

0800f7e4 <memset>:
 800f7e4:	4402      	add	r2, r0
 800f7e6:	4603      	mov	r3, r0
 800f7e8:	4293      	cmp	r3, r2
 800f7ea:	d100      	bne.n	800f7ee <memset+0xa>
 800f7ec:	4770      	bx	lr
 800f7ee:	f803 1b01 	strb.w	r1, [r3], #1
 800f7f2:	e7f9      	b.n	800f7e8 <memset+0x4>

0800f7f4 <_free_r>:
 800f7f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f7f6:	2900      	cmp	r1, #0
 800f7f8:	d048      	beq.n	800f88c <_free_r+0x98>
 800f7fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f7fe:	9001      	str	r0, [sp, #4]
 800f800:	2b00      	cmp	r3, #0
 800f802:	f1a1 0404 	sub.w	r4, r1, #4
 800f806:	bfb8      	it	lt
 800f808:	18e4      	addlt	r4, r4, r3
 800f80a:	f000 f911 	bl	800fa30 <__malloc_lock>
 800f80e:	4a20      	ldr	r2, [pc, #128]	; (800f890 <_free_r+0x9c>)
 800f810:	9801      	ldr	r0, [sp, #4]
 800f812:	6813      	ldr	r3, [r2, #0]
 800f814:	4615      	mov	r5, r2
 800f816:	b933      	cbnz	r3, 800f826 <_free_r+0x32>
 800f818:	6063      	str	r3, [r4, #4]
 800f81a:	6014      	str	r4, [r2, #0]
 800f81c:	b003      	add	sp, #12
 800f81e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f822:	f000 b90b 	b.w	800fa3c <__malloc_unlock>
 800f826:	42a3      	cmp	r3, r4
 800f828:	d90b      	bls.n	800f842 <_free_r+0x4e>
 800f82a:	6821      	ldr	r1, [r4, #0]
 800f82c:	1862      	adds	r2, r4, r1
 800f82e:	4293      	cmp	r3, r2
 800f830:	bf04      	itt	eq
 800f832:	681a      	ldreq	r2, [r3, #0]
 800f834:	685b      	ldreq	r3, [r3, #4]
 800f836:	6063      	str	r3, [r4, #4]
 800f838:	bf04      	itt	eq
 800f83a:	1852      	addeq	r2, r2, r1
 800f83c:	6022      	streq	r2, [r4, #0]
 800f83e:	602c      	str	r4, [r5, #0]
 800f840:	e7ec      	b.n	800f81c <_free_r+0x28>
 800f842:	461a      	mov	r2, r3
 800f844:	685b      	ldr	r3, [r3, #4]
 800f846:	b10b      	cbz	r3, 800f84c <_free_r+0x58>
 800f848:	42a3      	cmp	r3, r4
 800f84a:	d9fa      	bls.n	800f842 <_free_r+0x4e>
 800f84c:	6811      	ldr	r1, [r2, #0]
 800f84e:	1855      	adds	r5, r2, r1
 800f850:	42a5      	cmp	r5, r4
 800f852:	d10b      	bne.n	800f86c <_free_r+0x78>
 800f854:	6824      	ldr	r4, [r4, #0]
 800f856:	4421      	add	r1, r4
 800f858:	1854      	adds	r4, r2, r1
 800f85a:	42a3      	cmp	r3, r4
 800f85c:	6011      	str	r1, [r2, #0]
 800f85e:	d1dd      	bne.n	800f81c <_free_r+0x28>
 800f860:	681c      	ldr	r4, [r3, #0]
 800f862:	685b      	ldr	r3, [r3, #4]
 800f864:	6053      	str	r3, [r2, #4]
 800f866:	4421      	add	r1, r4
 800f868:	6011      	str	r1, [r2, #0]
 800f86a:	e7d7      	b.n	800f81c <_free_r+0x28>
 800f86c:	d902      	bls.n	800f874 <_free_r+0x80>
 800f86e:	230c      	movs	r3, #12
 800f870:	6003      	str	r3, [r0, #0]
 800f872:	e7d3      	b.n	800f81c <_free_r+0x28>
 800f874:	6825      	ldr	r5, [r4, #0]
 800f876:	1961      	adds	r1, r4, r5
 800f878:	428b      	cmp	r3, r1
 800f87a:	bf04      	itt	eq
 800f87c:	6819      	ldreq	r1, [r3, #0]
 800f87e:	685b      	ldreq	r3, [r3, #4]
 800f880:	6063      	str	r3, [r4, #4]
 800f882:	bf04      	itt	eq
 800f884:	1949      	addeq	r1, r1, r5
 800f886:	6021      	streq	r1, [r4, #0]
 800f888:	6054      	str	r4, [r2, #4]
 800f88a:	e7c7      	b.n	800f81c <_free_r+0x28>
 800f88c:	b003      	add	sp, #12
 800f88e:	bd30      	pop	{r4, r5, pc}
 800f890:	20007f8c 	.word	0x20007f8c

0800f894 <_malloc_r>:
 800f894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f896:	1ccd      	adds	r5, r1, #3
 800f898:	f025 0503 	bic.w	r5, r5, #3
 800f89c:	3508      	adds	r5, #8
 800f89e:	2d0c      	cmp	r5, #12
 800f8a0:	bf38      	it	cc
 800f8a2:	250c      	movcc	r5, #12
 800f8a4:	2d00      	cmp	r5, #0
 800f8a6:	4606      	mov	r6, r0
 800f8a8:	db01      	blt.n	800f8ae <_malloc_r+0x1a>
 800f8aa:	42a9      	cmp	r1, r5
 800f8ac:	d903      	bls.n	800f8b6 <_malloc_r+0x22>
 800f8ae:	230c      	movs	r3, #12
 800f8b0:	6033      	str	r3, [r6, #0]
 800f8b2:	2000      	movs	r0, #0
 800f8b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f8b6:	f000 f8bb 	bl	800fa30 <__malloc_lock>
 800f8ba:	4921      	ldr	r1, [pc, #132]	; (800f940 <_malloc_r+0xac>)
 800f8bc:	680a      	ldr	r2, [r1, #0]
 800f8be:	4614      	mov	r4, r2
 800f8c0:	b99c      	cbnz	r4, 800f8ea <_malloc_r+0x56>
 800f8c2:	4f20      	ldr	r7, [pc, #128]	; (800f944 <_malloc_r+0xb0>)
 800f8c4:	683b      	ldr	r3, [r7, #0]
 800f8c6:	b923      	cbnz	r3, 800f8d2 <_malloc_r+0x3e>
 800f8c8:	4621      	mov	r1, r4
 800f8ca:	4630      	mov	r0, r6
 800f8cc:	f000 f83c 	bl	800f948 <_sbrk_r>
 800f8d0:	6038      	str	r0, [r7, #0]
 800f8d2:	4629      	mov	r1, r5
 800f8d4:	4630      	mov	r0, r6
 800f8d6:	f000 f837 	bl	800f948 <_sbrk_r>
 800f8da:	1c43      	adds	r3, r0, #1
 800f8dc:	d123      	bne.n	800f926 <_malloc_r+0x92>
 800f8de:	230c      	movs	r3, #12
 800f8e0:	6033      	str	r3, [r6, #0]
 800f8e2:	4630      	mov	r0, r6
 800f8e4:	f000 f8aa 	bl	800fa3c <__malloc_unlock>
 800f8e8:	e7e3      	b.n	800f8b2 <_malloc_r+0x1e>
 800f8ea:	6823      	ldr	r3, [r4, #0]
 800f8ec:	1b5b      	subs	r3, r3, r5
 800f8ee:	d417      	bmi.n	800f920 <_malloc_r+0x8c>
 800f8f0:	2b0b      	cmp	r3, #11
 800f8f2:	d903      	bls.n	800f8fc <_malloc_r+0x68>
 800f8f4:	6023      	str	r3, [r4, #0]
 800f8f6:	441c      	add	r4, r3
 800f8f8:	6025      	str	r5, [r4, #0]
 800f8fa:	e004      	b.n	800f906 <_malloc_r+0x72>
 800f8fc:	6863      	ldr	r3, [r4, #4]
 800f8fe:	42a2      	cmp	r2, r4
 800f900:	bf0c      	ite	eq
 800f902:	600b      	streq	r3, [r1, #0]
 800f904:	6053      	strne	r3, [r2, #4]
 800f906:	4630      	mov	r0, r6
 800f908:	f000 f898 	bl	800fa3c <__malloc_unlock>
 800f90c:	f104 000b 	add.w	r0, r4, #11
 800f910:	1d23      	adds	r3, r4, #4
 800f912:	f020 0007 	bic.w	r0, r0, #7
 800f916:	1ac2      	subs	r2, r0, r3
 800f918:	d0cc      	beq.n	800f8b4 <_malloc_r+0x20>
 800f91a:	1a1b      	subs	r3, r3, r0
 800f91c:	50a3      	str	r3, [r4, r2]
 800f91e:	e7c9      	b.n	800f8b4 <_malloc_r+0x20>
 800f920:	4622      	mov	r2, r4
 800f922:	6864      	ldr	r4, [r4, #4]
 800f924:	e7cc      	b.n	800f8c0 <_malloc_r+0x2c>
 800f926:	1cc4      	adds	r4, r0, #3
 800f928:	f024 0403 	bic.w	r4, r4, #3
 800f92c:	42a0      	cmp	r0, r4
 800f92e:	d0e3      	beq.n	800f8f8 <_malloc_r+0x64>
 800f930:	1a21      	subs	r1, r4, r0
 800f932:	4630      	mov	r0, r6
 800f934:	f000 f808 	bl	800f948 <_sbrk_r>
 800f938:	3001      	adds	r0, #1
 800f93a:	d1dd      	bne.n	800f8f8 <_malloc_r+0x64>
 800f93c:	e7cf      	b.n	800f8de <_malloc_r+0x4a>
 800f93e:	bf00      	nop
 800f940:	20007f8c 	.word	0x20007f8c
 800f944:	20007f90 	.word	0x20007f90

0800f948 <_sbrk_r>:
 800f948:	b538      	push	{r3, r4, r5, lr}
 800f94a:	4d06      	ldr	r5, [pc, #24]	; (800f964 <_sbrk_r+0x1c>)
 800f94c:	2300      	movs	r3, #0
 800f94e:	4604      	mov	r4, r0
 800f950:	4608      	mov	r0, r1
 800f952:	602b      	str	r3, [r5, #0]
 800f954:	f7f3 fc18 	bl	8003188 <_sbrk>
 800f958:	1c43      	adds	r3, r0, #1
 800f95a:	d102      	bne.n	800f962 <_sbrk_r+0x1a>
 800f95c:	682b      	ldr	r3, [r5, #0]
 800f95e:	b103      	cbz	r3, 800f962 <_sbrk_r+0x1a>
 800f960:	6023      	str	r3, [r4, #0]
 800f962:	bd38      	pop	{r3, r4, r5, pc}
 800f964:	20007f98 	.word	0x20007f98

0800f968 <_raise_r>:
 800f968:	291f      	cmp	r1, #31
 800f96a:	b538      	push	{r3, r4, r5, lr}
 800f96c:	4604      	mov	r4, r0
 800f96e:	460d      	mov	r5, r1
 800f970:	d904      	bls.n	800f97c <_raise_r+0x14>
 800f972:	2316      	movs	r3, #22
 800f974:	6003      	str	r3, [r0, #0]
 800f976:	f04f 30ff 	mov.w	r0, #4294967295
 800f97a:	bd38      	pop	{r3, r4, r5, pc}
 800f97c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f97e:	b112      	cbz	r2, 800f986 <_raise_r+0x1e>
 800f980:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f984:	b94b      	cbnz	r3, 800f99a <_raise_r+0x32>
 800f986:	4620      	mov	r0, r4
 800f988:	f000 f830 	bl	800f9ec <_getpid_r>
 800f98c:	462a      	mov	r2, r5
 800f98e:	4601      	mov	r1, r0
 800f990:	4620      	mov	r0, r4
 800f992:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f996:	f000 b817 	b.w	800f9c8 <_kill_r>
 800f99a:	2b01      	cmp	r3, #1
 800f99c:	d00a      	beq.n	800f9b4 <_raise_r+0x4c>
 800f99e:	1c59      	adds	r1, r3, #1
 800f9a0:	d103      	bne.n	800f9aa <_raise_r+0x42>
 800f9a2:	2316      	movs	r3, #22
 800f9a4:	6003      	str	r3, [r0, #0]
 800f9a6:	2001      	movs	r0, #1
 800f9a8:	e7e7      	b.n	800f97a <_raise_r+0x12>
 800f9aa:	2400      	movs	r4, #0
 800f9ac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f9b0:	4628      	mov	r0, r5
 800f9b2:	4798      	blx	r3
 800f9b4:	2000      	movs	r0, #0
 800f9b6:	e7e0      	b.n	800f97a <_raise_r+0x12>

0800f9b8 <raise>:
 800f9b8:	4b02      	ldr	r3, [pc, #8]	; (800f9c4 <raise+0xc>)
 800f9ba:	4601      	mov	r1, r0
 800f9bc:	6818      	ldr	r0, [r3, #0]
 800f9be:	f7ff bfd3 	b.w	800f968 <_raise_r>
 800f9c2:	bf00      	nop
 800f9c4:	20000014 	.word	0x20000014

0800f9c8 <_kill_r>:
 800f9c8:	b538      	push	{r3, r4, r5, lr}
 800f9ca:	4d07      	ldr	r5, [pc, #28]	; (800f9e8 <_kill_r+0x20>)
 800f9cc:	2300      	movs	r3, #0
 800f9ce:	4604      	mov	r4, r0
 800f9d0:	4608      	mov	r0, r1
 800f9d2:	4611      	mov	r1, r2
 800f9d4:	602b      	str	r3, [r5, #0]
 800f9d6:	f7f3 fbbd 	bl	8003154 <_kill>
 800f9da:	1c43      	adds	r3, r0, #1
 800f9dc:	d102      	bne.n	800f9e4 <_kill_r+0x1c>
 800f9de:	682b      	ldr	r3, [r5, #0]
 800f9e0:	b103      	cbz	r3, 800f9e4 <_kill_r+0x1c>
 800f9e2:	6023      	str	r3, [r4, #0]
 800f9e4:	bd38      	pop	{r3, r4, r5, pc}
 800f9e6:	bf00      	nop
 800f9e8:	20007f98 	.word	0x20007f98

0800f9ec <_getpid_r>:
 800f9ec:	f7f3 bbaa 	b.w	8003144 <_getpid>

0800f9f0 <siprintf>:
 800f9f0:	b40e      	push	{r1, r2, r3}
 800f9f2:	b500      	push	{lr}
 800f9f4:	b09c      	sub	sp, #112	; 0x70
 800f9f6:	ab1d      	add	r3, sp, #116	; 0x74
 800f9f8:	9002      	str	r0, [sp, #8]
 800f9fa:	9006      	str	r0, [sp, #24]
 800f9fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800fa00:	4809      	ldr	r0, [pc, #36]	; (800fa28 <siprintf+0x38>)
 800fa02:	9107      	str	r1, [sp, #28]
 800fa04:	9104      	str	r1, [sp, #16]
 800fa06:	4909      	ldr	r1, [pc, #36]	; (800fa2c <siprintf+0x3c>)
 800fa08:	f853 2b04 	ldr.w	r2, [r3], #4
 800fa0c:	9105      	str	r1, [sp, #20]
 800fa0e:	6800      	ldr	r0, [r0, #0]
 800fa10:	9301      	str	r3, [sp, #4]
 800fa12:	a902      	add	r1, sp, #8
 800fa14:	f000 f874 	bl	800fb00 <_svfiprintf_r>
 800fa18:	9b02      	ldr	r3, [sp, #8]
 800fa1a:	2200      	movs	r2, #0
 800fa1c:	701a      	strb	r2, [r3, #0]
 800fa1e:	b01c      	add	sp, #112	; 0x70
 800fa20:	f85d eb04 	ldr.w	lr, [sp], #4
 800fa24:	b003      	add	sp, #12
 800fa26:	4770      	bx	lr
 800fa28:	20000014 	.word	0x20000014
 800fa2c:	ffff0208 	.word	0xffff0208

0800fa30 <__malloc_lock>:
 800fa30:	4801      	ldr	r0, [pc, #4]	; (800fa38 <__malloc_lock+0x8>)
 800fa32:	f000 baf9 	b.w	8010028 <__retarget_lock_acquire_recursive>
 800fa36:	bf00      	nop
 800fa38:	20007fa0 	.word	0x20007fa0

0800fa3c <__malloc_unlock>:
 800fa3c:	4801      	ldr	r0, [pc, #4]	; (800fa44 <__malloc_unlock+0x8>)
 800fa3e:	f000 baf4 	b.w	801002a <__retarget_lock_release_recursive>
 800fa42:	bf00      	nop
 800fa44:	20007fa0 	.word	0x20007fa0

0800fa48 <__ssputs_r>:
 800fa48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fa4c:	688e      	ldr	r6, [r1, #8]
 800fa4e:	429e      	cmp	r6, r3
 800fa50:	4682      	mov	sl, r0
 800fa52:	460c      	mov	r4, r1
 800fa54:	4690      	mov	r8, r2
 800fa56:	461f      	mov	r7, r3
 800fa58:	d838      	bhi.n	800facc <__ssputs_r+0x84>
 800fa5a:	898a      	ldrh	r2, [r1, #12]
 800fa5c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fa60:	d032      	beq.n	800fac8 <__ssputs_r+0x80>
 800fa62:	6825      	ldr	r5, [r4, #0]
 800fa64:	6909      	ldr	r1, [r1, #16]
 800fa66:	eba5 0901 	sub.w	r9, r5, r1
 800fa6a:	6965      	ldr	r5, [r4, #20]
 800fa6c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fa70:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fa74:	3301      	adds	r3, #1
 800fa76:	444b      	add	r3, r9
 800fa78:	106d      	asrs	r5, r5, #1
 800fa7a:	429d      	cmp	r5, r3
 800fa7c:	bf38      	it	cc
 800fa7e:	461d      	movcc	r5, r3
 800fa80:	0553      	lsls	r3, r2, #21
 800fa82:	d531      	bpl.n	800fae8 <__ssputs_r+0xa0>
 800fa84:	4629      	mov	r1, r5
 800fa86:	f7ff ff05 	bl	800f894 <_malloc_r>
 800fa8a:	4606      	mov	r6, r0
 800fa8c:	b950      	cbnz	r0, 800faa4 <__ssputs_r+0x5c>
 800fa8e:	230c      	movs	r3, #12
 800fa90:	f8ca 3000 	str.w	r3, [sl]
 800fa94:	89a3      	ldrh	r3, [r4, #12]
 800fa96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fa9a:	81a3      	strh	r3, [r4, #12]
 800fa9c:	f04f 30ff 	mov.w	r0, #4294967295
 800faa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800faa4:	6921      	ldr	r1, [r4, #16]
 800faa6:	464a      	mov	r2, r9
 800faa8:	f7ff fe74 	bl	800f794 <memcpy>
 800faac:	89a3      	ldrh	r3, [r4, #12]
 800faae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fab2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fab6:	81a3      	strh	r3, [r4, #12]
 800fab8:	6126      	str	r6, [r4, #16]
 800faba:	6165      	str	r5, [r4, #20]
 800fabc:	444e      	add	r6, r9
 800fabe:	eba5 0509 	sub.w	r5, r5, r9
 800fac2:	6026      	str	r6, [r4, #0]
 800fac4:	60a5      	str	r5, [r4, #8]
 800fac6:	463e      	mov	r6, r7
 800fac8:	42be      	cmp	r6, r7
 800faca:	d900      	bls.n	800face <__ssputs_r+0x86>
 800facc:	463e      	mov	r6, r7
 800face:	4632      	mov	r2, r6
 800fad0:	6820      	ldr	r0, [r4, #0]
 800fad2:	4641      	mov	r1, r8
 800fad4:	f7ff fe6c 	bl	800f7b0 <memmove>
 800fad8:	68a3      	ldr	r3, [r4, #8]
 800fada:	6822      	ldr	r2, [r4, #0]
 800fadc:	1b9b      	subs	r3, r3, r6
 800fade:	4432      	add	r2, r6
 800fae0:	60a3      	str	r3, [r4, #8]
 800fae2:	6022      	str	r2, [r4, #0]
 800fae4:	2000      	movs	r0, #0
 800fae6:	e7db      	b.n	800faa0 <__ssputs_r+0x58>
 800fae8:	462a      	mov	r2, r5
 800faea:	f000 fa9f 	bl	801002c <_realloc_r>
 800faee:	4606      	mov	r6, r0
 800faf0:	2800      	cmp	r0, #0
 800faf2:	d1e1      	bne.n	800fab8 <__ssputs_r+0x70>
 800faf4:	6921      	ldr	r1, [r4, #16]
 800faf6:	4650      	mov	r0, sl
 800faf8:	f7ff fe7c 	bl	800f7f4 <_free_r>
 800fafc:	e7c7      	b.n	800fa8e <__ssputs_r+0x46>
	...

0800fb00 <_svfiprintf_r>:
 800fb00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb04:	4698      	mov	r8, r3
 800fb06:	898b      	ldrh	r3, [r1, #12]
 800fb08:	061b      	lsls	r3, r3, #24
 800fb0a:	b09d      	sub	sp, #116	; 0x74
 800fb0c:	4607      	mov	r7, r0
 800fb0e:	460d      	mov	r5, r1
 800fb10:	4614      	mov	r4, r2
 800fb12:	d50e      	bpl.n	800fb32 <_svfiprintf_r+0x32>
 800fb14:	690b      	ldr	r3, [r1, #16]
 800fb16:	b963      	cbnz	r3, 800fb32 <_svfiprintf_r+0x32>
 800fb18:	2140      	movs	r1, #64	; 0x40
 800fb1a:	f7ff febb 	bl	800f894 <_malloc_r>
 800fb1e:	6028      	str	r0, [r5, #0]
 800fb20:	6128      	str	r0, [r5, #16]
 800fb22:	b920      	cbnz	r0, 800fb2e <_svfiprintf_r+0x2e>
 800fb24:	230c      	movs	r3, #12
 800fb26:	603b      	str	r3, [r7, #0]
 800fb28:	f04f 30ff 	mov.w	r0, #4294967295
 800fb2c:	e0d1      	b.n	800fcd2 <_svfiprintf_r+0x1d2>
 800fb2e:	2340      	movs	r3, #64	; 0x40
 800fb30:	616b      	str	r3, [r5, #20]
 800fb32:	2300      	movs	r3, #0
 800fb34:	9309      	str	r3, [sp, #36]	; 0x24
 800fb36:	2320      	movs	r3, #32
 800fb38:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fb3c:	f8cd 800c 	str.w	r8, [sp, #12]
 800fb40:	2330      	movs	r3, #48	; 0x30
 800fb42:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800fcec <_svfiprintf_r+0x1ec>
 800fb46:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fb4a:	f04f 0901 	mov.w	r9, #1
 800fb4e:	4623      	mov	r3, r4
 800fb50:	469a      	mov	sl, r3
 800fb52:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fb56:	b10a      	cbz	r2, 800fb5c <_svfiprintf_r+0x5c>
 800fb58:	2a25      	cmp	r2, #37	; 0x25
 800fb5a:	d1f9      	bne.n	800fb50 <_svfiprintf_r+0x50>
 800fb5c:	ebba 0b04 	subs.w	fp, sl, r4
 800fb60:	d00b      	beq.n	800fb7a <_svfiprintf_r+0x7a>
 800fb62:	465b      	mov	r3, fp
 800fb64:	4622      	mov	r2, r4
 800fb66:	4629      	mov	r1, r5
 800fb68:	4638      	mov	r0, r7
 800fb6a:	f7ff ff6d 	bl	800fa48 <__ssputs_r>
 800fb6e:	3001      	adds	r0, #1
 800fb70:	f000 80aa 	beq.w	800fcc8 <_svfiprintf_r+0x1c8>
 800fb74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fb76:	445a      	add	r2, fp
 800fb78:	9209      	str	r2, [sp, #36]	; 0x24
 800fb7a:	f89a 3000 	ldrb.w	r3, [sl]
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	f000 80a2 	beq.w	800fcc8 <_svfiprintf_r+0x1c8>
 800fb84:	2300      	movs	r3, #0
 800fb86:	f04f 32ff 	mov.w	r2, #4294967295
 800fb8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fb8e:	f10a 0a01 	add.w	sl, sl, #1
 800fb92:	9304      	str	r3, [sp, #16]
 800fb94:	9307      	str	r3, [sp, #28]
 800fb96:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fb9a:	931a      	str	r3, [sp, #104]	; 0x68
 800fb9c:	4654      	mov	r4, sl
 800fb9e:	2205      	movs	r2, #5
 800fba0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fba4:	4851      	ldr	r0, [pc, #324]	; (800fcec <_svfiprintf_r+0x1ec>)
 800fba6:	f7f0 fb33 	bl	8000210 <memchr>
 800fbaa:	9a04      	ldr	r2, [sp, #16]
 800fbac:	b9d8      	cbnz	r0, 800fbe6 <_svfiprintf_r+0xe6>
 800fbae:	06d0      	lsls	r0, r2, #27
 800fbb0:	bf44      	itt	mi
 800fbb2:	2320      	movmi	r3, #32
 800fbb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fbb8:	0711      	lsls	r1, r2, #28
 800fbba:	bf44      	itt	mi
 800fbbc:	232b      	movmi	r3, #43	; 0x2b
 800fbbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fbc2:	f89a 3000 	ldrb.w	r3, [sl]
 800fbc6:	2b2a      	cmp	r3, #42	; 0x2a
 800fbc8:	d015      	beq.n	800fbf6 <_svfiprintf_r+0xf6>
 800fbca:	9a07      	ldr	r2, [sp, #28]
 800fbcc:	4654      	mov	r4, sl
 800fbce:	2000      	movs	r0, #0
 800fbd0:	f04f 0c0a 	mov.w	ip, #10
 800fbd4:	4621      	mov	r1, r4
 800fbd6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fbda:	3b30      	subs	r3, #48	; 0x30
 800fbdc:	2b09      	cmp	r3, #9
 800fbde:	d94e      	bls.n	800fc7e <_svfiprintf_r+0x17e>
 800fbe0:	b1b0      	cbz	r0, 800fc10 <_svfiprintf_r+0x110>
 800fbe2:	9207      	str	r2, [sp, #28]
 800fbe4:	e014      	b.n	800fc10 <_svfiprintf_r+0x110>
 800fbe6:	eba0 0308 	sub.w	r3, r0, r8
 800fbea:	fa09 f303 	lsl.w	r3, r9, r3
 800fbee:	4313      	orrs	r3, r2
 800fbf0:	9304      	str	r3, [sp, #16]
 800fbf2:	46a2      	mov	sl, r4
 800fbf4:	e7d2      	b.n	800fb9c <_svfiprintf_r+0x9c>
 800fbf6:	9b03      	ldr	r3, [sp, #12]
 800fbf8:	1d19      	adds	r1, r3, #4
 800fbfa:	681b      	ldr	r3, [r3, #0]
 800fbfc:	9103      	str	r1, [sp, #12]
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	bfbb      	ittet	lt
 800fc02:	425b      	neglt	r3, r3
 800fc04:	f042 0202 	orrlt.w	r2, r2, #2
 800fc08:	9307      	strge	r3, [sp, #28]
 800fc0a:	9307      	strlt	r3, [sp, #28]
 800fc0c:	bfb8      	it	lt
 800fc0e:	9204      	strlt	r2, [sp, #16]
 800fc10:	7823      	ldrb	r3, [r4, #0]
 800fc12:	2b2e      	cmp	r3, #46	; 0x2e
 800fc14:	d10c      	bne.n	800fc30 <_svfiprintf_r+0x130>
 800fc16:	7863      	ldrb	r3, [r4, #1]
 800fc18:	2b2a      	cmp	r3, #42	; 0x2a
 800fc1a:	d135      	bne.n	800fc88 <_svfiprintf_r+0x188>
 800fc1c:	9b03      	ldr	r3, [sp, #12]
 800fc1e:	1d1a      	adds	r2, r3, #4
 800fc20:	681b      	ldr	r3, [r3, #0]
 800fc22:	9203      	str	r2, [sp, #12]
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	bfb8      	it	lt
 800fc28:	f04f 33ff 	movlt.w	r3, #4294967295
 800fc2c:	3402      	adds	r4, #2
 800fc2e:	9305      	str	r3, [sp, #20]
 800fc30:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800fcfc <_svfiprintf_r+0x1fc>
 800fc34:	7821      	ldrb	r1, [r4, #0]
 800fc36:	2203      	movs	r2, #3
 800fc38:	4650      	mov	r0, sl
 800fc3a:	f7f0 fae9 	bl	8000210 <memchr>
 800fc3e:	b140      	cbz	r0, 800fc52 <_svfiprintf_r+0x152>
 800fc40:	2340      	movs	r3, #64	; 0x40
 800fc42:	eba0 000a 	sub.w	r0, r0, sl
 800fc46:	fa03 f000 	lsl.w	r0, r3, r0
 800fc4a:	9b04      	ldr	r3, [sp, #16]
 800fc4c:	4303      	orrs	r3, r0
 800fc4e:	3401      	adds	r4, #1
 800fc50:	9304      	str	r3, [sp, #16]
 800fc52:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fc56:	4826      	ldr	r0, [pc, #152]	; (800fcf0 <_svfiprintf_r+0x1f0>)
 800fc58:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fc5c:	2206      	movs	r2, #6
 800fc5e:	f7f0 fad7 	bl	8000210 <memchr>
 800fc62:	2800      	cmp	r0, #0
 800fc64:	d038      	beq.n	800fcd8 <_svfiprintf_r+0x1d8>
 800fc66:	4b23      	ldr	r3, [pc, #140]	; (800fcf4 <_svfiprintf_r+0x1f4>)
 800fc68:	bb1b      	cbnz	r3, 800fcb2 <_svfiprintf_r+0x1b2>
 800fc6a:	9b03      	ldr	r3, [sp, #12]
 800fc6c:	3307      	adds	r3, #7
 800fc6e:	f023 0307 	bic.w	r3, r3, #7
 800fc72:	3308      	adds	r3, #8
 800fc74:	9303      	str	r3, [sp, #12]
 800fc76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fc78:	4433      	add	r3, r6
 800fc7a:	9309      	str	r3, [sp, #36]	; 0x24
 800fc7c:	e767      	b.n	800fb4e <_svfiprintf_r+0x4e>
 800fc7e:	fb0c 3202 	mla	r2, ip, r2, r3
 800fc82:	460c      	mov	r4, r1
 800fc84:	2001      	movs	r0, #1
 800fc86:	e7a5      	b.n	800fbd4 <_svfiprintf_r+0xd4>
 800fc88:	2300      	movs	r3, #0
 800fc8a:	3401      	adds	r4, #1
 800fc8c:	9305      	str	r3, [sp, #20]
 800fc8e:	4619      	mov	r1, r3
 800fc90:	f04f 0c0a 	mov.w	ip, #10
 800fc94:	4620      	mov	r0, r4
 800fc96:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fc9a:	3a30      	subs	r2, #48	; 0x30
 800fc9c:	2a09      	cmp	r2, #9
 800fc9e:	d903      	bls.n	800fca8 <_svfiprintf_r+0x1a8>
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d0c5      	beq.n	800fc30 <_svfiprintf_r+0x130>
 800fca4:	9105      	str	r1, [sp, #20]
 800fca6:	e7c3      	b.n	800fc30 <_svfiprintf_r+0x130>
 800fca8:	fb0c 2101 	mla	r1, ip, r1, r2
 800fcac:	4604      	mov	r4, r0
 800fcae:	2301      	movs	r3, #1
 800fcb0:	e7f0      	b.n	800fc94 <_svfiprintf_r+0x194>
 800fcb2:	ab03      	add	r3, sp, #12
 800fcb4:	9300      	str	r3, [sp, #0]
 800fcb6:	462a      	mov	r2, r5
 800fcb8:	4b0f      	ldr	r3, [pc, #60]	; (800fcf8 <_svfiprintf_r+0x1f8>)
 800fcba:	a904      	add	r1, sp, #16
 800fcbc:	4638      	mov	r0, r7
 800fcbe:	f3af 8000 	nop.w
 800fcc2:	1c42      	adds	r2, r0, #1
 800fcc4:	4606      	mov	r6, r0
 800fcc6:	d1d6      	bne.n	800fc76 <_svfiprintf_r+0x176>
 800fcc8:	89ab      	ldrh	r3, [r5, #12]
 800fcca:	065b      	lsls	r3, r3, #25
 800fccc:	f53f af2c 	bmi.w	800fb28 <_svfiprintf_r+0x28>
 800fcd0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fcd2:	b01d      	add	sp, #116	; 0x74
 800fcd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcd8:	ab03      	add	r3, sp, #12
 800fcda:	9300      	str	r3, [sp, #0]
 800fcdc:	462a      	mov	r2, r5
 800fcde:	4b06      	ldr	r3, [pc, #24]	; (800fcf8 <_svfiprintf_r+0x1f8>)
 800fce0:	a904      	add	r1, sp, #16
 800fce2:	4638      	mov	r0, r7
 800fce4:	f000 f87a 	bl	800fddc <_printf_i>
 800fce8:	e7eb      	b.n	800fcc2 <_svfiprintf_r+0x1c2>
 800fcea:	bf00      	nop
 800fcec:	08033038 	.word	0x08033038
 800fcf0:	08033042 	.word	0x08033042
 800fcf4:	00000000 	.word	0x00000000
 800fcf8:	0800fa49 	.word	0x0800fa49
 800fcfc:	0803303e 	.word	0x0803303e

0800fd00 <_printf_common>:
 800fd00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fd04:	4616      	mov	r6, r2
 800fd06:	4699      	mov	r9, r3
 800fd08:	688a      	ldr	r2, [r1, #8]
 800fd0a:	690b      	ldr	r3, [r1, #16]
 800fd0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fd10:	4293      	cmp	r3, r2
 800fd12:	bfb8      	it	lt
 800fd14:	4613      	movlt	r3, r2
 800fd16:	6033      	str	r3, [r6, #0]
 800fd18:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fd1c:	4607      	mov	r7, r0
 800fd1e:	460c      	mov	r4, r1
 800fd20:	b10a      	cbz	r2, 800fd26 <_printf_common+0x26>
 800fd22:	3301      	adds	r3, #1
 800fd24:	6033      	str	r3, [r6, #0]
 800fd26:	6823      	ldr	r3, [r4, #0]
 800fd28:	0699      	lsls	r1, r3, #26
 800fd2a:	bf42      	ittt	mi
 800fd2c:	6833      	ldrmi	r3, [r6, #0]
 800fd2e:	3302      	addmi	r3, #2
 800fd30:	6033      	strmi	r3, [r6, #0]
 800fd32:	6825      	ldr	r5, [r4, #0]
 800fd34:	f015 0506 	ands.w	r5, r5, #6
 800fd38:	d106      	bne.n	800fd48 <_printf_common+0x48>
 800fd3a:	f104 0a19 	add.w	sl, r4, #25
 800fd3e:	68e3      	ldr	r3, [r4, #12]
 800fd40:	6832      	ldr	r2, [r6, #0]
 800fd42:	1a9b      	subs	r3, r3, r2
 800fd44:	42ab      	cmp	r3, r5
 800fd46:	dc26      	bgt.n	800fd96 <_printf_common+0x96>
 800fd48:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fd4c:	1e13      	subs	r3, r2, #0
 800fd4e:	6822      	ldr	r2, [r4, #0]
 800fd50:	bf18      	it	ne
 800fd52:	2301      	movne	r3, #1
 800fd54:	0692      	lsls	r2, r2, #26
 800fd56:	d42b      	bmi.n	800fdb0 <_printf_common+0xb0>
 800fd58:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fd5c:	4649      	mov	r1, r9
 800fd5e:	4638      	mov	r0, r7
 800fd60:	47c0      	blx	r8
 800fd62:	3001      	adds	r0, #1
 800fd64:	d01e      	beq.n	800fda4 <_printf_common+0xa4>
 800fd66:	6823      	ldr	r3, [r4, #0]
 800fd68:	68e5      	ldr	r5, [r4, #12]
 800fd6a:	6832      	ldr	r2, [r6, #0]
 800fd6c:	f003 0306 	and.w	r3, r3, #6
 800fd70:	2b04      	cmp	r3, #4
 800fd72:	bf08      	it	eq
 800fd74:	1aad      	subeq	r5, r5, r2
 800fd76:	68a3      	ldr	r3, [r4, #8]
 800fd78:	6922      	ldr	r2, [r4, #16]
 800fd7a:	bf0c      	ite	eq
 800fd7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fd80:	2500      	movne	r5, #0
 800fd82:	4293      	cmp	r3, r2
 800fd84:	bfc4      	itt	gt
 800fd86:	1a9b      	subgt	r3, r3, r2
 800fd88:	18ed      	addgt	r5, r5, r3
 800fd8a:	2600      	movs	r6, #0
 800fd8c:	341a      	adds	r4, #26
 800fd8e:	42b5      	cmp	r5, r6
 800fd90:	d11a      	bne.n	800fdc8 <_printf_common+0xc8>
 800fd92:	2000      	movs	r0, #0
 800fd94:	e008      	b.n	800fda8 <_printf_common+0xa8>
 800fd96:	2301      	movs	r3, #1
 800fd98:	4652      	mov	r2, sl
 800fd9a:	4649      	mov	r1, r9
 800fd9c:	4638      	mov	r0, r7
 800fd9e:	47c0      	blx	r8
 800fda0:	3001      	adds	r0, #1
 800fda2:	d103      	bne.n	800fdac <_printf_common+0xac>
 800fda4:	f04f 30ff 	mov.w	r0, #4294967295
 800fda8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fdac:	3501      	adds	r5, #1
 800fdae:	e7c6      	b.n	800fd3e <_printf_common+0x3e>
 800fdb0:	18e1      	adds	r1, r4, r3
 800fdb2:	1c5a      	adds	r2, r3, #1
 800fdb4:	2030      	movs	r0, #48	; 0x30
 800fdb6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fdba:	4422      	add	r2, r4
 800fdbc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fdc0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fdc4:	3302      	adds	r3, #2
 800fdc6:	e7c7      	b.n	800fd58 <_printf_common+0x58>
 800fdc8:	2301      	movs	r3, #1
 800fdca:	4622      	mov	r2, r4
 800fdcc:	4649      	mov	r1, r9
 800fdce:	4638      	mov	r0, r7
 800fdd0:	47c0      	blx	r8
 800fdd2:	3001      	adds	r0, #1
 800fdd4:	d0e6      	beq.n	800fda4 <_printf_common+0xa4>
 800fdd6:	3601      	adds	r6, #1
 800fdd8:	e7d9      	b.n	800fd8e <_printf_common+0x8e>
	...

0800fddc <_printf_i>:
 800fddc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fde0:	460c      	mov	r4, r1
 800fde2:	4691      	mov	r9, r2
 800fde4:	7e27      	ldrb	r7, [r4, #24]
 800fde6:	990c      	ldr	r1, [sp, #48]	; 0x30
 800fde8:	2f78      	cmp	r7, #120	; 0x78
 800fdea:	4680      	mov	r8, r0
 800fdec:	469a      	mov	sl, r3
 800fdee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fdf2:	d807      	bhi.n	800fe04 <_printf_i+0x28>
 800fdf4:	2f62      	cmp	r7, #98	; 0x62
 800fdf6:	d80a      	bhi.n	800fe0e <_printf_i+0x32>
 800fdf8:	2f00      	cmp	r7, #0
 800fdfa:	f000 80d8 	beq.w	800ffae <_printf_i+0x1d2>
 800fdfe:	2f58      	cmp	r7, #88	; 0x58
 800fe00:	f000 80a3 	beq.w	800ff4a <_printf_i+0x16e>
 800fe04:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800fe08:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fe0c:	e03a      	b.n	800fe84 <_printf_i+0xa8>
 800fe0e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fe12:	2b15      	cmp	r3, #21
 800fe14:	d8f6      	bhi.n	800fe04 <_printf_i+0x28>
 800fe16:	a001      	add	r0, pc, #4	; (adr r0, 800fe1c <_printf_i+0x40>)
 800fe18:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800fe1c:	0800fe75 	.word	0x0800fe75
 800fe20:	0800fe89 	.word	0x0800fe89
 800fe24:	0800fe05 	.word	0x0800fe05
 800fe28:	0800fe05 	.word	0x0800fe05
 800fe2c:	0800fe05 	.word	0x0800fe05
 800fe30:	0800fe05 	.word	0x0800fe05
 800fe34:	0800fe89 	.word	0x0800fe89
 800fe38:	0800fe05 	.word	0x0800fe05
 800fe3c:	0800fe05 	.word	0x0800fe05
 800fe40:	0800fe05 	.word	0x0800fe05
 800fe44:	0800fe05 	.word	0x0800fe05
 800fe48:	0800ff95 	.word	0x0800ff95
 800fe4c:	0800feb9 	.word	0x0800feb9
 800fe50:	0800ff77 	.word	0x0800ff77
 800fe54:	0800fe05 	.word	0x0800fe05
 800fe58:	0800fe05 	.word	0x0800fe05
 800fe5c:	0800ffb7 	.word	0x0800ffb7
 800fe60:	0800fe05 	.word	0x0800fe05
 800fe64:	0800feb9 	.word	0x0800feb9
 800fe68:	0800fe05 	.word	0x0800fe05
 800fe6c:	0800fe05 	.word	0x0800fe05
 800fe70:	0800ff7f 	.word	0x0800ff7f
 800fe74:	680b      	ldr	r3, [r1, #0]
 800fe76:	1d1a      	adds	r2, r3, #4
 800fe78:	681b      	ldr	r3, [r3, #0]
 800fe7a:	600a      	str	r2, [r1, #0]
 800fe7c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800fe80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fe84:	2301      	movs	r3, #1
 800fe86:	e0a3      	b.n	800ffd0 <_printf_i+0x1f4>
 800fe88:	6825      	ldr	r5, [r4, #0]
 800fe8a:	6808      	ldr	r0, [r1, #0]
 800fe8c:	062e      	lsls	r6, r5, #24
 800fe8e:	f100 0304 	add.w	r3, r0, #4
 800fe92:	d50a      	bpl.n	800feaa <_printf_i+0xce>
 800fe94:	6805      	ldr	r5, [r0, #0]
 800fe96:	600b      	str	r3, [r1, #0]
 800fe98:	2d00      	cmp	r5, #0
 800fe9a:	da03      	bge.n	800fea4 <_printf_i+0xc8>
 800fe9c:	232d      	movs	r3, #45	; 0x2d
 800fe9e:	426d      	negs	r5, r5
 800fea0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fea4:	485e      	ldr	r0, [pc, #376]	; (8010020 <_printf_i+0x244>)
 800fea6:	230a      	movs	r3, #10
 800fea8:	e019      	b.n	800fede <_printf_i+0x102>
 800feaa:	f015 0f40 	tst.w	r5, #64	; 0x40
 800feae:	6805      	ldr	r5, [r0, #0]
 800feb0:	600b      	str	r3, [r1, #0]
 800feb2:	bf18      	it	ne
 800feb4:	b22d      	sxthne	r5, r5
 800feb6:	e7ef      	b.n	800fe98 <_printf_i+0xbc>
 800feb8:	680b      	ldr	r3, [r1, #0]
 800feba:	6825      	ldr	r5, [r4, #0]
 800febc:	1d18      	adds	r0, r3, #4
 800febe:	6008      	str	r0, [r1, #0]
 800fec0:	0628      	lsls	r0, r5, #24
 800fec2:	d501      	bpl.n	800fec8 <_printf_i+0xec>
 800fec4:	681d      	ldr	r5, [r3, #0]
 800fec6:	e002      	b.n	800fece <_printf_i+0xf2>
 800fec8:	0669      	lsls	r1, r5, #25
 800feca:	d5fb      	bpl.n	800fec4 <_printf_i+0xe8>
 800fecc:	881d      	ldrh	r5, [r3, #0]
 800fece:	4854      	ldr	r0, [pc, #336]	; (8010020 <_printf_i+0x244>)
 800fed0:	2f6f      	cmp	r7, #111	; 0x6f
 800fed2:	bf0c      	ite	eq
 800fed4:	2308      	moveq	r3, #8
 800fed6:	230a      	movne	r3, #10
 800fed8:	2100      	movs	r1, #0
 800feda:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fede:	6866      	ldr	r6, [r4, #4]
 800fee0:	60a6      	str	r6, [r4, #8]
 800fee2:	2e00      	cmp	r6, #0
 800fee4:	bfa2      	ittt	ge
 800fee6:	6821      	ldrge	r1, [r4, #0]
 800fee8:	f021 0104 	bicge.w	r1, r1, #4
 800feec:	6021      	strge	r1, [r4, #0]
 800feee:	b90d      	cbnz	r5, 800fef4 <_printf_i+0x118>
 800fef0:	2e00      	cmp	r6, #0
 800fef2:	d04d      	beq.n	800ff90 <_printf_i+0x1b4>
 800fef4:	4616      	mov	r6, r2
 800fef6:	fbb5 f1f3 	udiv	r1, r5, r3
 800fefa:	fb03 5711 	mls	r7, r3, r1, r5
 800fefe:	5dc7      	ldrb	r7, [r0, r7]
 800ff00:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ff04:	462f      	mov	r7, r5
 800ff06:	42bb      	cmp	r3, r7
 800ff08:	460d      	mov	r5, r1
 800ff0a:	d9f4      	bls.n	800fef6 <_printf_i+0x11a>
 800ff0c:	2b08      	cmp	r3, #8
 800ff0e:	d10b      	bne.n	800ff28 <_printf_i+0x14c>
 800ff10:	6823      	ldr	r3, [r4, #0]
 800ff12:	07df      	lsls	r7, r3, #31
 800ff14:	d508      	bpl.n	800ff28 <_printf_i+0x14c>
 800ff16:	6923      	ldr	r3, [r4, #16]
 800ff18:	6861      	ldr	r1, [r4, #4]
 800ff1a:	4299      	cmp	r1, r3
 800ff1c:	bfde      	ittt	le
 800ff1e:	2330      	movle	r3, #48	; 0x30
 800ff20:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ff24:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ff28:	1b92      	subs	r2, r2, r6
 800ff2a:	6122      	str	r2, [r4, #16]
 800ff2c:	f8cd a000 	str.w	sl, [sp]
 800ff30:	464b      	mov	r3, r9
 800ff32:	aa03      	add	r2, sp, #12
 800ff34:	4621      	mov	r1, r4
 800ff36:	4640      	mov	r0, r8
 800ff38:	f7ff fee2 	bl	800fd00 <_printf_common>
 800ff3c:	3001      	adds	r0, #1
 800ff3e:	d14c      	bne.n	800ffda <_printf_i+0x1fe>
 800ff40:	f04f 30ff 	mov.w	r0, #4294967295
 800ff44:	b004      	add	sp, #16
 800ff46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff4a:	4835      	ldr	r0, [pc, #212]	; (8010020 <_printf_i+0x244>)
 800ff4c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ff50:	6823      	ldr	r3, [r4, #0]
 800ff52:	680e      	ldr	r6, [r1, #0]
 800ff54:	061f      	lsls	r7, r3, #24
 800ff56:	f856 5b04 	ldr.w	r5, [r6], #4
 800ff5a:	600e      	str	r6, [r1, #0]
 800ff5c:	d514      	bpl.n	800ff88 <_printf_i+0x1ac>
 800ff5e:	07d9      	lsls	r1, r3, #31
 800ff60:	bf44      	itt	mi
 800ff62:	f043 0320 	orrmi.w	r3, r3, #32
 800ff66:	6023      	strmi	r3, [r4, #0]
 800ff68:	b91d      	cbnz	r5, 800ff72 <_printf_i+0x196>
 800ff6a:	6823      	ldr	r3, [r4, #0]
 800ff6c:	f023 0320 	bic.w	r3, r3, #32
 800ff70:	6023      	str	r3, [r4, #0]
 800ff72:	2310      	movs	r3, #16
 800ff74:	e7b0      	b.n	800fed8 <_printf_i+0xfc>
 800ff76:	6823      	ldr	r3, [r4, #0]
 800ff78:	f043 0320 	orr.w	r3, r3, #32
 800ff7c:	6023      	str	r3, [r4, #0]
 800ff7e:	2378      	movs	r3, #120	; 0x78
 800ff80:	4828      	ldr	r0, [pc, #160]	; (8010024 <_printf_i+0x248>)
 800ff82:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ff86:	e7e3      	b.n	800ff50 <_printf_i+0x174>
 800ff88:	065e      	lsls	r6, r3, #25
 800ff8a:	bf48      	it	mi
 800ff8c:	b2ad      	uxthmi	r5, r5
 800ff8e:	e7e6      	b.n	800ff5e <_printf_i+0x182>
 800ff90:	4616      	mov	r6, r2
 800ff92:	e7bb      	b.n	800ff0c <_printf_i+0x130>
 800ff94:	680b      	ldr	r3, [r1, #0]
 800ff96:	6826      	ldr	r6, [r4, #0]
 800ff98:	6960      	ldr	r0, [r4, #20]
 800ff9a:	1d1d      	adds	r5, r3, #4
 800ff9c:	600d      	str	r5, [r1, #0]
 800ff9e:	0635      	lsls	r5, r6, #24
 800ffa0:	681b      	ldr	r3, [r3, #0]
 800ffa2:	d501      	bpl.n	800ffa8 <_printf_i+0x1cc>
 800ffa4:	6018      	str	r0, [r3, #0]
 800ffa6:	e002      	b.n	800ffae <_printf_i+0x1d2>
 800ffa8:	0671      	lsls	r1, r6, #25
 800ffaa:	d5fb      	bpl.n	800ffa4 <_printf_i+0x1c8>
 800ffac:	8018      	strh	r0, [r3, #0]
 800ffae:	2300      	movs	r3, #0
 800ffb0:	6123      	str	r3, [r4, #16]
 800ffb2:	4616      	mov	r6, r2
 800ffb4:	e7ba      	b.n	800ff2c <_printf_i+0x150>
 800ffb6:	680b      	ldr	r3, [r1, #0]
 800ffb8:	1d1a      	adds	r2, r3, #4
 800ffba:	600a      	str	r2, [r1, #0]
 800ffbc:	681e      	ldr	r6, [r3, #0]
 800ffbe:	6862      	ldr	r2, [r4, #4]
 800ffc0:	2100      	movs	r1, #0
 800ffc2:	4630      	mov	r0, r6
 800ffc4:	f7f0 f924 	bl	8000210 <memchr>
 800ffc8:	b108      	cbz	r0, 800ffce <_printf_i+0x1f2>
 800ffca:	1b80      	subs	r0, r0, r6
 800ffcc:	6060      	str	r0, [r4, #4]
 800ffce:	6863      	ldr	r3, [r4, #4]
 800ffd0:	6123      	str	r3, [r4, #16]
 800ffd2:	2300      	movs	r3, #0
 800ffd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ffd8:	e7a8      	b.n	800ff2c <_printf_i+0x150>
 800ffda:	6923      	ldr	r3, [r4, #16]
 800ffdc:	4632      	mov	r2, r6
 800ffde:	4649      	mov	r1, r9
 800ffe0:	4640      	mov	r0, r8
 800ffe2:	47d0      	blx	sl
 800ffe4:	3001      	adds	r0, #1
 800ffe6:	d0ab      	beq.n	800ff40 <_printf_i+0x164>
 800ffe8:	6823      	ldr	r3, [r4, #0]
 800ffea:	079b      	lsls	r3, r3, #30
 800ffec:	d413      	bmi.n	8010016 <_printf_i+0x23a>
 800ffee:	68e0      	ldr	r0, [r4, #12]
 800fff0:	9b03      	ldr	r3, [sp, #12]
 800fff2:	4298      	cmp	r0, r3
 800fff4:	bfb8      	it	lt
 800fff6:	4618      	movlt	r0, r3
 800fff8:	e7a4      	b.n	800ff44 <_printf_i+0x168>
 800fffa:	2301      	movs	r3, #1
 800fffc:	4632      	mov	r2, r6
 800fffe:	4649      	mov	r1, r9
 8010000:	4640      	mov	r0, r8
 8010002:	47d0      	blx	sl
 8010004:	3001      	adds	r0, #1
 8010006:	d09b      	beq.n	800ff40 <_printf_i+0x164>
 8010008:	3501      	adds	r5, #1
 801000a:	68e3      	ldr	r3, [r4, #12]
 801000c:	9903      	ldr	r1, [sp, #12]
 801000e:	1a5b      	subs	r3, r3, r1
 8010010:	42ab      	cmp	r3, r5
 8010012:	dcf2      	bgt.n	800fffa <_printf_i+0x21e>
 8010014:	e7eb      	b.n	800ffee <_printf_i+0x212>
 8010016:	2500      	movs	r5, #0
 8010018:	f104 0619 	add.w	r6, r4, #25
 801001c:	e7f5      	b.n	801000a <_printf_i+0x22e>
 801001e:	bf00      	nop
 8010020:	08033049 	.word	0x08033049
 8010024:	0803305a 	.word	0x0803305a

08010028 <__retarget_lock_acquire_recursive>:
 8010028:	4770      	bx	lr

0801002a <__retarget_lock_release_recursive>:
 801002a:	4770      	bx	lr

0801002c <_realloc_r>:
 801002c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801002e:	4607      	mov	r7, r0
 8010030:	4614      	mov	r4, r2
 8010032:	460e      	mov	r6, r1
 8010034:	b921      	cbnz	r1, 8010040 <_realloc_r+0x14>
 8010036:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801003a:	4611      	mov	r1, r2
 801003c:	f7ff bc2a 	b.w	800f894 <_malloc_r>
 8010040:	b922      	cbnz	r2, 801004c <_realloc_r+0x20>
 8010042:	f7ff fbd7 	bl	800f7f4 <_free_r>
 8010046:	4625      	mov	r5, r4
 8010048:	4628      	mov	r0, r5
 801004a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801004c:	f000 f814 	bl	8010078 <_malloc_usable_size_r>
 8010050:	42a0      	cmp	r0, r4
 8010052:	d20f      	bcs.n	8010074 <_realloc_r+0x48>
 8010054:	4621      	mov	r1, r4
 8010056:	4638      	mov	r0, r7
 8010058:	f7ff fc1c 	bl	800f894 <_malloc_r>
 801005c:	4605      	mov	r5, r0
 801005e:	2800      	cmp	r0, #0
 8010060:	d0f2      	beq.n	8010048 <_realloc_r+0x1c>
 8010062:	4631      	mov	r1, r6
 8010064:	4622      	mov	r2, r4
 8010066:	f7ff fb95 	bl	800f794 <memcpy>
 801006a:	4631      	mov	r1, r6
 801006c:	4638      	mov	r0, r7
 801006e:	f7ff fbc1 	bl	800f7f4 <_free_r>
 8010072:	e7e9      	b.n	8010048 <_realloc_r+0x1c>
 8010074:	4635      	mov	r5, r6
 8010076:	e7e7      	b.n	8010048 <_realloc_r+0x1c>

08010078 <_malloc_usable_size_r>:
 8010078:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801007c:	1f18      	subs	r0, r3, #4
 801007e:	2b00      	cmp	r3, #0
 8010080:	bfbc      	itt	lt
 8010082:	580b      	ldrlt	r3, [r1, r0]
 8010084:	18c0      	addlt	r0, r0, r3
 8010086:	4770      	bx	lr

08010088 <_init>:
 8010088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801008a:	bf00      	nop
 801008c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801008e:	bc08      	pop	{r3}
 8010090:	469e      	mov	lr, r3
 8010092:	4770      	bx	lr

08010094 <_fini>:
 8010094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010096:	bf00      	nop
 8010098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801009a:	bc08      	pop	{r3}
 801009c:	469e      	mov	lr, r3
 801009e:	4770      	bx	lr
